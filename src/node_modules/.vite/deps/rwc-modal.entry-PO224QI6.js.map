{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/components/modal/modal.scss?tag=rwc-modal&encapsulation=shadow", "../../@rehaps/rehaps-web-components/dist/esm/src/components/modal/modal.tsx"],
  "sourcesContent": [":host {\n  /**\n   * CSS Variables\n   *\n   * --falloff-color: Background color of the modal overlay.\n   * --container-spacing: Spacing around the modal container.\n   * --header-spacing: Spacing inside the modal header.\n   * --content-spacing: Spacing inside the modal content.\n   * --footer-spacing: Spacing inside the modal footer.\n   * --max-container-width: Maximum width of the modal container.\n   * --min-container-width: Minimum width of the modal container.\n   * --background-color: Background color of the modal.\n   * --border-radius: Border radius of the modal.\n   * --divider-color: Color of the divider line in the modal.\n   * --divider-width: Width of the divider line in the modal.\n   * --icon-size: Size of the close icon in the modal.\n   * --icon-padding: Padding around the close icon in the modal.\n   * --icon-color: Color of the close icon in the modal.\n   * --icon-color--hover: Hover color of the close icon in the modal.\n   * --modal-animation-duration: Duration of the modal animation.\n   */\n  --falloff-color: var(--rwc-falloff-color);\n  --container-spacing: var(--rwc-spacing--sm);\n  --header-spacing: var(--rwc-spacing--lo) var(--rwc-spacing--md);\n  --content-spacing: var(--rwc-spacing--md);\n  --footer-spacing: var(--rwc-spacing--lo) var(--rwc-spacing--md);\n  --max-container-width: 42.5rem;\n  --min-container-width: 20rem;\n  --background-color: var(--rwc-background-color-main);\n  --border-radius: var(--rwc-border-radius--md);\n  --divider-color: var(--rwc-divider-color--light);\n  --divider-width: var(--rwc-divider-width--default);\n  --icon-size: var(--rwc-icon-size--md);\n  --icon-padding: var(--rwc-spacing--sm);\n  --icon-color: var(--rwc-color-neutral);\n  --icon-color--hover: var(--rwc-color-neutral--hover);\n\n  --modal-animation-duration: 200ms;\n\n  @media all and (min-width: 30rem) {\n    --container-spacing: var(--rwc-spacing--md);\n  }\n\n  @media all and (min-width: 64rem) {\n    --container-spacing: var(--rwc-spacing--xl);\n  }\n}\n\n.container {\n  background-color: var(--falloff-color);\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n  position: fixed;\n  opacity: 0;\n\n  &.open {\n    display: flex;\n  }\n\n  &.inner-scroll {\n    .scroll-wrapper {\n      overflow-y: hidden;\n    }\n\n    .content {\n      overflow-y: auto;\n    }\n\n    .inner-container-wrapper {\n      max-height: 100vh;\n      position: relative;\n      height: 100%;\n    }\n\n    .inner-container {\n      max-height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n  }\n}\n\n.scroll-wrapper {\n  overflow-y: auto;\n}\n\n.inner-container-wrapper {\n  box-sizing: border-box;\n  padding: var(--container-spacing);\n  margin-left: auto;\n  margin-right: auto;\n  max-width: calc(var(--max-container-width) + 2 * var(--container-spacing));\n  min-width: var(--min-container-width);\n  width: 100%;\n}\n\n.inner-container {\n  background-color: var(--background-color);\n  border-radius: var(--border-radius);\n  position: relative;\n}\n\n.header {\n  padding: var(--header-spacing);\n  position: relative;\n\n  &.flex {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n\n    .close {\n      flex-shrink: 0;\n    }\n  }\n\n  &.empty {\n    padding-top: calc(var(--icon-size) - var(--content-spacing));\n  }\n}\n\n.content {\n  padding: var(--content-spacing);\n  overflow-y: hidden;\n}\n\n.footer {\n  padding: var(--footer-spacing);\n}\n\n.divider {\n  background-color: var(--divider-color);\n  height: var(--divider-width);\n  width: 100%;\n}\n\n.close-wrapper {\n  position: absolute;\n  height: 100%;\n  right: 0;\n  top: 0;\n}\n\n.close {\n  box-sizing: content-box;\n  cursor: pointer;\n  color: var(--icon-color);\n  display: flex;\n  flex-direction: column;\n  height: var(--icon-size);\n  width: var(--icon-size);\n  justify-content: center;\n  padding: var(--icon-padding);\n  transition: color 0.2s ease-in-out;\n\n  &:hover {\n    color: var(--icon-color--hover);\n  }\n\n  img {\n    height: 100%;\n    max-width: 100%;\n    max-height: 100%;\n  }\n}\n", "import {\n  Component,\n  h,\n  Element,\n  State,\n  Prop,\n  Event,\n  EventEmitter,\n  Method,\n  Fragment,\n  FunctionalComponent,\n  Host,\n} from \"@stencil/core\";\nimport { RWCActionHelper } from \"../../utils/actions/rwcActionHelper\";\nimport CloseIcon from \"@material-design-icons/svg/round/close.svg\";\nimport { EventManager } from \"../../utils/actions/eventManager\";\nimport { IOpenable } from \"../../interfaces/actions/IOpenable\";\nimport { IClosable } from \"../../interfaces/actions/IClosable\";\nimport { IToggleable } from \"../../interfaces/actions/IToggleable\";\n\n/**\n *\n * @slot header The slot for the header content of the modal.\n * @slot footer The slot for the footer content of the modal.\n * @slot - Default - The default slot for the main content of the modal.\n */\n@Component({\n  tag: \"rwc-modal\",\n  styleUrl: \"modal.scss\",\n  shadow: true,\n})\nexport class RwcModal implements IOpenable, IClosable, IToggleable {\n  /**\n   * The reference to the currently open modal component.\n   */\n  static openModal: RwcModal = null;\n\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcModalElement;\n\n  /**\n   * The reference to the root element.\n   */\n  private rootElement?: HTMLDivElement;\n\n  /**\n   * The reference to the inner container of the modal.\n   */\n  private innerContainer?: HTMLDivElement;\n\n  /**\n   * Determines if the modal has content in the header slot.\n   */\n  private hasHeaderContent: boolean = false;\n\n  /**\n   * Determines if the modal has content in the footer slot.\n   */\n  private hasFooterContent: boolean = false;\n\n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  public eventManager: EventManager = new EventManager();\n\n  /**\n   * List of the actions available for the component.\n   */\n  public actions: (\"open\" | \"close\" | \"toggle\")[] = [\"open\", \"close\", \"toggle\"];\n\n  /**\n   * The timeout callback of the modal animation.\n   */\n  private animationTimeout: NodeJS.Timeout = null;\n\n  /**\n   * Key used to bind action elements to the modal.\n   */\n  @Prop({ reflect: true })\n  rwcKey: string = RWCActionHelper.getDefaultComponentKey(\"modal\");\n\n  /**\n   * If content is longer than sidebar then scroll self instead of parent.\n   */\n  @Prop({ reflect: true }) innerScroll: boolean = false;\n\n  /**\n   * Sets rendering of divider after the header.\n   */\n  @Prop({ reflect: true }) renderHeaderDivider: boolean = true;\n\n  /**\n   * Sets rendering of divider before the footer.\n   */\n  @Prop({ reflect: true }) renderFooterDivider: boolean = true;\n\n  /**\n   * Sets rendering of close icon.\n   */\n  @Prop({ reflect: true }) renderCloseIcon: boolean = true;\n\n  /**\n   * Speed of the modal fade in/out animation.\n   */\n  @Prop() animationSpeed: number = 200;\n\n  /**\n   * The event called on completing the opening of the modal.\n   */\n  @Event({ eventName: \"modalOpen\" }) openEvent: EventEmitter<void>;\n\n  /**\n   * The event called on completing the closing of the modal.\n   */\n  @Event({ eventName: \"modalClose\" }) closeEvent: EventEmitter<void>;\n\n  /**\n   * The current open state of the modal.\n   */\n  @State() isOpen: boolean = false;\n\n  /**\n   * Get current opacity from style if set or from computed style otherwise.\n   */\n  get currentOpacity(): number {\n    return Number.parseFloat(\n      this.rootElement?.style.opacity ||\n        getComputedStyle(this.rootElement).opacity\n    );\n  }\n\n  /**\n   * Gets the animation duration from style variables in milliseconds.\n   */\n  get animationDuration(): number {\n    return Number.parseInt(\n      getComputedStyle(this.host).getPropertyValue(\"--modal-animation-duration\")\n    );\n  }\n\n  /**\n   * Initializes event listeners on insert into DOM.\n   */\n  connectedCallback(): void {\n    this.init();\n  }\n\n  /**\n   * Removes registered event listeners before removing from DOM.\n   */\n  disconnectedCallback(): void {\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Called before each render call.\n   */\n  componentWillRender(): void {\n    this.hasHeaderContent = Boolean(this.host.querySelector('[slot=\"header\"]'));\n    this.hasFooterContent = Boolean(this.host.querySelector('[slot=\"footer\"]'));\n  }\n\n  /**\n   * Initializes toggle / close / open events.\n   */\n  @Method()\n  async init(): Promise<void> {\n    this.eventManager.clearEventListeners();\n    this.bindToggleActions();\n  }\n\n  /**\n   * Toggles sidebar's open state.\n   */\n  @Method()\n  async toggle(): Promise<void> {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens sidebar.\n   */\n  @Method()\n  async open(): Promise<void> {\n    if (!this.isOpen) {\n      if (RwcModal.openModal !== null) {\n        await RwcModal.openModal.close();\n      }\n\n      clearTimeout(this.animationTimeout);\n\n      this.isOpen = true;\n\n      this.animationTimeout = setTimeout(() => {\n        RwcModal.openModal = this;\n        document.body.classList.add(\"modal-open\");\n        this.openEvent.emit();\n      }, this.animationDuration);\n    }\n  }\n\n  /**\n   * Closes the modal.\n   */\n  @Method()\n  async close(): Promise<void> {\n    if (this.isOpen) {\n      clearTimeout(this.animationTimeout);\n\n      this.isOpen = false;\n\n      setTimeout(() => {\n        if (RwcModal.openModal === this) {\n          RwcModal.openModal = null;\n          document.body.classList.remove(\"modal-open\");\n        }\n        this.closeEvent.emit();\n      }, this.animationDuration);\n    }\n  }\n\n  /**\n   * Bind toggle events to the elements matching this component's key.\n   */\n  bindToggleActions(): void {\n    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey);\n  }\n\n  /**\n   * Handle falloff click (background area of modal window).\n   */\n  falloffClick(event: PointerEvent): void {\n    if (\n      !this.innerContainer.contains(event.target as HTMLElement) &&\n      !this.host.contains(event.target as HTMLElement)\n    ) {\n      this.close();\n    }\n  }\n\n  /**\n   * Get header html if header content is set.\n   */\n  private renderHeaderHtml(): string {\n    if (this.hasHeaderContent) {\n      return (\n        <Fragment>\n          <div class={{ header: true, flex: this.renderCloseIcon }}>\n            <div>\n              <slot name=\"header\"></slot>\n            </div>\n            {this.renderCloseIcon ? this.renderCloseIconHtml() : \"\"}\n          </div>\n          {this.renderHeaderDivider ? <div class=\"divider\"></div> : \"\"}\n        </Fragment>\n      );\n    } else if (this.renderCloseIcon) {\n      return <div class=\"header empty\">{this.renderCloseIconHtml()}</div>;\n    }\n    return \"\";\n  }\n\n  /**\n   * Renders the footer if footer content is set.\n   */\n  private renderFooterHtml(): FunctionalComponent {\n    if (this.hasFooterContent) {\n      return (\n        <Fragment>\n          {this.renderFooterDivider ? <div class=\"divider\"></div> : \"\"}\n          <div class=\"footer\">\n            <slot name=\"footer\"></slot>\n          </div>\n        </Fragment>\n      );\n    }\n    return <Fragment></Fragment>;\n  }\n\n  /**\n   * Renders the close icon if rendering of close icon is enabled.\n   */\n  private renderCloseIconHtml(): FunctionalComponent {\n    if (this.renderCloseIcon) {\n      return (\n        <Fragment>\n          <div class=\"close-wrapper\">\n            <div\n              class=\"close\"\n              onClick={() => this.close()}\n              innerHTML={CloseIcon}\n            ></div>\n          </div>\n        </Fragment>\n      );\n    }\n    return <Fragment></Fragment>;\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={(element: HTMLDivElement) => (this.rootElement = element)}\n          class={{\n            container: true,\n            open: this.isOpen,\n            \"inner-scroll\": this.innerScroll,\n          }}\n          onClick={(event: PointerEvent) => this.falloffClick(event)}\n        >\n          <div class=\"scroll-wrapper\">\n            <div class=\"inner-container-wrapper\">\n              <div\n                class=\"inner-container\"\n                ref={(element: HTMLDivElement) =>\n                  (this.innerContainer = element)\n                }\n              >\n                {this.renderHeaderHtml()}\n\n                <div class=\"content\">\n                  <slot></slot>\n                </div>\n\n                {this.renderFooterHtml()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["CloseIcon"]
}
