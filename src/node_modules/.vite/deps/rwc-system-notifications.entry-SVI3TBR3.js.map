{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/components/messages/system-notifications/system-notifications.scss?tag=rwc-system-notifications&encapsulation=shadow", "../../@rehaps/rehaps-web-components/dist/esm/src/components/messages/system-notifications/system-notifications.tsx"],
  "sourcesContent": ["@import \"global.scss\";\n\n:host {\n  /**\n   * @prop --system-notifications-info-title-color: Title color for info notifications.\n   * @prop --system-notifications-info-message-color: Message color for info notifications.\n   * @prop --system-notifications-info-background-color: Background color for info notifications.\n   * @prop --system-notifications-info-border-color: Border color for info notifications.\n   * @prop --system-notifications-info-close-icon-color: Close icon color for info notifications.\n   * @prop --system-notifications-info-close-icon-hover-color: Close icon hover color for info notifications.\n   * \n   * @prop --system-notifications-success-title-color: Title color for success notifications.\n   * @prop --system-notifications-success-message-color: Message color for success notifications.\n   * @prop --system-notifications-success-background-color: Background color for success notifications.\n   * @prop --system-notifications-success-border-color: Border color for success notifications.\n   * @prop --system-notifications-success-close-icon-color: Close icon color for success notifications.\n   * @prop --system-notifications-success-close-icon-hover-color: Close icon hover color for success notifications.\n   * \n   * @prop --system-notifications-warning-title-color: Title color for warning notifications.\n   * @prop --system-notifications-warning-message-color: Message color for warning notifications.\n   * @prop --system-notifications-warning-background-color: Background color for warning notifications.\n   * @prop --system-notifications-warning-border-color: Border color for warning notifications.\n   * @prop --system-notifications-warning-close-icon-color: Close icon color for warning notifications.\n   * @prop --system-notifications-warning-close-icon-hover-color: Close icon hover color for warning notifications.\n   * \n   * @prop --system-notifications-error-title-color: Title color for error notifications.\n   * @prop --system-notifications-error-message-color: Message color for error notifications.\n   * @prop --system-notifications-error-background-color: Background color for error notifications.\n   * @prop --system-notifications-error-border-color: Border color for error notifications.\n   * @prop --system-notifications-error-close-icon-color: Close icon color for error notifications.\n   * @prop --system-notifications-error-close-icon-hover-color: Close icon hover color for error notifications.\n   * \n   * @prop --system-notifications-border-width: Border width for notifications.\n   * @prop --system-notifications-border-style: Border style for notifications.\n   * @prop --system-notifications-border-radius: Border radius for notifications.\n   * \n   * @prop --system-notifications-item-padding: Padding for notification items.\n   * @prop --system-notifications-item-gap: Gap between notification items.\n   * \n   * @prop --system-notifications-close-icon-size: Size of the close icon.\n   * @prop --system-notifications-close-icon-spacing-right: Spacing to the right of the close icon.\n   * \n   * @prop --system-notifications-title-font-size: Font size for the title.\n   * @prop --system-notifications-title-font-weight: Font weight for the title.\n   * \n   * @prop --system-notifications-message-font-size: Font size for the message.\n   * @prop --system-notifications-message-font-weight: Font weight for the message.\n   * \n   * @prop --system-notifications-fade-animation-duration: Duration of the fade animation.\n   * @prop --system-notifications-height-animation-duration: Duration of the open and close animation. Open animation is 2x faster.\n   */\n  --system-notifications-info-title-color: #{$rwc-color-text-primary};\n  --system-notifications-info-message-color: #{$rwc-color-grey-900};\n  --system-notifications-info-background-color: #{$rwc-color-blue-300};\n  --system-notifications-info-border-color: #{$rwc-color-blue-600};\n  --system-notifications-info-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-info-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-success-title-color: #{$rwc-color-text-primary};\n  --system-notifications-success-message-color: #{$rwc-color-grey-900};\n  --system-notifications-success-background-color: #{$rwc-color-green-500};\n  --system-notifications-success-border-color: #{$rwc-color-green-700};\n  --system-notifications-success-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-success-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-warning-title-color: #{$rwc-color-text-primary};\n  --system-notifications-warning-message-color: #{$rwc-color-grey-900};\n  --system-notifications-warning-background-color: #{$rwc-color-orange-300};\n  --system-notifications-warning-border-color: #{$rwc-color-orange-600};\n  --system-notifications-warning-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-warning-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-error-title-color: #{$rwc-color-text-primary};\n  --system-notifications-error-message-color: #{$rwc-color-grey-900};\n  --system-notifications-error-background-color: #{$rwc-color-red-300};\n  --system-notifications-error-border-color: #{$rwc-color-red-600};\n  --system-notifications-error-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-error-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-border-width: 2px;\n  --system-notifications-border-style: solid;\n  --system-notifications-border-radius: 0.5rem;\n\n  --system-notifications-item-padding: #{$rwc-spacing--xs} #{$rwc-spacing--xxl}\n    #{$rwc-spacing--xs} #{$rwc-spacing--xs};\n  --system-notifications-item-gap: #{$rwc-spacing--3xs};\n\n  --system-notifications-close-icon-size: 1.5rem;\n  --system-notifications-close-icon-spacing-right: #{$rwc-spacing--xs};\n\n  --system-notifications-title-font-size: #{$rwc-font-size-body-sm};\n  --system-notifications-title-font-weight: 600;\n\n  --system-notifications-message-font-size: #{$rwc-font-size-label-sm};\n  --system-notifications-message-font-weight: 500;\n\n  --system-notifications-fade-animation-duration: 500ms;\n  --system-notifications-height-animation-duration: 200ms;\n\n  display: block;\n}\n\np {\n  margin: 0;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: var(--system-notifications-item-gap);\n  position: relative;\n}\n\n.notification-wrapper {\n  box-sizing: border-box;\n  width: 100%;\n  overflow: hidden;\n  max-height: 0;\n\n  transition: opacity var(--system-notifications-fade-animation-duration),\n    max-height calc(var(--system-notifications-height-animation-duration) / 2) linear;\n\n  &.closing {\n    max-height: 0 !important;\n    opacity: 0;\n\n    transition: opacity var(--system-notifications-fade-animation-duration),\n      max-height var(--system-notifications-height-animation-duration) linear\n        calc(\n          var(--system-notifications-fade-animation-duration) -\n            var(--system-notifications-height-animation-duration)\n        );\n  }\n}\n\n.notification {\n  --system-notifications-background-color: var(\n    --system-notifications-info-background-color\n  );\n  --system-notifications-border-color: var(\n    --system-notifications-info-border-color\n  );\n  --system-notifications-title-color: var(\n    --system-notifications-info-title-color\n  );\n  --system-notifications-message-color: var(\n    --system-notifications-info-message-color\n  );\n  --system-notifications-close-icon-color: var(\n    --system-notifications-info-close-icon-color\n  );\n  --system-notifications-close-icon-hover-color: var(\n    --system-notifications-info-close-icon-hover-color\n  );\n\n  background-color: var(--system-notifications-background-color);\n  border: var(--system-notifications-border-width)\n    var(--system-notifications-border-style)\n    var(--system-notifications-border-color);\n\n  border-radius: var(--system-notifications-border-radius);\n  opacity: 1;\n  padding: var(--system-notifications-item-padding);\n  position: relative;\n\n  &.success {\n    --system-notifications-background-color: var(\n      --system-notifications-success-background-color\n    );\n    --system-notifications-border-color: var(\n      --system-notifications-success-border-color\n    );\n    --system-notifications-title-color: var(\n      --system-notifications-success-title-color\n    );\n    --system-notifications-message-color: var(\n      --system-notifications-success-message-color\n    );\n    --system-notifications-close-icon-color: var(\n      --system-notifications-success-close-icon-color\n    );\n    --system-notifications-close-icon-hover-color: var(\n      --system-notifications-success-close-icon-hover-color\n    );\n  }\n\n  &.warning {\n    --system-notifications-background-color: var(\n      --system-notifications-warning-background-color\n    );\n    --system-notifications-border-color: var(\n      --system-notifications-warning-border-color\n    );\n    --system-notifications-title-color: var(\n      --system-notifications-warning-title-color\n    );\n    --system-notifications-message-color: var(\n      --system-notifications-warning-message-color\n    );\n    --system-notifications-close-icon-color: var(\n      --system-notifications-warning-close-icon-color\n    );\n    --system-notifications-close-icon-hover-color: var(\n      --system-notifications-warning-close-icon-hover-color\n    );\n  }\n\n  &.error {\n    --system-notifications-background-color: var(\n      --system-notifications-error-background-color\n    );\n    --system-notifications-border-color: var(\n      --system-notifications-error-border-color\n    );\n    --system-notifications-title-color: var(\n      --system-notifications-error-title-color\n    );\n    --system-notifications-message-color: var(\n      --system-notifications-error-message-color\n    );\n    --system-notifications-close-icon-color: var(\n      --system-notifications-error-close-icon-color\n    );\n    --system-notifications-close-icon-hover-color: var(\n      --system-notifications-error-close-icon-hover-color\n    );\n  }\n}\n\n.close-icon {\n  bottom: 0;\n  top: 0;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  position: absolute;\n  right: var(--system-notifications-close-icon-spacing-right);\n\n  & > svg {\n    fill: var(--system-notifications-close-icon-color);\n    height: var(--system-notifications-close-icon-size);\n  }\n  &:hover {\n    & > svg {\n      fill: var(--system-notifications-close-icon-hover-color);\n    }\n  }\n}\n\n.title {\n  color: var(--system-notifications-title-color);\n  font-size: var(--system-notifications-title-font-size);\n  font-weight: var(--system-notifications-title-font-weight);\n}\n\n.message {\n  color: var(--system-notifications-message-color);\n  font-size: var(--system-notifications-message-font-size);\n  font-weight: var(--system-notifications-message-font-weight);\n}\n", "import {\n  h,\n  Component,\n  FunctionalComponent,\n  Host,\n  State,\n  Method,\n  Element,\n  Fragment,\n  Listen,\n} from \"@stencil/core\";\nimport { SystemNotificationInterface } from \"../../../interfaces/components/messages/system-notifications/system-notifications\";\nimport CloseIcon from \"@material-design-icons/svg/round/close.svg\";\n\n/**\n * This is a component for system notifications.\n */\n@Component({\n  tag: \"rwc-system-notifications\",\n  styleUrl: \"system-notifications.scss\",\n  shadow: true,\n})\nexport class RwcSystemNotification {\n  /**\n   * The reference to the host element.\n   */\n  @Element() host!: HTMLRwcSystemNotificationsElement;\n\n  /**\n   * The reference to the notification container element.\n   */\n  private notificationContainerElement!: HTMLDivElement;\n\n  /**\n   * This state holds the notifications.\n   */\n  @State() notifications: Map<\n    SystemNotificationInterface,\n    NodeJS.Timeout | null\n  > = new Map();\n\n  /**\n   * This state is used to trigger changes.\n   */\n  @State() stateChangeTrigger: boolean = false;\n\n  /**\n   * This method gets the animation duration from the host element style.\n   */\n  private get animationDuration(): number {\n    return Number.parseInt(\n      getComputedStyle(this.host).getPropertyValue(\n        \"--system-notifications-fade-animation-duration\"\n      )\n    );\n  }\n\n  /**\n   * This method gets the close animation duration from the host element style.\n   */\n  private get heightAnimationDuration(): number {\n    return Number.parseInt(\n      getComputedStyle(this.host).getPropertyValue(\n        \"--system-notifications-height-animation-duration\"\n      )\n    );\n  }\n\n  /**\n   * Sets the max height of each of notifications wrapper to size of its content.\n   */\n  @Listen(\"resize\", { target: \"window\" })\n  onWindowResize(): void {\n    this.notificationContainerElement\n      .querySelectorAll(\".notification-wrapper\")\n      .forEach((wrapper: HTMLDivElement) => {\n        wrapper.style.maxHeight = `${wrapper.scrollHeight}px`;\n      });\n  }\n\n  /**\n   * Initialzies the timeout callbacks for any notifications existing in component.\n   */\n  public connectedCallback(): void {\n    this.notifications.clear();\n  }\n\n  /**\n   * Clears the timout callbacks.\n   */\n  public disconnectedCallback() {\n    this.notifications.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n  }\n\n  /**\n   * This method pushes a notification. Generates random key if not set.\n   * @returns {string} The notification key.\n   */\n  @Method()\n  public async pushNotification(\n    notification: SystemNotificationInterface\n  ): Promise<string> {\n    if (!notification.key) {\n      notification.key = Math.floor(\n        Math.random() * Number.MAX_SAFE_INTEGER\n      ).toString();\n    }\n\n    this.notifications.set(notification, this.initAutoRemove(notification));\n\n    if (this.forceStateChange()) {\n      await new Promise(requestAnimationFrame);\n\n      // Calculate and set the height after the browser has had a chance to render the element\n      setTimeout(() => {\n        this.updateNotificationMaxHeight(notification);\n      }, 0);\n    }\n    return notification.key;\n  }\n\n  /**\n   * This method sets notifications.\n   */\n  @Method()\n  public async setNotifications(\n    notifications: SystemNotificationInterface[]\n  ): Promise<string[]> {\n    this.clearNotifications();\n    const keys: string[] = [];\n    for (const notification of notifications) {\n      keys.push(await this.pushNotification(notification));\n    }\n\n    return keys;\n  }\n\n  /**\n   * This method removes a notification.\n   */\n  @Method()\n  public async removeNotification(index: number): Promise<void> {\n    const key = Array.from(this.notifications.keys())[index];\n    this.removeNotificationByReference(key);\n  }\n\n  /**\n   * This method clears all notifications.\n   */\n  @Method()\n  public async clearNotifications(): Promise<void> {\n    this.notifications.clear();\n    this.forceStateChange();\n  }\n\n  /**\n   * This method initializes auto removal of a notification.\n   */\n  private initAutoRemove(\n    notification: SystemNotificationInterface\n  ): NodeJS.Timeout | null {\n    this.unsetAutoRemoveByReference(notification);\n    if (notification.duration > 0) {\n      return setTimeout(() => {\n        this.removeNotificationByReference(notification);\n      }, notification.duration);\n    }\n\n    return null;\n  }\n\n  /**\n   * This method unsets auto removal of a notification by reference.\n   */\n  private unsetAutoRemoveByReference(\n    notification: SystemNotificationInterface\n  ): void {\n    const timeout = this.notifications.get(notification);\n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * This method removes a notification by reference.\n   */\n  private async removeNotificationByReference(\n    notification: SystemNotificationInterface\n  ): Promise<void> {\n    setTimeout(() => {\n      notification.closing = true;\n\n      if (this.forceStateChange()) {\n        setTimeout(() => {\n          this.handleNotificationRemove(notification);\n        }, Math.max(0, this.animationDuration - this.heightAnimationDuration));\n      }\n    }, 0);\n  }\n\n  /**\n   * Awaits end of closing animation and removes the notification from the list.\n   * @param notification The notification to remove.\n   */\n  private async handleNotificationRemove(\n    notification: SystemNotificationInterface\n  ): Promise<void> {\n    setTimeout(() => {\n      this.notifications.delete(notification);\n      this.forceStateChange();\n    }, Math.max(0, this.heightAnimationDuration));\n  }\n\n  /**\n   * Updates the max-height style attribute to the current height needed to render content.\n   * @param {SystemNotificationInterface} notification The notification to update the height for.\n   * @returns {HTMLElement} The html element of the notification.\n   */\n  private updateNotificationMaxHeight(\n    notification: SystemNotificationInterface\n  ): HTMLElement {\n    const notificationElement: HTMLElement = this.notificationContainerElement.querySelector(\n      `[data-key=\"${notification.key}\"]`\n    );\n\n    if (notificationElement) {\n      notificationElement.style.maxHeight = `${notificationElement.scrollHeight}px`;\n    }\n\n    return notificationElement;\n  }\n\n  /**\n   * This method forces a state change.\n   */\n  private forceStateChange(): boolean {\n    try {\n      this.stateChangeTrigger = !this.stateChangeTrigger;\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * This method renders the component.\n   */\n  public render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={(element: HTMLDivElement) =>\n            (this.notificationContainerElement = element)\n          }\n          class=\"container\"\n        >\n          {this.renderNotifications()}\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * This method renders notifications.\n   */\n  private renderNotifications(): FunctionalComponent[] {\n    const notificationElements: FunctionalComponent[] = [];\n    for (const [notification, _timeout] of this.notifications) {\n      notificationElements.push(\n        <div\n          class={{\n            [\"notification-wrapper\"]: true,\n            closing: notification.closing,\n          }}\n          key={notification.key}\n          data-key={notification.key}\n          onMouseEnter={() => this.unsetAutoRemoveByReference(notification)}\n          onMouseLeave={() => this.initAutoRemove(notification)}\n        >\n          <div\n            class={{\n              notification: true,\n              [notification.type ?? \"info\"]: true,\n            }}\n          >\n            {this.renderCloseIcon(notification)}\n            {notification.title && <p class=\"title\">{notification.title}</p>}\n            {notification.message && (\n              <p class=\"message\">{notification.message}</p>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return notificationElements;\n  }\n\n  /**\n   * This method renders the close icon for a notification.\n   */\n  private renderCloseIcon(\n    notification: SystemNotificationInterface\n  ): FunctionalComponent {\n    if (notification.closable) {\n      return (\n        <div\n          class=\"close-icon\"\n          innerHTML={CloseIcon}\n          onClick={() => this.removeNotificationByReference(notification)}\n        ></div>\n      );\n    }\n\n    return <Fragment></Fragment>;\n  }\n}\n"],
  "mappings": "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",
  "names": ["CloseIcon"]
}
