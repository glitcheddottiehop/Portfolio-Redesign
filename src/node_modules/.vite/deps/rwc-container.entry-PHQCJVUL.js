import {
  Host,
  getElement,
  h,
  init_index_e9508d80,
  registerInstance
} from "./chunk-6OFGPT5F.js";
import {
  __esm
} from "./chunk-CF3WPAMV.js";

// node_modules/@rehaps/rehaps-web-components/dist/esm/rwc-container.entry.js
var containerCss, Container;
var init_rwc_container_entry = __esm({
  "node_modules/@rehaps/rehaps-web-components/dist/esm/rwc-container.entry.js"() {
    init_index_e9508d80();
    containerCss = '@font-face{font-family:"Inter";font-style:normal;font-weight:400;font-display:swap;src:url("assets/fonts/inter/Inter-Regular.woff2?v=1.0") format("woff2"), url("assets/fonts/inter/Inter-Regular.woff?v=1.0") format("woff")}@font-face{font-family:"Inter";font-style:normal;font-weight:500;font-display:swap;src:url("assets/fonts/inter/Inter-Medium.woff2?v=1.0") format("woff2"), url("assets/fonts/inter/Inter-Medium.woff?v=1.0") format("woff")}@font-face{font-family:"Inter";font-style:normal;font-weight:600;font-display:swap;src:url("assets/fonts/inter/Inter-SemiBold.woff2?v=1.0") format("woff2"), url("assets/fonts/inter/Inter-SemiBold.woff?v=1.0") format("woff")}:host{display:block;--_animation-duration:300ms}.animate-opacity{opacity:0}.wrapper{overflow:hidden;position:relative;transition:opacity var(--_animation-duration)}.wrapper.visible{opacity:1}.wrapper.visible .container{left:0;top:0}.container{position:relative;animation-duration:var(--_animation-duration)}.scroll-in-slide-left .container{left:-100%}.scroll-in-slide-right .container{left:100%}.scroll-in-slide-top .container{top:-100%}.scroll-in-slide-bottom .container{top:100%}.visible.scroll-in-slide-left .container{animation-name:slide-in-left}.visible.scroll-in-slide-right .container{animation-name:slide-in-right}.visible.scroll-in-slide-top .container{animation-name:slide-in-top}.visible.scroll-in-slide-bottom .container{animation-name:slide-in-bottom}.scroll-out-slide-left .container{animation-name:slide-out-left}.scroll-out-slide-right .container{animation-name:slide-out-right}.scroll-out-slide-top .container{animation-name:slide-out-top}.scroll-out-slide-bottom .container{animation-name:slide-out-bottom}@keyframes slide-in-left{0%{left:-100%;top:0}100%{left:0;top:0}}@keyframes slide-in-right{0%{left:100%;top:0}100%{left:0;top:0}}@keyframes slide-in-top{0%{top:-100%;left:0}100%{top:0;left:0}}@keyframes slide-in-bottom{0%{top:100%;left:0}100%{top:0;left:0}}@keyframes slide-out-left{0%{left:0;top:0}100%{left:-100%;top:0}}@keyframes slide-out-right{0%{left:0;top:0}100%{left:100%;top:0}}@keyframes slide-out-top{0%{top:0;left:0}100%{top:-100%;left:0}}@keyframes slide-out-bottom{0%{top:0;left:0}100%{bottom:100%;left:0}}';
    Container = class {
      constructor(hostRef) {
        registerInstance(this, hostRef);
        this.initialized = false;
        this.scrollIntoAnimation = void 0;
        this.scrollOutAnimation = void 0;
        this.animateOpacity = true;
        this.animationDuration = 300;
        this.visibilityThreshold = 0;
        this.isVisible = false;
      }
      onAnimationDurationChange(newValue) {
        this.setAnimationDuration(newValue);
      }
      componentWillLoad() {
        this.setAnimationDuration(this.animationDuration);
      }
      componentDidLoad() {
        this.initIntersectionObserver();
      }
      initIntersectionObserver() {
        this.intersectionObserver = new IntersectionObserver((entries) => this.handleIntersection(entries), { threshold: this.visibilityThreshold });
        this.intersectionObserver.observe(this.host);
      }
      handleIntersection(entries) {
        if (entries[0].isIntersecting) {
          this.isVisible = true;
          if (this.scrollOutAnimation === "none" || !this.scrollOutAnimation) {
            this.removeIntersectionObserver();
          }
        } else {
          this.isVisible = false;
          if (this.scrollIntoAnimation === "none" || !this.scrollIntoAnimation) {
            this.removeIntersectionObserver();
          }
        }
      }
      removeIntersectionObserver() {
        if (this.initialized && this.intersectionObserver || !this.hasScrollIntoAnimation && !this.hasScrollOutAnimation && this.isVisible) {
          this.intersectionObserver.disconnect();
          this.intersectionObserver = null;
        }
        this.initialized = true;
      }
      setAnimationDuration(duration) {
        this.host.style.setProperty("--_animation-duration", `${duration}ms`);
      }
      get hasScrollIntoAnimation() {
        return this.scrollIntoAnimation && this.scrollIntoAnimation !== "none";
      }
      get hasScrollOutAnimation() {
        return this.scrollOutAnimation && this.scrollOutAnimation !== "none";
      }
      render() {
        return h(Host, null, h("div", { class: {
          wrapper: true,
          visible: this.isVisible,
          "animate-opacity": this.animateOpacity,
          [`scroll-in-${this.scrollIntoAnimation}`]: true,
          [`scroll-out-${this.scrollOutAnimation}`]: true
        } }, h("div", { class: "container" }, h("slot", null))));
      }
      get host() {
        return getElement(this);
      }
      static get watchers() {
        return {
          "animationDuration": ["onAnimationDurationChange"]
        };
      }
    };
    Container.style = containerCss;
  }
});
init_rwc_container_entry();
export {
  Container as rwc_container
};
//# sourceMappingURL=rwc-container.entry-PHQCJVUL.js.map
