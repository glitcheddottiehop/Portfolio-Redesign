{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/components/basic/carousel/slides.scss?tag=rwc-slides&encapsulation=shadow", "../../@rehaps/rehaps-web-components/dist/esm/src/components/basic/carousel/slides.tsx"],
  "sourcesContent": ["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --slides-animation-duration: The duration of the slide change animations.\n   * @prop --slides-slide-fade-transition: The transition of the slide from active to default state.\n   * @prop --slides-slide-active-fade-transition: The transition of the slide from default to active state.\n   \n   * @prop display: The display mode of the host element.\n   */\n  --slides-animation-duration: 200ms;\n  \n  --slides-slide-fade-transition:\n    opacity var(--slides-animation-duration) ease-in-out,\n    visibility 0ms linear var(--slides-animation-duration),\n    position 0ms linear var(--slides-animation-duration),\n    left 0ms linear var(--slides-animation-duration);\n    \n  --slides-slide-active-fade-transition:\n    opacity var(--slides-animation-duration) ease-in-out var(--slides-animation-duration),\n    visibility 0ms linear var(--slides-animation-duration),\n    position 0ms linear var(--slides-animation-duration),\n    left 0ms linear var(--slides-animation-duration);\n\n  display: block;\n}\n\n.container {\n  width: 100%;\n  overflow-x: hidden;\n  position: relative;\n}\n\n.slide-flex {\n  display: flex;\n  flex-direction: row;\n}\n\n.slide-wrapper {\n  width: 100%;\n}\n\n::slotted(*) {\n  left: #{$off-screen};\n  opacity: 0;\n  position: absolute;\n  transition: var(--slides-slide-fade-transition);\n  visibility: hidden;\n}\n\n::slotted(.active) {\n  left: 0;\n  opacity: 1;\n  position: unset;\n  transition: var(--slides-slide-active-fade-transition);\n  visibility: visible;\n}\n", "import { Component, h, Element, State, Prop, Event, EventEmitter, Method, FunctionalComponent, Listen, Host, Watch } from '@stencil/core';\nimport { IPaginable } from '../../../interfaces/actions/IPaginable';\nimport { EventManager } from '../../../utils/actions/eventManager';\nimport { RWCActionHelper } from '../../../utils/actions/rwcActionHelper';\n\n@Component({\n  tag: 'rwc-slides',\n  styleUrl: 'slides.scss',\n  shadow: true\n})\nexport class RwcSlides implements IPaginable {\n  /**\n   * The class name used for the active slide element.\n   */\n  static ACTIVE_SLIDE_CLASS = 'active';\n\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcSlidesElement;\n\n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  public eventManager: EventManager = new EventManager();\n\n  /**\n   * List of the actions available for the Slides.\n   */\n  public actions: 'goTo'[] = ['goTo'];\n\n  /**\n   * The coroutine handling the slide animation.\n   */\n  private autoSlideCoroutine: NodeJS.Timer = null;\n\n  /**\n   * The reference to the element containing slides.\n   */\n  private slideContainer: HTMLSlotElement;\n\n  /**\n   * The reference to the slide elements.\n   */\n  private slides?: HTMLElement[];\n\n  /**\n   * Key used for initializing event listeners.\n   */\n  @Prop({ reflect: true }) rwcKey = RWCActionHelper.getDefaultComponentKey('slides');\n\n  /**\n   * The active slide on component load.\n   */\n  @Prop() defaultSlide: number = 0;\n\n  /**\n   * Enable auto slide change.\n   */\n  @Prop() autoSlide: boolean = false;\n\n  /**\n   * Auto slide change delay in milliseconds.\n   */\n  @Prop() autoSlideDelay: number = 5000;\n\n  /**\n   * Event fired when active slide has been changed.\n   */\n  @Event({ eventName: 'indexChange' }) changeEvent: EventEmitter<GoToEventDetail>;\n\n  /**\n   * Currently active tab.\n   */\n  @State() activeSlide: number = 0;\n  \n  @Watch('autoSlide')\n  onAutoSlideChange(): void {\n    this.init();\n  }\n\n  /**\n   * Pauses the auto slide if mouse is inside the content.\n   */\n  @Listen('mouseenter')\n  onMouseEnter(): void {\n    clearInterval(this.autoSlideCoroutine);\n  }\n\n  /**\n   * Resumes the auto slide if mouse is outside of the content.\n   */\n  @Listen('mouseleave')\n  onMouseLeave(): void {\n    if (this.autoSlide) {\n      this.initAutoSlide();\n    }\n  }\n  \n  /**\n   * Gets the currently active tab index in valid range.\n   */\n  private validateTargetIndex(value: number): number {\n    if (value > this.slides.length - 1 || value < 0) {\n      return 0;\n    }\n    \n    return value;\n  }\n\n  /**\n   * Initializes event listeners on render.\n   */\n  componentDidLoad(): void {\n    this.init();\n  }\n\n  /**\n   * Destroy component's event listeners before component is destroyed.\n   */\n  disconnectedCallback(): void {\n    clearInterval(this.autoSlideCoroutine);\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Initialize the component.\n   */\n  init(): void {\n    this.eventManager.clearEventListeners();\n    this.slides = this.slideContainer.assignedElements() as HTMLElement[];\n    this.initDefaultSlide();\n    this.initGoToEventListeners();\n    clearInterval(this.autoSlideCoroutine);\n    if (this.autoSlide) {\n      this.initAutoSlide();\n    }\n  }\n\n  /**\n   * Initialize default tab.\n   */\n  initDefaultSlide(): void {\n    this.activeSlide = this.validateTargetIndex(this.activeSlide);\n    if (this.slides?.length > 0) {\n      this.slides[this.activeSlide].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);\n    }\n  }\n\n  /**\n   * Initialize auto slide coroutine.\n   */\n  initAutoSlide(): void {\n    clearInterval(this.autoSlideCoroutine);\n    this.autoSlideCoroutine = setInterval(() => {\n      this.goTo(this.validateTargetIndex(this.activeSlide + 1));\n    }, this.autoSlideDelay);\n  }\n\n  /**\n   * Change active tab to provided index and start indicator animation.\n   */\n  @Method()\n  async goTo(targetIndex: number | CustomEvent): Promise<void> {\n    const parsedIndex: number = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);\n    \n    if (this.activeSlide !== parsedIndex) {\n      this.slides.forEach(slide => {\n        slide.classList.remove(RwcSlides.ACTIVE_SLIDE_CLASS);\n      });\n\n      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;\n      this.setActiveSlide(parsedIndex, originalEvent);\n    }\n  }\n\n  /**\n   * Set html and class properties for active slide and fire change event.\n   */\n  setActiveSlide(targetIndex: number, originalEvent?: CustomEvent): void {\n    this.slides[targetIndex].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);\n    this.changeEvent.emit(originalEvent?.detail ?? { origin: this.host, next: targetIndex, previous: this.activeSlide });\n    this.activeSlide = targetIndex;\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click.\n   */\n  initGoToEventListeners(): void {\n    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          class={ {\n            container: true\n          } }\n        >\n          <div class=\"slide-wrapper\">\n            <div class=\"slide-flex\">\n              <slot\n                ref={ (slot: HTMLSlotElement) => this.slideContainer = slot }\n                onSlotchange={ () => this.init() }\n              />\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;IAAM,WCUO;;;;;;ADVb,IAAM,YAAY;ICUL,YAAS,MAAA;;;;AAcb,aAAA,eAA6B,IAAI,aAAY;AAK7C,aAAA,UAAoB,CAAC,MAAM;AAK1B,aAAA,qBAAmC;sBAeT,gBAAgB,uBAAuB,QAAQ;4BAKlD;yBAKF;8BAKI;2BAUF;;MAG/B,oBAAiB;AACf,aAAK,KAAI;;MAOX,eAAY;AACV,sBAAc,KAAK,kBAAkB;;MAOvC,eAAY;AACV,YAAI,KAAK,WAAW;AAClB,eAAK,cAAa;;;MAOd,oBAAoB,OAAa;AACvC,YAAI,QAAQ,KAAK,OAAO,SAAS,KAAK,QAAQ,GAAG;AAC/C,iBAAO;;AAGT,eAAO;;MAMT,mBAAgB;AACd,aAAK,KAAI;;MAMX,uBAAoB;AAClB,sBAAc,KAAK,kBAAkB;AACrC,aAAK,aAAa,oBAAmB;;MAMvC,OAAI;AACF,aAAK,aAAa,oBAAmB;AACrC,aAAK,SAAS,KAAK,eAAe,iBAAgB;AAClD,aAAK,iBAAgB;AACrB,aAAK,uBAAsB;AAC3B,sBAAc,KAAK,kBAAkB;AACrC,YAAI,KAAK,WAAW;AAClB,eAAK,cAAa;;;MAOtB,mBAAgB;;AACd,aAAK,cAAc,KAAK,oBAAoB,KAAK,WAAW;AAC5D,cAAI,KAAA,KAAK,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,GAAG;AAC3B,eAAK,OAAO,KAAK,WAAW,EAAE,UAAU,IAAI,UAAU,kBAAkB;;;MAO5E,gBAAa;AACX,sBAAc,KAAK,kBAAkB;AACrC,aAAK,qBAAqB,YAAY,MAAA;AACpC,eAAK,KAAK,KAAK,oBAAoB,KAAK,cAAc,CAAC,CAAC;WACvD,KAAK,cAAc;;MAOxB,MAAM,KAAK,aAAiC;AAC1C,cAAM,cAAsB,KAAK,oBAAoB,uBAAuB,cAAc,OAAO,SAAS,YAAY,OAAO,IAAI,IAAI,WAAW;AAEhJ,YAAI,KAAK,gBAAgB,aAAa;AACpC,eAAK,OAAO,QAAQ,WAAK;AACvB,kBAAM,UAAU,OAAO,UAAU,kBAAkB;WACpD;AAED,gBAAM,gBAAgB,uBAAuB,cAAc,cAAc;AACzE,eAAK,eAAe,aAAa,aAAa;;;MAOlD,eAAe,aAAqB,eAA2B;;AAC7D,aAAK,OAAO,WAAW,EAAE,UAAU,IAAI,UAAU,kBAAkB;AACnE,aAAK,YAAY,MAAK,KAAA,kBAAa,QAAb,kBAAa,SAAA,SAAb,cAAe,YAAM,QAAA,OAAA,SAAA,KAAI,EAAE,QAAQ,KAAK,MAAM,MAAM,aAAa,UAAU,KAAK,YAAW,CAAE;AACnH,aAAK,cAAc;;MAMrB,yBAAsB;AACpB,wBAAgB,eAAe,MAAM,KAAK,MAAM,KAAK,SAAS,KAAK,QAAQ,aAAa;;MAM1F,SAAM;AACJ,eACE,EAAC,MAAI,MACH,EAAA,OAAA,EACE,OAAQ;UACN,WAAW;UACZ,GAED,EAAA,OAAA,EAAK,OAAM,gBAAe,GACxB,EAAA,OAAA,EAAK,OAAM,aAAY,GACrB,EAAA,QAAA,EACE,KAAM,CAAC,SAA0B,KAAK,iBAAiB,MACvD,cAAe,MAAM,KAAK,KAAI,EAAE,CAAA,CAChC,CACE,CACF,CACF;;;;;;;;;;;AArML,cAAA,qBAAqB;;;;",
  "names": []
}
