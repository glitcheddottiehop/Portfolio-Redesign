{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/utils/actions/eventManager.ts"],
  "sourcesContent": ["import { ISubscribedEvent } from '../../interfaces/actions/EventManager';\n\n/**\n * Helper class for managing event subscriptions.\n * Meant to prevent callbacks to removed components.\n */\nexport class EventManager {\n  /**\n   * List of events registered for the instance\n   */\n  private subscribedEvents: ISubscribedEvent[] = [];\n\n  /**\n   * Register a new event listener\n   */\n  public registerEventListener(element: Element, event: string, callback: (...args: any[] | any) => void) {\n    element.addEventListener(event, callback);\n    this.subscribedEvents.push({\n      element: element,\n      name: event,\n      callback: callback\n    });\n  }\n\n  /**\n   * Clear all event listeners from the instance\n   */\n  public clearEventListeners(): void {\n    this.subscribedEvents.forEach((event: ISubscribedEvent) => {\n        event.element.removeEventListener(event.name, event.callback);\n    });\n  }\n}\n"],
  "mappings": ";;;;;IAMa;;;IAAA,qBAAY;MAAzB,cAAA;AAIU,aAAA,mBAAuC,CAAA;;MAKxC,sBAAsB,SAAkB,OAAe,UAAwC;AACpG,gBAAQ,iBAAiB,OAAO,QAAQ;AACxC,aAAK,iBAAiB,KAAK;UACzB;UACA,MAAM;UACN;SACD;;MAMI,sBAAmB;AACxB,aAAK,iBAAiB,QAAQ,CAAC,UAAuB;AAClD,gBAAM,QAAQ,oBAAoB,MAAM,MAAM,MAAM,QAAQ;SAC/D;;;;;",
  "names": []
}
