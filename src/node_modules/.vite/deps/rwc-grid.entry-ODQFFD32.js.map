{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/utils/data/json.ts", "../../@rehaps/rehaps-web-components/dist/esm/src/components/layout/grid/grid.scss?tag=rwc-grid&encapsulation=shadow", "../../@rehaps/rehaps-web-components/dist/esm/src/components/layout/grid/grid.tsx"],
  "sourcesContent": ["/**\n * Converts the JSON string representation to JSON Object.\\\n * Allows usage of single quotes.\n */\nexport function parseJSON(json: string): Object | Array<any> {\n  let result = json.replace(/\\'/g, '\"');\n  result = result.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n  result = result.replace(/( {2})+/g, ' ');\n  return JSON.parse(result);\n}\n", "@import 'global.scss';\n\n:host {\n  /**\n     * @prop --grid-column-gap: The gap between the columns of the grid.\n     * @prop --grid-row-gap: The gap between the the rows of the grid.\n     */\n  --grid-column-gap: #{$rwc-spacing--md};\n  --grid-row-gap: #{$rwc-spacing--md};\n\n  display: block;\n}\n\n.container {\n  display: grid;\n  column-gap: var(--grid-column-gap);\n  row-gap: var(--grid-row-gap);\n\n  @for $columns from 1 to 13 {\n    &.columns-#{$columns} {\n      grid-template-columns: repeat($columns, auto);\n\n      &.auto {\n        grid-template-columns: repeat($columns, 1fr);\n\n        &.center {\n          $totalColumns: $columns * 2;\n          grid-template-columns: repeat($totalColumns, 1fr);\n\n          &> ::slotted(*) {\n            grid-column-end: span 2;\n          }\n\n          @for $orphan from 1 to $columns {\n            &> ::slotted(*:nth-last-child(#{$orphan}):nth-child(#{$columns}n + 1)) {\n              grid-column-start: #{$columns + 1 - $orphan};\n            }\n          }\n        }\n\n        &.right {\n          @for $orphan from 1 to $columns {\n            &> ::slotted(*:nth-last-child(#{$orphan}):nth-child(#{$columns}n + 1)) {\n              grid-column-start: #{$columns - $orphan + 1};\n            }\n          }\n        }\n\n        &> ::slotted(*) {\n          grid-column-end: span 1;\n        }\n      }\n    }\n  }\n}\n", "import { Component, Prop, h, Watch, FunctionalComponent, Element, Host, Listen, State } from '@stencil/core';\nimport { GridColumnCountsWithBreakpoint, GridAlignment, GridColumnCount, GridLayoutMode } from '../../../interfaces/components/layout/columns/grid';\nimport { parseJSON } from '../../../utils/data/json';\nimport { DocumentUtils } from '../../../utils/document/document-utils';\n\n@Component({\n  tag: 'rwc-grid',\n  styleUrl: 'grid.scss',\n  shadow: true\n})\nexport class RwcGrid {\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcGridElement;\n\n  /**\n   * Number of columns.\n   */\n  @Prop({ reflect: true }) columns: GridColumnCount = 2;\n\n  /**\n   * Content layout mode.\n   */\n  @Prop({ reflect: true }) mode: GridLayoutMode = 'auto';\n\n  /**\n   * column positioning of last row.\n   */\n  @Prop({ reflect: true }) alignment: GridAlignment = 'center';\n\n  /**\n   * If enabled, breakpoints will be based on host size instead of window inner width.\n   */\n  @Prop() breakOnHostWidth: boolean = false;\n\n  /**\n   * The current column count.\n   */\n  @State() columnCount: number = 2;\n\n  //#region Validation\n\n  /**\n   * Updates the current column count on columns property change.\n   */\n  @Watch('columns')\n  validateColumnCount(): void {\n    this.updateColumnCount();\n  }\n\n  //#endregion\n\n  /**\n   * Handles the resize event of the window.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    this.updateColumnCount();\n  }\n\n  /**\n   * Handles the StencilJS lifecycle event called before the first load of the component.\n   */\n  componentWillLoad(): void {\n    this.updateColumnCount();\n  }\n\n  /**\n   * Updates the current column count based on breakpoints configuration.\n   */\n  private updateColumnCount(): void {\n    const columnCount = this.columns;\n    if (this.columns.toString().match(/\\d+/)[0] === columnCount.toString()) {\n      this.columnCount = Number(columnCount);\n    } else {\n      let columnConfig = this.columns as string | GridColumnCountsWithBreakpoint;\n\n      if (typeof columnConfig === 'string') {\n        columnConfig = parseJSON(columnConfig) as GridColumnCountsWithBreakpoint;\n      }\n\n      let highestValidBreakpoint: string;\n      let highestValidBreakpointInPixels = 0;\n\n      let containerWidth = this.breakOnHostWidth ? this.host.offsetWidth : window.innerWidth;\n\n      if (typeof containerWidth === 'undefined') {\n        containerWidth = window.innerWidth;\n      }\n\n      for (const screenSize of Object.keys(columnConfig)) {\n        const screenSizeInPixels = DocumentUtils.convertToPixels(screenSize);\n        if (screenSizeInPixels >= highestValidBreakpointInPixels && containerWidth >= screenSizeInPixels) {\n          highestValidBreakpoint = screenSize;\n          highestValidBreakpointInPixels = screenSizeInPixels;\n        }\n      }\n\n      this.columnCount = columnConfig[highestValidBreakpoint];\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          class={ {\n            container: true,\n            [`columns-${ this.columnCount }`]: true,\n            [this.alignment]: true,\n            [this.mode]: true\n          } }\n        >\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;SAIgB,UAAU,MAAY;AACpC,MAAI,SAAS,KAAK,QAAQ,OAAO,GAAG;AACpC,WAAS,OAAO,QAAQ,kBAAkB,EAAE;AAC5C,WAAS,OAAO,QAAQ,YAAY,GAAG;AACvC,SAAO,KAAK,MAAM,MAAM;AAC1B;ICTM,SCUO;;;;;ADVb,IAAM,UAAU;ICUH,UAAO,MAAA;;;uBASkC;oBAKJ;yBAKI;gCAKhB;2BAKL;;MAQ/B,sBAAmB;AACjB,aAAK,kBAAiB;;MASxB,iBAAc;AACZ,aAAK,kBAAiB;;MAMxB,oBAAiB;AACf,aAAK,kBAAiB;;MAMhB,oBAAiB;AACvB,cAAM,cAAc,KAAK;AACzB,YAAI,KAAK,QAAQ,SAAQ,EAAG,MAAM,KAAK,EAAE,CAAC,MAAM,YAAY,SAAQ,GAAI;AACtE,eAAK,cAAc,OAAO,WAAW;eAChC;AACL,cAAI,eAAe,KAAK;AAExB,cAAI,OAAO,iBAAiB,UAAU;AACpC,2BAAe,UAAU,YAAY;;AAGvC,cAAI;AACJ,cAAI,iCAAiC;AAErC,cAAI,iBAAiB,KAAK,mBAAmB,KAAK,KAAK,cAAc,OAAO;AAE5E,cAAI,OAAO,mBAAmB,aAAa;AACzC,6BAAiB,OAAO;;AAG1B,qBAAW,cAAc,OAAO,KAAK,YAAY,GAAG;AAClD,kBAAM,qBAAqB,cAAc,gBAAgB,UAAU;AACnE,gBAAI,sBAAsB,kCAAkC,kBAAkB,oBAAoB;AAChG,uCAAyB;AACzB,+CAAiC;;;AAIrC,eAAK,cAAc,aAAa,sBAAsB;;;MAO1D,SAAM;AACJ,eACE,EAAC,MAAI,MACH,EAAA,OAAA,EACE,OAAQ;UACN,WAAW;UACX,CAAC,WAAY,KAAK,WAAY,EAAE,GAAG;UACnC,CAAC,KAAK,SAAS,GAAG;UAClB,CAAC,KAAK,IAAI,GAAG;UACd,GAED,EAAA,QAAA,IAAA,CAAa,CACT;;;;;;;;;;;;;;",
  "names": []
}
