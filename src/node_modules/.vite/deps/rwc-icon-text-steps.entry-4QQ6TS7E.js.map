{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/components/steps/icon-text-steps/icon-text-steps.scss?tag=rwc-icon-text-steps&encapsulation=shadow", "../../@rehaps/rehaps-web-components/dist/esm/src/components/steps/icon-text-steps/icon-text-steps.tsx"],
  "sourcesContent": ["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --icon-text-steps-grid-column-gap: The gap between the columns of the grid.\n   * @prop --icon-text-steps-grid-columns-row-gap: The gap between the rows of the grid.\n   *\n   * @prop --icon-text-steps-card-width: The width of the step card.\n   *\n   * display: The display mode of the host element.\n   */\n  --icon-text-steps-grid-column-gap: #{$rwc-spacing--lg};\n  --icon-text-steps-grid-columns-row-gap: #{$rwc-spacing--lg};\n\n  --icon-text-steps-card-width: 10.75rem;\n\n  display: block;\n}\n\n.container {\n  position: relative;\n}\n\n.grid {\n  --grid-column-gap: var(--icon-text-steps-grid-column-gap);\n  --grid-row-gap: var(--icon-text-steps-grid-columns-row-gap);\n}\n\n::slotted(*) {\n  width: var(--icon-text-steps-card-width);\n  margin-left: auto;\n  margin-right: auto;\n}\n", "import { Component, Element, FunctionalComponent, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { GridColumnCount } from '../../../interfaces/components/layout/columns/grid';\nimport { DocumentUtils } from '../../../utils/document/document-utils';\n\n@Component({\n  tag: 'rwc-icon-text-steps',\n  styleUrl: './icon-text-steps.scss',\n  shadow: true\n})\nexport class RwcIconTextSteps {\n  /**\n   * The class used for vertical layout of the component.\n   */\n  static VERTICAL_LAYOUT_CLASS: string = 'vertical';\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcIconTextStepsElement;\n\n  /**\n   * Number of columns.\n   */\n  @Prop() columns: GridColumnCount = 4;\n\n  /**\n   * Updates the layout automatically if the minimum content width is smaller than the host element.\n   */\n  @Prop() autoUpdateLayout: boolean = true;\n\n  /**\n   * The column count determined by the auto layout.\n   */\n  @State() autoColumnCount: number = 4;\n\n  /**\n   * Parses the data on window resize.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    this.updateLayout();\n  }\n\n  /**\n   * Updates the layout on completing the first load of the component.\n   */\n  componentDidLoad(): void {\n    this.updateLayout();\n  }\n\n  /**\n   * Updates the column count based on the minimum step width and column gap.\n   */\n  private updateLayout(): void {\n    if (this.autoUpdateLayout) {\n      const stepCount = this.host.children.length;\n\n      if (stepCount > 0) {\n        const minCardWidth = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-card-width'));\n        const gridGapSize = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-grid-column-gap'));\n        const minHostSize = stepCount * minCardWidth + (stepCount - 1) * gridGapSize;\n\n        let hostWidth = this.host.offsetWidth\n        if (typeof hostWidth === 'undefined') {\n          hostWidth = window.innerWidth;\n        }\n\n        if (hostWidth >= minHostSize) {\n          this.autoColumnCount = stepCount;\n          this.host.classList.remove(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);\n        } else {\n          this.autoColumnCount = 1;\n          this.host.classList.add(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);\n        }\n      } else {\n        this.autoColumnCount = 4;\n      }\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div class=\"container\">\n          <rwc-grid\n            class=\"grid\"\n            columns={ this.autoUpdateLayout ? this.autoColumnCount : this.columns }\n          >\n            <slot />\n          </rwc-grid>\n        </div>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;IAAM,kBCSO;;;;;ADTb,IAAM,mBAAmB;ICSZ,mBAAgB,MAAA;;;uBAcQ;gCAKC;+BAKD;;MAMnC,iBAAc;AACZ,aAAK,aAAY;;MAMnB,mBAAgB;AACd,aAAK,aAAY;;MAMX,eAAY;AAClB,YAAI,KAAK,kBAAkB;AACzB,gBAAM,YAAY,KAAK,KAAK,SAAS;AAErC,cAAI,YAAY,GAAG;AACjB,kBAAM,eAAe,cAAc,gBAAgB,iBAAiB,KAAK,IAAI,EAAE,iBAAiB,8BAA8B,CAAC;AAC/H,kBAAM,cAAc,cAAc,gBAAgB,iBAAiB,KAAK,IAAI,EAAE,iBAAiB,mCAAmC,CAAC;AACnI,kBAAM,cAAc,YAAY,gBAAgB,YAAY,KAAK;AAEjE,gBAAI,YAAY,KAAK,KAAK;AAC1B,gBAAI,OAAO,cAAc,aAAa;AACpC,0BAAY,OAAO;;AAGrB,gBAAI,aAAa,aAAa;AAC5B,mBAAK,kBAAkB;AACvB,mBAAK,KAAK,UAAU,OAAO,iBAAiB,qBAAqB;mBAC5D;AACL,mBAAK,kBAAkB;AACvB,mBAAK,KAAK,UAAU,IAAI,iBAAiB,qBAAqB;;iBAE3D;AACL,iBAAK,kBAAkB;;;;MAQ7B,SAAM;AACJ,eACE,EAAC,MAAI,MACH,EAAA,OAAA,EAAK,OAAM,YAAW,GACpB,EAAA,YAAA,EACE,OAAM,QACN,SAAU,KAAK,mBAAmB,KAAK,kBAAkB,KAAK,QAAO,GAErE,EAAA,QAAA,IAAA,CAAQ,CACC,CACP;;;;;;AAhFL,qBAAA,wBAAgC;;;;",
  "names": []
}
