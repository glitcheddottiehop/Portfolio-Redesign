{
  "version": 3,
  "sources": ["../../@rehaps/rehaps-web-components/dist/esm/src/utils/actions/rwcActionHelper.ts"],
  "sourcesContent": ["import { ISubscribable } from \"../../interfaces/actions/ISubscribable\";\n\nexport class RWCActionHelper {\n  /**\n   * The prefix used for automatic action binding on HTML elements.\n   */\n  static RWC_ACTION_PREFIX = 'rwc';\n\n  /**\n   * Stores the index of the last initialized component with the auto action binding.\n   */\n  static lastComponentId: number = 1;\n\n  /**\n   * Gets the last initialized component with auto action binding.\n   */\n  static getLastComponentId(): number {\n    return RWCActionHelper.lastComponentId++;\n  }\n  \n  /**\n   * Gets the default key for the component using passed name and the next available component index.\n   */\n  static getDefaultComponentKey(name: string): string {\n    return `${RWCActionHelper.RWC_ACTION_PREFIX}-${name}-${RWCActionHelper.getLastComponentId()}`;\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click.\n   */\n  static bindRWCActions(component: ISubscribable, host: HTMLElement, actions: Array<string>, rwcKey: string, eventName: string = 'click'): void {\n    if (actions.length > 0) {\n      const querySelector = actions.map(action => `[data-${ RWCActionHelper.RWC_ACTION_PREFIX }-${ action }='${ rwcKey }']`).join(', ');\n      document.querySelectorAll(querySelector).forEach(element => {\n        actions.forEach(action => {\n          if (element.getAttribute(`data-${ RWCActionHelper.RWC_ACTION_PREFIX }-${ action }`)) {\n            const callback = this.createCallback(component, host, action);\n            component.eventManager.registerEventListener(element, eventName, callback);\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Creates a callback method for the passed action of the passed component.\n   */\n  static createCallback(component: ISubscribable, host: HTMLElement, action: string): (event: Event | CustomEvent) => void {\n    return (event: Event | CustomEvent) => {\n      if ((event as CustomEvent).detail?.origin === host) {\n        return;\n      }\n      component[action].call(component, event);\n    }\n  }\n}\n"],
  "mappings": ";;;;;IAEa;;;IAAA,wBAAA,iBAAe;MAc1B,OAAO,qBAAkB;AACvB,eAAO,iBAAgB;;MAMzB,OAAO,uBAAuB,MAAY;AACxC,eAAO,GAAG,iBAAgB,iBAAiB,IAAI,IAAI,IAAI,iBAAgB,mBAAkB,CAAE;;MAM7F,OAAO,eAAe,WAA0B,MAAmB,SAAwB,QAAgB,YAAoB,SAAO;AACpI,YAAI,QAAQ,SAAS,GAAG;AACtB,gBAAM,gBAAgB,QAAQ,IAAI,YAAU,SAAU,iBAAgB,iBAAkB,IAAK,MAAO,KAAM,MAAO,IAAI,EAAE,KAAK,IAAI;AAChI,mBAAS,iBAAiB,aAAa,EAAE,QAAQ,aAAO;AACtD,oBAAQ,QAAQ,YAAM;AACpB,kBAAI,QAAQ,aAAa,QAAS,iBAAgB,iBAAkB,IAAK,MAAO,EAAE,GAAG;AACnF,sBAAM,WAAW,KAAK,eAAe,WAAW,MAAM,MAAM;AAC5D,0BAAU,aAAa,sBAAsB,SAAS,WAAW,QAAQ;;aAE5E;WACF;;;MAOL,OAAO,eAAe,WAA0B,MAAmB,QAAc;AAC/E,eAAO,CAAC,UAA0B;;AAChC,gBAAI,KAAC,MAAsB,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,YAAW,MAAM;AAClD;;AAEF,oBAAU,MAAM,EAAE,KAAK,WAAW,KAAK;;;;AA9CpC,oBAAA,oBAAoB;AAKpB,oBAAA,kBAA0B;;;",
  "names": []
}
