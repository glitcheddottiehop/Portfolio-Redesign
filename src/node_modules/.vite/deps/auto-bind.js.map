{
  "version": 3,
  "sources": ["../../auto-bind/index.js"],
  "sourcesContent": ["// Gets all non-builtin properties up the prototype chain.\nconst getAllProperties = object => {\n\tconst properties = new Set();\n\n\tdo {\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tproperties.add([object, key]);\n\t\t}\n\t} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n\treturn properties;\n};\n\nexport default function autoBind(self, {include, exclude} = {}) {\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n\t\tif (include) {\n\t\t\treturn include.some(match); // eslint-disable-line unicorn/no-array-callback-reference\n\t\t}\n\n\t\tif (exclude) {\n\t\t\treturn !exclude.some(match); // eslint-disable-line unicorn/no-array-callback-reference\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tfor (const [object, key] of getAllProperties(self.constructor.prototype)) {\n\t\tif (key === 'constructor' || !filter(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\t\tif (descriptor && typeof descriptor.value === 'function') {\n\t\t\tself[key] = self[key].bind(self);\n\t\t}\n\t}\n\n\treturn self;\n}\n"],
  "mappings": ";;;AACA,IAAM,mBAAmB,YAAU;AAClC,QAAM,aAAa,oBAAI,IAAI;AAE3B,KAAG;AACF,eAAW,OAAO,QAAQ,QAAQ,MAAM,GAAG;AAC1C,iBAAW,IAAI,CAAC,QAAQ,GAAG,CAAC;AAAA,IAC7B;AAAA,EACD,UAAU,SAAS,QAAQ,eAAe,MAAM,MAAM,WAAW,OAAO;AAExE,SAAO;AACR;AAEe,SAAR,SAA0B,MAAM,EAAC,SAAS,QAAO,IAAI,CAAC,GAAG;AAC/D,QAAM,SAAS,SAAO;AACrB,UAAM,QAAQ,aAAW,OAAO,YAAY,WAAW,QAAQ,UAAU,QAAQ,KAAK,GAAG;AAEzF,QAAI,SAAS;AACZ,aAAO,QAAQ,KAAK,KAAK;AAAA,IAC1B;AAEA,QAAI,SAAS;AACZ,aAAO,CAAC,QAAQ,KAAK,KAAK;AAAA,IAC3B;AAEA,WAAO;AAAA,EACR;AAEA,aAAW,CAAC,QAAQ,GAAG,KAAK,iBAAiB,KAAK,YAAY,SAAS,GAAG;AACzE,QAAI,QAAQ,iBAAiB,CAAC,OAAO,GAAG,GAAG;AAC1C;AAAA,IACD;AAEA,UAAM,aAAa,QAAQ,yBAAyB,QAAQ,GAAG;AAC/D,QAAI,cAAc,OAAO,WAAW,UAAU,YAAY;AACzD,WAAK,GAAG,IAAI,KAAK,GAAG,EAAE,KAAK,IAAI;AAAA,IAChC;AAAA,EACD;AAEA,SAAO;AACR;",
  "names": []
}
