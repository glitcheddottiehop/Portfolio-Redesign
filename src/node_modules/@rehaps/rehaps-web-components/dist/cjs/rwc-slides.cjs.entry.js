'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4ca922a8.js');
const eventManager = require('./eventManager-7f144b07.js');
const rwcActionHelper = require('./rwcActionHelper-2ba61c7e.js');

const slidesCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--slides-animation-duration:200ms;--slides-slide-fade-transition:opacity var(--slides-animation-duration) ease-in-out,\n    visibility 0ms linear var(--slides-animation-duration),\n    position 0ms linear var(--slides-animation-duration),\n    left 0ms linear var(--slides-animation-duration);--slides-slide-active-fade-transition:opacity var(--slides-animation-duration) ease-in-out var(--slides-animation-duration),\n    visibility 0ms linear var(--slides-animation-duration),\n    position 0ms linear var(--slides-animation-duration),\n    left 0ms linear var(--slides-animation-duration);display:block}.container{width:100%;overflow-x:hidden;position:relative}.slide-flex{display:flex;flex-direction:row}.slide-wrapper{width:100%}::slotted(*){left:-99999px;opacity:0;position:absolute;transition:var(--slides-slide-fade-transition);visibility:hidden}::slotted(.active){left:0;opacity:1;position:unset;transition:var(--slides-slide-active-fade-transition);visibility:visible}";

const RwcSlides = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeEvent = index.createEvent(this, "indexChange", 7);
    this.eventManager = new eventManager.EventManager();
    this.actions = ['goTo'];
    this.autoSlideCoroutine = null;
    this.rwcKey = rwcActionHelper.RWCActionHelper.getDefaultComponentKey('slides');
    this.defaultSlide = 0;
    this.autoSlide = false;
    this.autoSlideDelay = 5000;
    this.activeSlide = 0;
  }
  onAutoSlideChange() {
    this.init();
  }
  onMouseEnter() {
    clearInterval(this.autoSlideCoroutine);
  }
  onMouseLeave() {
    if (this.autoSlide) {
      this.initAutoSlide();
    }
  }
  validateTargetIndex(value) {
    if (value > this.slides.length - 1 || value < 0) {
      return 0;
    }
    return value;
  }
  componentDidLoad() {
    this.init();
  }
  disconnectedCallback() {
    clearInterval(this.autoSlideCoroutine);
    this.eventManager.clearEventListeners();
  }
  init() {
    this.eventManager.clearEventListeners();
    this.slides = this.slideContainer.assignedElements();
    this.initDefaultSlide();
    this.initGoToEventListeners();
    clearInterval(this.autoSlideCoroutine);
    if (this.autoSlide) {
      this.initAutoSlide();
    }
  }
  initDefaultSlide() {
    var _a;
    this.activeSlide = this.validateTargetIndex(this.activeSlide);
    if (((_a = this.slides) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      this.slides[this.activeSlide].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);
    }
  }
  initAutoSlide() {
    clearInterval(this.autoSlideCoroutine);
    this.autoSlideCoroutine = setInterval(() => {
      this.goTo(this.validateTargetIndex(this.activeSlide + 1));
    }, this.autoSlideDelay);
  }
  async goTo(targetIndex) {
    const parsedIndex = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);
    if (this.activeSlide !== parsedIndex) {
      this.slides.forEach(slide => {
        slide.classList.remove(RwcSlides.ACTIVE_SLIDE_CLASS);
      });
      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;
      this.setActiveSlide(parsedIndex, originalEvent);
    }
  }
  setActiveSlide(targetIndex, originalEvent) {
    var _a;
    this.slides[targetIndex].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);
    this.changeEvent.emit((_a = originalEvent === null || originalEvent === void 0 ? void 0 : originalEvent.detail) !== null && _a !== void 0 ? _a : { origin: this.host, next: targetIndex, previous: this.activeSlide });
    this.activeSlide = targetIndex;
  }
  initGoToEventListeners() {
    rwcActionHelper.RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: {
        container: true
      } }, index.h("div", { class: "slide-wrapper" }, index.h("div", { class: "slide-flex" }, index.h("slot", { ref: (slot) => this.slideContainer = slot, onSlotchange: () => this.init() }))))));
  }
  get host() { return index.getElement(this); }
  static get watchers() { return {
    "autoSlide": ["onAutoSlideChange"]
  }; }
};
RwcSlides.ACTIVE_SLIDE_CLASS = 'active';
RwcSlides.style = slidesCss;

exports.rwc_slides = RwcSlides;

//# sourceMappingURL=rwc-slides.cjs.entry.js.map