'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4ca922a8.js');
const eventManager = require('./eventManager-7f144b07.js');
const rwcActionHelper = require('./rwcActionHelper-2ba61c7e.js');

const sidebarCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--sidebar-inner-padding:1rem 0.5rem;--sidebar-container-box-shadow:0 25px 50px -12px rgba(0, 0, 0, 0.25);--sidebar-container-border-color:rgb(224, 224, 224);--sidebar-container-border:1px solid var(--sidebar-container-border-color);--sidebar-container-background-color:#fff;--sidebar-container-width:auto;--sidebar-container-max-width:20rem;--sidebar-container-transition:box-shadow 400ms ease-in-out;display:block;top:0;height:100%;max-width:var(--sidebar-container-max-width);position:fixed;transition:left 400ms ease-in-out, right 400ms ease-in-out;z-index:10}.container{height:100%;overflow-x:hidden;overflow-y:auto;background-color:var(--sidebar-container-background-color);box-shadow:0 0 0 0px rgba(0, 0, 0, 0);box-sizing:border-box;min-height:unset;width:var(--sidebar-container-width);padding:var(--sidebar-inner-padding);transition:var(--sidebar-container-transition)}.container.inner-scroll{height:100%;min-height:unset}.container.open{box-shadow:var(--sidebar-container-box-shadow)}.container.left{border-right:var(--sidebar-container-border)}.container.right{border-left:var(--sidebar-container-border)}";

const RwcSidebar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.openEvent = index.createEvent(this, "sidebarOpen", 7);
    this.closeEvent = index.createEvent(this, "sidebarClose", 7);
    this.eventManager = new eventManager.EventManager();
    this.actions = ['open', 'close', 'toggle'];
    this.isOpen = false;
    this.defaultState = 'closed';
    this.rwcKey = rwcActionHelper.RWCActionHelper.getDefaultComponentKey('sidebar');
    this.position = 'left';
    this.innerScroll = true;
  }
  onWindowResize() {
    this.updateHostOffset();
  }
  componentWillLoad() {
    this.isOpen = this.defaultState === 'open';
  }
  componentDidLoad() {
    this.init();
  }
  disconnectedCallback() {
    this.eventManager.clearEventListeners();
  }
  async init() {
    this.eventManager.clearEventListeners();
    this.addToggleEventListeners();
    this.updateHostOffset();
  }
  async toggle() {
    if (this.isOpen) {
      this.close();
    }
    else {
      this.open();
    }
  }
  async open() {
    this.isOpen = true;
    this.updateHostOffset();
    this.openEvent.emit();
  }
  async close() {
    this.isOpen = false;
    this.updateHostOffset();
    this.closeEvent.emit();
  }
  updateHostOffset() {
    if (this.isOpen) {
      if (this.position === 'left') {
        this.host.style.right = '';
        this.host.style.left = '0';
      }
      if (this.position === 'right') {
        this.host.style.right = '0';
        this.host.style.left = '';
      }
    }
    else {
      let hostWidth = this.host.offsetWidth;
      if (typeof hostWidth === 'undefined') {
        hostWidth = window.innerWidth;
      }
      if (this.position === 'left') {
        this.host.style.right = '';
        this.host.style.left = `-${hostWidth}px`;
      }
      if (this.position === 'right') {
        this.host.style.right = `-${hostWidth}px`;
        this.host.style.left = '';
      }
    }
  }
  addToggleEventListeners() {
    rwcActionHelper.RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey);
  }
  render() {
    return (index.h(index.Host, { class: {
        open: this.isOpen,
        [this.position]: true,
      } }, index.h("div", { class: {
        container: true,
        open: this.isOpen,
        [this.position]: true,
        'inner-scroll': this.innerScroll
      } }, index.h("slot", null))));
  }
  get host() { return index.getElement(this); }
};
RwcSidebar.style = sidebarCss;

exports.rwc_sidebar = RwcSidebar;

//# sourceMappingURL=rwc-sidebar.cjs.entry.js.map