{"file":"rwc-accordion.rwc-navigation.entry.cjs.js","mappings":"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","names":["h","Host","Fragment","ExpandMore"],"sources":["src/components/basic/accordion/accordion.scss?tag=rwc-accordion&encapsulation=shadow","src/components/basic/accordion/accordion.tsx","src/components/navigation/navigation.scss?tag=rwc-navigation&encapsulation=shadow","src/components/navigation/navigation.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --accordion-default-font-family: The default font family.\n   * @prop --accordion-heading-padding: The padding of the heading.\n   * @prop --accordion-heading-font-family: The font family of the heading.\n   * @prop --accordion-heading-font-size: The font size of the heading.\n   * @prop --accordion-heading-font-weight: The font weight of the heading.\n   * @prop --accordion-content-line-height: The line height of the heading.\n   * @prop --accordion-content-padding: The padding of the content.\n   * @prop --accordion-content-font-family: The font family of the content.\n   * @prop --accordion-content-font-size: The font size of the content.\n   * @prop --accordion-content-line-height: The line height of the content.\n   * @prop --accordion-content-font-weight: The font weight of the content.\n   * @prop --accordion-divider-background-color: The background color of divider.\n   * @prop --accordion-divider-height: The height of the divider.\n   * @prop --accordion-icon-color: The color of the heading icon.\n   * @prop --accordion-icon-open-transform: The transform of the icon on open state.\n   * @prop --accordion-animation-duration: The duration of the transition of the state change of the accordion.\n   *\n   * @prop display: The display mode of the host element.\n   */\n  --accordion-default-font-family: #{$rwc-font-family-default};\n  \n  --accordion-heading-padding: #{$rwc-spacing--xs} 0;\n  --accordion-heading-font-family: var(--accordion-default-font-family);\n  --accordion-heading-font-size: #{$rwc-font-size-heading-sm};\n  --accordion-heading-font-weight: 500;\n  --accordion-content-line-height: #{$rwc-line-height-xs};\n  \n  --accordion-content-padding: #{$rwc-spacing--xs} 0 #{$rwc-spacing--md} 0;\n  --accordion-content-font-family: var(--accordion-default-font-family);\n  --accordion-content-font-size: #{$rwc-font-size-body-md};\n  --accordion-content-font-weight: 400;\n  --accordion-content-line-height: #{$rwc-line-height-xs};\n  \n  --accordion-divider-background-color: #{$rwc-color-divider-neutral};\n  --accordion-divider-height: 1px;\n  \n  --accordion-icon-color: #{$rwc-color-grey-400};\n  --accordion-icon-open-transform: rotate(-180deg);\n  \n  --accordion-animation-duration: 200ms;\n  \n  display: block;\n}\n\n.heading {\n  cursor: pointer;\n  user-select: none;\n  font-family: var(--accordion-heading-font-family);\n  font-size: var(--accordion-heading-font-size);\n  font-weight: var(--accordion-heading-font-weight);\n  line-height: var(--accordion-content-line-height);\n  padding: var(--accordion-heading-padding);\n  \n  &.with-icon {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n}\n\n.left,\n.right {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.left {\n  flex-grow: 1;\n}\n\n.right {\n  flex-shrink: 0;\n}\n\n.icon {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  fill: var(--accordion-icon-color);\n  transition: transform var(--accordion-animation-duration) ease-in-out;\n}\n\n.content-wrapper {\n  height: 0;\n  overflow: hidden;\n  transition: height var(--accordion-animation-duration) ease-in-out;\n}\n\n.content {\n  font-family: var(--accordion-default-font-family);\n  font-size: var(--accordion-content-font-size);\n  font-weight: var(--accordion-content-font-weight);\n  padding: var(--accordion-content-padding);\n}\n\n.divider {\n  background-color: var(--accordion-divider-background-color);\n  height: var(--accordion-divider-height);\n}\n\n.open {\n  .content-wrapper {\n    height: auto;\n  }\n  \n  .icon {\n    &.rotate {\n      transform: var(--accordion-icon-open-transform);\n    }\n  }\n}\n","import { Component, Element, Fragment, FunctionalComponent, h, Host, Method, Prop } from '@stencil/core';\nimport ExpandMore from '@material-design-icons/svg/round/expand_more.svg';\n\n@Component({\n  tag: 'rwc-accordion',\n  styleUrl: './accordion.scss',\n  shadow: true\n})\nexport class RwcAccordion {\n  /**\n   * The timeout callback for the end of the animation.\n   */\n  private animationCallback: NodeJS.Timer;\n\n  /**\n   * Reference to the content wrapper element.\n   */\n  private contentWrapperElement: HTMLElement;\n\n  /**\n   * Reference to the content element.\n   */\n  private contentElement: HTMLElement;\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcAccordionElement;\n\n  /**\n   * The open state of the accordion.\n   */\n  @Prop({ reflect: true, mutable: true }) open: boolean = false;\n\n  /**\n   * Enables rendering of the divider.\n   */\n  @Prop() renderDivider: boolean = true;\n\n  /**\n   * Enables rendering of the heading icon.\n   */\n  @Prop() renderIcon: boolean = true;\n  \n  /**\n   * The duration of the animation from the style of the host element.\n   */\n  private get animationDuration(): number {\n    return Number.parseInt(getComputedStyle(this.host).getPropertyValue('--accordion-animation-duration'));\n  }\n\n  /**\n   * The heading element click event handler.\n   */\n  private onHeadingClick(): void {\n    this.setState(!this.open);\n  }\n\n  /**\n   * Sets the open state of the accordion to the passed value\n   */\n  @Method()\n  public async setState(value: boolean): Promise<void> {\n    if (this.animationCallback !== null) {\n      clearTimeout(this.animationCallback);\n    }\n    \n    this.open = value;\n    \n    if (value) {\n      this.contentWrapperElement.style.height = `${ this.contentElement.offsetHeight }px`;\n    } else {\n      this.contentWrapperElement.style.height = `${ this.contentElement.offsetHeight }px`;\n      await new Promise(requestAnimationFrame);\n      this.contentWrapperElement.style.height = `0px`;\n    }\n    \n    this.animationCallback = setTimeout(() => {\n      this.contentWrapperElement.style.height = '';\n      this.animationCallback = null;\n    }, this.animationDuration);\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host class={ {\n        open: this.open,\n      } }>\n        <div class={ {\n          container: true,\n          open: this.open\n        } }>\n          <div class={ {\n            heading: true,\n            'with-icon': this.renderIcon\n          } }\n            onClick={ () => this.onHeadingClick() }\n          >\n            <div class=\"left\">\n              <slot name=\"heading\" />\n            </div>\n            { this.renderHeadingIconContainer() }\n          </div>\n          <div\n            ref={ (element: HTMLElement) => this.contentWrapperElement = element }\n            class=\"content-wrapper\">\n            <div\n              ref={ (element: HTMLElement) => this.contentElement = element }\n              class=\"content\">\n              <slot />\n            </div>\n          </div>\n          { this.renderDividerElement() }\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the divider element if divider property enabled.\n   */\n  private renderDividerElement(): FunctionalComponent {\n    if (this.renderDivider) {\n      return <div class=\"divider\"></div>\n    }\n    return <Fragment></Fragment>;\n  }\n\n  /**\n   * Renders the heading icon container\n   */\n  private renderHeadingIconContainer(): FunctionalComponent {\n    if (this.renderIcon) {\n      return (\n        <div class=\"right\">\n          <slot name=\"heading-icon\">\n            { this.renderDefaultIcon() }\n          </slot>\n        </div>\n      )\n    }\n    return <Fragment></Fragment>\n  }\n\n  /**\n   * Renders the default right icon for the accordion heading.\n   */\n  private renderDefaultIcon(): FunctionalComponent {\n    return <div class=\"icon rotate\" innerHTML={ ExpandMore }></div>;\n  }\n}\n","@import 'global.scss';\n\n:host {\n  /**\n  * @prop --navigation-container-padding: The padding of the navigation container.\n  * @prop --navigation-container-border: The border of the navigation container.\n  * @prop --navigation-container-border-radius: The border radius of the navigation container.\n  *\n  * @prop --navigation-font-family: The font family of the navigation elements.\n  * @prop --navigation-font-size: The font size of the navigation elements.\n  * @prop --navigation-font-weight: The font weight of the navigation elements.\n  * @prop --navigation-line-height: The line height of the navigation elements.\n  *\n  * @prop display: The display mode of the host element.\n  */\n  --navigation-container-padding: #{$rwc-spacing--xs};\n  --navigation-container-border: none;\n  --navigation-container-border-radius: none;\n  \n  --navigation-font-family: #{$rwc-font-family-default};\n  --navigation-font-size: #{$rwc-font-size-body-md};\n  --navigation-font-weight: 500;\n  --navigation-line-height: #{$rwc-line-height-xs};\n  \n  display: block;\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  font-family: var(--navigation-font-family);\n  font-size: var(--navigation-font-size);\n  font-weight: var(--navigation-font-weight);\n  line-height: var(--navigation-line-height);\n  padding: var(--navigation-container-padding);\n  border: var(--navigation-container-border);\n  border-radius: var(--navigation-container-border-radius);\n\n  &.vertical,\n  &.accordion {\n    flex-direction: column;\n  }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { NavigationType } from '../../interfaces/components/basic/navigation/navigation';\n\n@Component({\n  tag: 'rwc-navigation',\n  styleUrl: './navigation.scss',\n  shadow: true\n})\nexport class RwcNavigation {\n  /**\n   * The type of the navigation\n   */\n  @Prop({ reflect: true }) type: NavigationType = 'horizontal';\n\n  /**\n   * Renders the component\n   */\n  render() {\n    return (\n      <Host>\n        <div class={ {\n          container: true,\n          [this.type]: true\n        } }>\n          <slot name=\"before\" />\n          <slot />\n          <slot name=\"after\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}