'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4ca922a8.js');
const eventManager = require('./eventManager-7f144b07.js');
const rwcActionHelper = require('./rwcActionHelper-2ba61c7e.js');

class DragState {
  constructor(dragging = false, moving = false) {
    this.dragging = dragging;
    this.moving = moving;
  }
}

class ScrollPosition {
  constructor(left = 0, top = 0, x = 0, y = 0) {
    this.left = left;
    this.top = top;
    this.x = x;
    this.y = y;
  }
}

class DragMove {
  get dragging() {
    return this.state.dragging && this.state.moving;
  }
  constructor(element) {
    this.position = new ScrollPosition();
    this.state = new DragState();
    this.element = null;
    this.initialCursorStyle = '';
    this.dragTimeout = null;
    this.mouseDownHandler = (event) => {
      if (event.composedPath().includes(this.element)) {
        this.startDrag();
        this.position = {
          left: this.element.scrollLeft,
          top: this.element.scrollTop,
          x: event.clientX,
          y: event.clientY
        };
        document.addEventListener('mousemove', this.mouseMoveHandler);
        document.addEventListener('mouseup', this.mouseUpHandler);
      }
    };
    this.mouseMoveHandler = (event) => {
      const dx = event.clientX - this.position.x;
      const dy = event.clientY - this.position.y;
      if (dx !== 0 || dy !== 0) {
        this.state.moving = true;
      }
      this.element.scrollTop = this.position.top - dy;
      this.element.scrollLeft = this.position.left - dx;
    };
    this.mouseUpHandler = () => {
      document.removeEventListener('mousemove', this.mouseMoveHandler);
      document.removeEventListener('mouseup', this.mouseUpHandler);
      this.element.style.cursor = this.initialCursorStyle;
      this.stopDrag();
    };
    this.init(element);
  }
  init(element) {
    this.element = element;
    this.initialCursorStyle = element.style.cursor || '';
    this.element.addEventListener('mousedown', this.mouseDownHandler);
  }
  destroy() {
    this.element.removeEventListener('mouseDown', this.mouseDownHandler);
  }
  startDrag() {
    this.stopDrag();
    this.dragTimeout = setTimeout(() => {
      this.state.dragging = true;
    }, DragMove.DRAG_STATE_DELAY);
  }
  stopDrag() {
    if (this.dragTimeout !== null) {
      clearTimeout(this.dragTimeout);
      this.dragTimeout = null;
    }
    if (this.state.dragging || this.state.moving) {
      setTimeout(() => {
        this.state.dragging = false;
        this.state.moving = false;
      }, 1);
    }
  }
}
DragMove.DRAG_STATE_DELAY = 200;

const tabsCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--tabs-tab-text-color:rgb(33, 33, 33);--tabs-tab-hover-text-color:rgb(33, 33, 33);--tabs-tab-active-text-color:rgb(33, 33, 33);--tabs-tab-padding:0.25rem 0.5rem;--tabs-tab-border-bottom:2px solid transparent;--tabs-tab-hover-border-bottom-color:rgb(224, 224, 224);--tabs-tab-active-border-bottom-color:#111;--tabs-tab-transition:border-bottom-color var(--tabs-animation-duration) linear, color var(--tabs-animation-duration) linear;--tabs-segments-wrapper-background-color:rgb(224, 224, 224);--tabs-segments-wrapper-padding:0.25rem;--tabs-segments-wrapper-border-radius:100vh;--tabs-segment-text-color:rgb(33, 33, 33);--tabs-segment-hover-text-color:rgb(33, 33, 33);--tabs-segment-active-text-color:#fff;--tabs-segment-hover-background-color:rgb(238, 238, 238);--tabs-segment-transition-background-color:background-color var(--tabs-animation-duration) linear;--tabs-segment-transition-color:color var(--tabs-animation-duration) linear var(--tabs-animation-duration);--tabs-segment-indicator-background-color:#111;--tabs-segment-indicator-transition:left var(--tabs-animation-duration) ease-in-out, width var(--tabs-animation-duration) ease-in-out;--tabs-indicator-border-radius:100vh;--tabs-animation-duration:200ms;display:block;position:relative}.container{overflow-x:scroll;position:relative;scrollbar-width:none;-ms-overflow-style:none}.container::-webkit-scrollbar{display:none}.tabs-container{width:fit-content;position:relative}.tabs-inner-container{display:flex;flex-direction:row;position:relative;width:fit-content;user-select:none;z-index:1}.indicator{bottom:0;left:0;position:absolute}::slotted(*){cursor:pointer;white-space:nowrap;padding:var(--tabs-tab-padding)}.mode-underline ::slotted(*){border-bottom:var(--tabs-tab-border-bottom);color:var(--tabs-tab-text-color);transition:var(--tabs-tab-transition)}.mode-underline ::slotted(*:hover){border-bottom-color:var(--tabs-tab-hover-border-bottom-color);color:var(--tabs-tab-hover-text-color)}.mode-underline ::slotted(.active){border-bottom-color:var(--tabs-tab-active-border-bottom-color);color:var(--tabs-tab-active-text-color)}.mode-segments .tabs-wrapper{background-color:var(--tabs-segments-wrapper-background-color);padding:var(--tabs-segments-wrapper-padding);border-radius:var(--tabs-segments-wrapper-border-radius);width:fit-content}.mode-segments .indicator{background-color:var(--tabs-segment-indicator-background-color);border-radius:var(--tabs-indicator-border-radius);bottom:unset;height:100%;top:0;transition:var(--tabs-segment-indicator-transition)}.mode-segments ::slotted(*){border-radius:100vh;color:var(--tabs-segment-text-color);transition:var(--tabs-segment-transition-background-color), var(--tabs-segment-transition-color)}.mode-segments ::slotted(*:hover){color:var(--tabs-segment-hover-text-color)}.mode-segments ::slotted(*:hover:not(.active)){background-color:var(--tabs-segment-hover-background-color)}.mode-segments ::slotted(.active){color:var(--tabs-segment-active-text-color);transition:var(--tabs-segment-transition-color)}";

const RwcTabs = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changeEvent = index.createEvent(this, "indexChange", 7);
    this.eventManager = new eventManager.EventManager();
    this.tabEventManager = new eventManager.EventManager();
    this.actions = ['goTo'];
    this.textAnimationCoroutine = null;
    this.dragMove = null;
    this.resizeHandler = () => {
      var _a;
      if (((_a = this.tabs) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        this.tabs[this.validateTargetIndex(this.activeTab)].scrollIntoView({ behavior: 'smooth', inline: 'center' });
      }
    };
    this.rwcKey = rwcActionHelper.RWCActionHelper.getDefaultComponentKey('tabs');
    this.mode = 'underline';
    this.defaultTab = 0;
    this.activeTab = 0;
  }
  validateTargetIndex(value) {
    if (value > this.tabs.length - 1 || value < 0) {
      return 0;
    }
    return value;
  }
  get tabsWrapperPaddingLeft() {
    var _a;
    return Number.parseFloat((_a = getComputedStyle(this.tabsWrapper).paddingLeft) !== null && _a !== void 0 ? _a : '0');
  }
  onWindowResize() {
    this.resizeHandler();
  }
  componentWillLoad() {
    this.activeTab = this.defaultTab > 0 ? this.defaultTab : 0;
  }
  componentDidLoad() {
    this.init();
  }
  disconnectedCallback() {
    this.dragMove.destroy();
    this.eventManager.clearEventListeners();
  }
  init() {
    this.initTabClickEvents();
    this.initDefaultTab();
    this.dragMove = new DragMove(this.root);
    this.initGoToEventListeners();
  }
  initDefaultTab() {
    this.activeTab = this.validateTargetIndex(this.activeTab);
    if (this.tabs.length > 0) {
      this.indicator.style.width = this.tabs[this.activeTab].getBoundingClientRect().width + 'px';
      this.indicator.style.left = this.tabs[this.activeTab].offsetLeft - this.tabsWrapperPaddingLeft + 'px';
      this.tabs[this.activeTab].classList.add('active');
    }
  }
  initTabClickEvents() {
    this.tabEventManager.clearEventListeners();
    this.tabs = this.tabContainer.assignedElements();
    this.tabs.forEach((element, index) => {
      this.tabEventManager.registerEventListener(element, 'click', () => {
        if (!this.dragMove.dragging) {
          this.goTo(index);
        }
      });
    });
  }
  async goTo(targetIndex) {
    const parsedIndex = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);
    if (this.activeTab !== targetIndex) {
      this.tabs.forEach(tab => {
        tab.classList.remove(RwcTabs.ACTIVE_TAB_CLASS);
      });
      this.tabs[parsedIndex].scrollIntoView({ behavior: 'smooth', inline: 'center' });
      this.indicator.style.left = this.tabs[parsedIndex].offsetLeft - this.tabsWrapperPaddingLeft + 'px';
      this.indicator.style.width = this.tabs[parsedIndex].getBoundingClientRect().width + 'px';
      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;
      this.setActiveTab(parsedIndex, originalEvent);
      this.cancelTextAnimation();
    }
  }
  setActiveTab(index, originalEvent) {
    var _a;
    this.tabs[index].classList.add(RwcTabs.ACTIVE_TAB_CLASS);
    this.changeEvent.emit((_a = originalEvent === null || originalEvent === void 0 ? void 0 : originalEvent.detail) !== null && _a !== void 0 ? _a : { origin: this.host, next: index, previous: this.activeTab });
    this.activeTab = index;
  }
  cancelTextAnimation() {
    clearInterval(this.textAnimationCoroutine);
  }
  initGoToEventListeners() {
    rwcActionHelper.RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');
  }
  renderIndicator() {
    return (index.h("div", { class: "indicator", ref: (element) => this.indicator = element }));
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: {
        container: true,
        [`mode-${this.mode}`]: true
      }, ref: (element) => this.root = element }, index.h("div", { class: "tabs-wrapper", ref: (element) => this.tabsWrapper = element }, index.h("div", { class: "tabs-container" }, index.h("div", { class: "tabs-inner-container" }, index.h("slot", { ref: (element) => this.tabContainer = element, onSlotchange: () => this.initTabClickEvents() })), this.renderIndicator())))));
  }
  get host() { return index.getElement(this); }
};
RwcTabs.ACTIVE_TAB_CLASS = 'active';
RwcTabs.style = tabsCss;

exports.rwc_tabs = RwcTabs;

//# sourceMappingURL=rwc-tabs.cjs.entry.js.map