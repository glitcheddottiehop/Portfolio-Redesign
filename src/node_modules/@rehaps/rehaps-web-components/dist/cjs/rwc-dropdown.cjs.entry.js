'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4ca922a8.js');
const eventManager = require('./eventManager-7f144b07.js');

const dropdownCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--dropdown-background-color:#fff;--dropdown-border:1px solid rgb(224, 224, 224);--dropdown-border-radius:0.5rem;--dropdown-box-shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);--dropdown-max-width:100%;--dropdown-wrapper-transition:height var(--dropdown-animation-duration) ease-in-out;--dropdown-container-margin:0.125rem 0 0 0;--dropdown-container-padding:0.5rem 0;--dropdown-item-padding:0.125rem 0.5rem;--dropdown-item-background-color:transparent;--dropdown-item-hover-background-color:rgb(238, 238, 238);--dropdown-animation-duration:200ms;display:block;position:relative}.wrapper{background-color:var(--dropdown-background-color);border:var(--dropdown-border);border-radius:var(--dropdown-border-radius);box-shadow:var(--dropdown-box-shadow);height:0;left:-99999px;margin:var(--dropdown-container-margin);max-width:var(--dropdown-wrapper-max-width);overflow:hidden;position:absolute;transition:visibility 0ms var(--dropdown-animation-duration), left 0ms var(--dropdown-animation-duration), var(--dropdown-wrapper-transition)}.wrapper.open{left:0;visibility:visible;height:auto;transition:var(--dropdown-wrapper-transition)}.wrapper.mode-fixed{position:fixed}.wrapper.size-auto .container{display:inline-block}.container{padding:var(--dropdown-container-padding)}::slotted(*){background-color:var(--dropdown-item-background-color);padding:var(--dropdown-item-padding)}::slotted(*:hover){background-color:var(--dropdown-item-hover-background-color)}";

const RwcDropdown = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dropdownOpenEvent = index.createEvent(this, "dropdownOpen", 7);
    this.dropdownCloseEvent = index.createEvent(this, "dropdownClose", 7);
    this.eventManager = new eventManager.EventManager();
    this.openMode = 'manual';
    this.position = 'bottom';
    this.size = 'parent';
    this.mode = 'fixed';
    this.isOpen = false;
  }
  componentWillLoad() {
    this.parent = this.host.parentElement;
    this.init();
  }
  componentDidLoad() {
    this.wrapperElement.style.height = `0px`;
  }
  disconnectedCallback() {
    this.eventManager.clearEventListeners();
  }
  async init() {
    this.eventManager.clearEventListeners();
    this.initHoverEvents();
    this.initClickEvents();
  }
  onWindowScroll() {
    if (this.mode === 'fixed') {
      this.calculateDropdownOffset();
    }
  }
  onWindowResize() {
    if (this.isOpen) {
      this.setState(false);
    }
  }
  async onDocumentClick(event) {
    if (this.isOpen && !event.composedPath().includes(this.wrapperElement)) {
      await new Promise(requestAnimationFrame);
      this.setState(false);
    }
  }
  initHoverEvents() {
    if (this.openMode === 'hover') {
      this.eventManager.registerEventListener(this.parent, 'mouseenter', () => this.setState(true));
      this.eventManager.registerEventListener(this.parent, 'mouseleave', () => this.setState(false));
    }
  }
  initClickEvents() {
    if (this.openMode === 'toggle') {
      this.eventManager.registerEventListener(this.parent, 'click', async () => {
        if (!this.isOpen) {
          await new Promise(requestAnimationFrame);
          this.setState(true);
        }
      });
    }
  }
  async setState(value) {
    this.handleStateChange(value);
  }
  async handleStateChange(value) {
    this.isOpen = value;
    if (this.isOpen) {
      this.dropdownOpenEvent.emit();
    }
    else {
      this.dropdownCloseEvent.emit();
    }
    await new Promise(requestAnimationFrame);
    this.calculateDropdownSize();
    this.calculateDropdownOffset();
  }
  async calculateDropdownOffset() {
    if (this.wrapperElement && this.parent) {
      let offset = this.getStartingOffset();
      offset = this.calculateSideOffset(offset);
      offset = this.fixOverflow(offset);
      this.wrapperElement.style.left = this.isOpen ? `${offset.x}px` : '';
      this.wrapperElement.style.top = `${offset.y}px`;
    }
  }
  getStartingOffset() {
    if (this.mode === 'fixed') {
      return {
        x: this.parent.getBoundingClientRect().left,
        y: this.parent.getBoundingClientRect().top
      };
    }
    else {
      return {
        x: 0,
        y: 0
      };
    }
  }
  calculateSideOffset({ x, y }) {
    if (this.position === 'side') {
      x += this.parent.offsetWidth;
      if (this.mode === 'absolute') {
        y = -this.parent.offsetHeight;
      }
    }
    else if (this.mode === 'fixed') {
      y += this.parent.offsetHeight;
    }
    return {
      x: x,
      y: y
    };
  }
  fixOverflow({ x, y }) {
    const rightEdgePosition = this.mode === 'absolute' ?
      this.parent.getBoundingClientRect().left + x + this.wrapperElement.offsetWidth :
      x + this.wrapperElement.offsetWidth;
    if (rightEdgePosition > window.innerWidth) {
      x -= rightEdgePosition - window.innerWidth;
    }
    return {
      x: x,
      y: y
    };
  }
  async calculateDropdownSize() {
    this.wrapperElement.style.height = `${this.isOpen ? this.containerElement.offsetHeight : 0}px`;
    if (this.mode === 'fixed' && this.size === 'parent') {
      this.wrapperElement.style.width = `${this.parent.offsetWidth}px`;
    }
    else {
      this.wrapperElement.style.width = '';
    }
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { ref: (element) => this.wrapperElement = element, class: {
        wrapper: true,
        open: this.isOpen,
        [`mode-${this.mode}`]: true,
        [`size-${this.size}`]: true
      } }, index.h("div", { ref: (element) => this.containerElement = element, class: "container" }, index.h("div", { class: "content" }, index.h("slot", null))))));
  }
  get host() { return index.getElement(this); }
};
RwcDropdown.style = dropdownCss;

exports.rwc_dropdown = RwcDropdown;

//# sourceMappingURL=rwc-dropdown.cjs.entry.js.map