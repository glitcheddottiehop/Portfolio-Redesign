{"version":3,"names":["slidesCss","RwcSlides","this","eventManager","EventManager","actions","autoSlideCoroutine","RWCActionHelper","getDefaultComponentKey","onAutoSlideChange","init","onMouseEnter","clearInterval","onMouseLeave","autoSlide","initAutoSlide","validateTargetIndex","value","slides","length","componentDidLoad","disconnectedCallback","clearEventListeners","slideContainer","assignedElements","initDefaultSlide","initGoToEventListeners","activeSlide","_a","classList","add","ACTIVE_SLIDE_CLASS","setInterval","goTo","autoSlideDelay","targetIndex","parsedIndex","CustomEvent","Number","parseInt","detail","next","forEach","slide","remove","originalEvent","setActiveSlide","changeEvent","emit","origin","host","previous","bindRWCActions","rwcKey","render","h","Host","class","container","ref","slot","onSlotchange"],"sources":["src/components/basic/carousel/slides.scss?tag=rwc-slides&encapsulation=shadow","src/components/basic/carousel/slides.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --slides-animation-duration: The duration of the slide change animations.\n   * @prop --slides-slide-fade-transition: The transition of the slide from active to default state.\n   * @prop --slides-slide-active-fade-transition: The transition of the slide from default to active state.\n   \n   * @prop display: The display mode of the host element.\n   */\n  --slides-animation-duration: 200ms;\n  \n  --slides-slide-fade-transition:\n    opacity var(--slides-animation-duration) ease-in-out,\n    visibility 0ms linear var(--slides-animation-duration),\n    position 0ms linear var(--slides-animation-duration),\n    left 0ms linear var(--slides-animation-duration);\n    \n  --slides-slide-active-fade-transition:\n    opacity var(--slides-animation-duration) ease-in-out var(--slides-animation-duration),\n    visibility 0ms linear var(--slides-animation-duration),\n    position 0ms linear var(--slides-animation-duration),\n    left 0ms linear var(--slides-animation-duration);\n\n  display: block;\n}\n\n.container {\n  width: 100%;\n  overflow-x: hidden;\n  position: relative;\n}\n\n.slide-flex {\n  display: flex;\n  flex-direction: row;\n}\n\n.slide-wrapper {\n  width: 100%;\n}\n\n::slotted(*) {\n  left: #{$off-screen};\n  opacity: 0;\n  position: absolute;\n  transition: var(--slides-slide-fade-transition);\n  visibility: hidden;\n}\n\n::slotted(.active) {\n  left: 0;\n  opacity: 1;\n  position: unset;\n  transition: var(--slides-slide-active-fade-transition);\n  visibility: visible;\n}\n","import { Component, h, Element, State, Prop, Event, EventEmitter, Method, FunctionalComponent, Listen, Host, Watch } from '@stencil/core';\nimport { IPaginable } from '../../../interfaces/actions/IPaginable';\nimport { EventManager } from '../../../utils/actions/eventManager';\nimport { RWCActionHelper } from '../../../utils/actions/rwcActionHelper';\n\n@Component({\n  tag: 'rwc-slides',\n  styleUrl: 'slides.scss',\n  shadow: true\n})\nexport class RwcSlides implements IPaginable {\n  /**\n   * The class name used for the active slide element.\n   */\n  static ACTIVE_SLIDE_CLASS = 'active';\n\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcSlidesElement;\n\n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  public eventManager: EventManager = new EventManager();\n\n  /**\n   * List of the actions available for the Slides.\n   */\n  public actions: 'goTo'[] = ['goTo'];\n\n  /**\n   * The coroutine handling the slide animation.\n   */\n  private autoSlideCoroutine: NodeJS.Timer = null;\n\n  /**\n   * The reference to the element containing slides.\n   */\n  private slideContainer: HTMLSlotElement;\n\n  /**\n   * The reference to the slide elements.\n   */\n  private slides?: HTMLElement[];\n\n  /**\n   * Key used for initializing event listeners.\n   */\n  @Prop({ reflect: true }) rwcKey = RWCActionHelper.getDefaultComponentKey('slides');\n\n  /**\n   * The active slide on component load.\n   */\n  @Prop() defaultSlide: number = 0;\n\n  /**\n   * Enable auto slide change.\n   */\n  @Prop() autoSlide: boolean = false;\n\n  /**\n   * Auto slide change delay in milliseconds.\n   */\n  @Prop() autoSlideDelay: number = 5000;\n\n  /**\n   * Event fired when active slide has been changed.\n   */\n  @Event({ eventName: 'indexChange' }) changeEvent: EventEmitter<GoToEventDetail>;\n\n  /**\n   * Currently active tab.\n   */\n  @State() activeSlide: number = 0;\n  \n  @Watch('autoSlide')\n  onAutoSlideChange(): void {\n    this.init();\n  }\n\n  /**\n   * Pauses the auto slide if mouse is inside the content.\n   */\n  @Listen('mouseenter')\n  onMouseEnter(): void {\n    clearInterval(this.autoSlideCoroutine);\n  }\n\n  /**\n   * Resumes the auto slide if mouse is outside of the content.\n   */\n  @Listen('mouseleave')\n  onMouseLeave(): void {\n    if (this.autoSlide) {\n      this.initAutoSlide();\n    }\n  }\n  \n  /**\n   * Gets the currently active tab index in valid range.\n   */\n  private validateTargetIndex(value: number): number {\n    if (value > this.slides.length - 1 || value < 0) {\n      return 0;\n    }\n    \n    return value;\n  }\n\n  /**\n   * Initializes event listeners on render.\n   */\n  componentDidLoad(): void {\n    this.init();\n  }\n\n  /**\n   * Destroy component's event listeners before component is destroyed.\n   */\n  disconnectedCallback(): void {\n    clearInterval(this.autoSlideCoroutine);\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Initialize the component.\n   */\n  init(): void {\n    this.eventManager.clearEventListeners();\n    this.slides = this.slideContainer.assignedElements() as HTMLElement[];\n    this.initDefaultSlide();\n    this.initGoToEventListeners();\n    clearInterval(this.autoSlideCoroutine);\n    if (this.autoSlide) {\n      this.initAutoSlide();\n    }\n  }\n\n  /**\n   * Initialize default tab.\n   */\n  initDefaultSlide(): void {\n    this.activeSlide = this.validateTargetIndex(this.activeSlide);\n    if (this.slides?.length > 0) {\n      this.slides[this.activeSlide].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);\n    }\n  }\n\n  /**\n   * Initialize auto slide coroutine.\n   */\n  initAutoSlide(): void {\n    clearInterval(this.autoSlideCoroutine);\n    this.autoSlideCoroutine = setInterval(() => {\n      this.goTo(this.validateTargetIndex(this.activeSlide + 1));\n    }, this.autoSlideDelay);\n  }\n\n  /**\n   * Change active tab to provided index and start indicator animation.\n   */\n  @Method()\n  async goTo(targetIndex: number | CustomEvent): Promise<void> {\n    const parsedIndex: number = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);\n    \n    if (this.activeSlide !== parsedIndex) {\n      this.slides.forEach(slide => {\n        slide.classList.remove(RwcSlides.ACTIVE_SLIDE_CLASS);\n      });\n\n      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;\n      this.setActiveSlide(parsedIndex, originalEvent);\n    }\n  }\n\n  /**\n   * Set html and class properties for active slide and fire change event.\n   */\n  setActiveSlide(targetIndex: number, originalEvent?: CustomEvent): void {\n    this.slides[targetIndex].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);\n    this.changeEvent.emit(originalEvent?.detail ?? { origin: this.host, next: targetIndex, previous: this.activeSlide });\n    this.activeSlide = targetIndex;\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click.\n   */\n  initGoToEventListeners(): void {\n    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          class={ {\n            container: true\n          } }\n        >\n          <div class=\"slide-wrapper\">\n            <div class=\"slide-flex\">\n              <slot\n                ref={ (slot: HTMLSlotElement) => this.slideContainer = slot }\n                onSlotchange={ () => this.init() }\n              />\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"wIAAA,MAAMA,EAAY,qnD,MCULC,EAAS,M,kEAcbC,KAAAC,aAA6B,IAAIC,EAKjCF,KAAAG,QAAoB,CAAC,QAKpBH,KAAAI,mBAAmC,K,YAeTC,EAAgBC,uBAAuB,U,kBAK1C,E,eAKF,M,oBAKI,I,iBAUF,C,CAG/B,iBAAAC,GACEP,KAAKQ,M,CAOP,YAAAC,GACEC,cAAcV,KAAKI,mB,CAOrB,YAAAO,GACE,GAAIX,KAAKY,UAAW,CAClBZ,KAAKa,e,EAOD,mBAAAC,CAAoBC,GAC1B,GAAIA,EAAQf,KAAKgB,OAAOC,OAAS,GAAKF,EAAQ,EAAG,CAC/C,OAAO,C,CAGT,OAAOA,C,CAMT,gBAAAG,GACElB,KAAKQ,M,CAMP,oBAAAW,GACET,cAAcV,KAAKI,oBACnBJ,KAAKC,aAAamB,qB,CAMpB,IAAAZ,GACER,KAAKC,aAAamB,sBAClBpB,KAAKgB,OAAShB,KAAKqB,eAAeC,mBAClCtB,KAAKuB,mBACLvB,KAAKwB,yBACLd,cAAcV,KAAKI,oBACnB,GAAIJ,KAAKY,UAAW,CAClBZ,KAAKa,e,EAOT,gBAAAU,G,MACEvB,KAAKyB,YAAczB,KAAKc,oBAAoBd,KAAKyB,aACjD,KAAIC,EAAA1B,KAAKgB,UAAM,MAAAU,SAAA,SAAAA,EAAET,QAAS,EAAG,CAC3BjB,KAAKgB,OAAOhB,KAAKyB,aAAaE,UAAUC,IAAI7B,EAAU8B,mB,EAO1D,aAAAhB,GACEH,cAAcV,KAAKI,oBACnBJ,KAAKI,mBAAqB0B,aAAY,KACpC9B,KAAK+B,KAAK/B,KAAKc,oBAAoBd,KAAKyB,YAAc,GAAG,GACxDzB,KAAKgC,e,CAOV,UAAMD,CAAKE,GACT,MAAMC,EAAsBlC,KAAKc,oBAAoBmB,aAAuBE,YAAcC,OAAOC,SAASJ,EAAYK,OAAOC,MAAQN,GAErI,GAAIjC,KAAKyB,cAAgBS,EAAa,CACpClC,KAAKgB,OAAOwB,SAAQC,IAClBA,EAAMd,UAAUe,OAAO3C,EAAU8B,mBAAmB,IAGtD,MAAMc,EAAgBV,aAAuBE,YAAcF,EAAc,KACzEjC,KAAK4C,eAAeV,EAAaS,E,EAOrC,cAAAC,CAAeX,EAAqBU,G,MAClC3C,KAAKgB,OAAOiB,GAAaN,UAAUC,IAAI7B,EAAU8B,oBACjD7B,KAAK6C,YAAYC,MAAKpB,EAAAiB,IAAa,MAAbA,SAAa,SAAbA,EAAeL,UAAM,MAAAZ,SAAA,EAAAA,EAAI,CAAEqB,OAAQ/C,KAAKgD,KAAMT,KAAMN,EAAagB,SAAUjD,KAAKyB,cACtGzB,KAAKyB,YAAcQ,C,CAMrB,sBAAAT,GACEnB,EAAgB6C,eAAelD,KAAMA,KAAKgD,KAAMhD,KAAKG,QAASH,KAAKmD,OAAQ,c,CAM7E,MAAAC,GACE,OACEC,EAACC,EAAI,KACHD,EAAA,OACEE,MAAQ,CACNC,UAAW,OAGbH,EAAA,OAAKE,MAAM,iBACTF,EAAA,OAAKE,MAAM,cACTF,EAAA,QACEI,IAAOC,GAA0B1D,KAAKqB,eAAiBqC,EACvDC,aAAe,IAAM3D,KAAKQ,Y,2FAjMjCT,EAAA8B,mBAAqB,S"}