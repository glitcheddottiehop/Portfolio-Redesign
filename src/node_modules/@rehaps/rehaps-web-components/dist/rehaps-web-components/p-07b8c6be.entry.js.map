{"version":3,"names":["accordionCss","RwcAccordion","animationDuration","Number","parseInt","getComputedStyle","this","host","getPropertyValue","onHeadingClick","setState","open","value","animationCallback","clearTimeout","contentWrapperElement","style","height","contentElement","offsetHeight","Promise","requestAnimationFrame","setTimeout","render","h","Host","class","container","heading","renderIcon","onClick","name","renderHeadingIconContainer","ref","element","renderDividerElement","renderDivider","Fragment","renderDefaultIcon","innerHTML","ExpandMore","navigationCss","RwcNavigation","type"],"sources":["src/components/basic/accordion/accordion.scss?tag=rwc-accordion&encapsulation=shadow","src/components/basic/accordion/accordion.tsx","src/components/navigation/navigation.scss?tag=rwc-navigation&encapsulation=shadow","src/components/navigation/navigation.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --accordion-default-font-family: The default font family.\n   * @prop --accordion-heading-padding: The padding of the heading.\n   * @prop --accordion-heading-font-family: The font family of the heading.\n   * @prop --accordion-heading-font-size: The font size of the heading.\n   * @prop --accordion-heading-font-weight: The font weight of the heading.\n   * @prop --accordion-content-line-height: The line height of the heading.\n   * @prop --accordion-content-padding: The padding of the content.\n   * @prop --accordion-content-font-family: The font family of the content.\n   * @prop --accordion-content-font-size: The font size of the content.\n   * @prop --accordion-content-line-height: The line height of the content.\n   * @prop --accordion-content-font-weight: The font weight of the content.\n   * @prop --accordion-divider-background-color: The background color of divider.\n   * @prop --accordion-divider-height: The height of the divider.\n   * @prop --accordion-icon-color: The color of the heading icon.\n   * @prop --accordion-icon-open-transform: The transform of the icon on open state.\n   * @prop --accordion-animation-duration: The duration of the transition of the state change of the accordion.\n   *\n   * @prop display: The display mode of the host element.\n   */\n  --accordion-default-font-family: #{$rwc-font-family-default};\n  \n  --accordion-heading-padding: #{$rwc-spacing--xs} 0;\n  --accordion-heading-font-family: var(--accordion-default-font-family);\n  --accordion-heading-font-size: #{$rwc-font-size-heading-sm};\n  --accordion-heading-font-weight: 500;\n  --accordion-content-line-height: #{$rwc-line-height-xs};\n  \n  --accordion-content-padding: #{$rwc-spacing--xs} 0 #{$rwc-spacing--md} 0;\n  --accordion-content-font-family: var(--accordion-default-font-family);\n  --accordion-content-font-size: #{$rwc-font-size-body-md};\n  --accordion-content-font-weight: 400;\n  --accordion-content-line-height: #{$rwc-line-height-xs};\n  \n  --accordion-divider-background-color: #{$rwc-color-divider-neutral};\n  --accordion-divider-height: 1px;\n  \n  --accordion-icon-color: #{$rwc-color-grey-400};\n  --accordion-icon-open-transform: rotate(-180deg);\n  \n  --accordion-animation-duration: 200ms;\n  \n  display: block;\n}\n\n.heading {\n  cursor: pointer;\n  user-select: none;\n  font-family: var(--accordion-heading-font-family);\n  font-size: var(--accordion-heading-font-size);\n  font-weight: var(--accordion-heading-font-weight);\n  line-height: var(--accordion-content-line-height);\n  padding: var(--accordion-heading-padding);\n  \n  &.with-icon {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n}\n\n.left,\n.right {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.left {\n  flex-grow: 1;\n}\n\n.right {\n  flex-shrink: 0;\n}\n\n.icon {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  fill: var(--accordion-icon-color);\n  transition: transform var(--accordion-animation-duration) ease-in-out;\n}\n\n.content-wrapper {\n  height: 0;\n  overflow: hidden;\n  transition: height var(--accordion-animation-duration) ease-in-out;\n}\n\n.content {\n  font-family: var(--accordion-default-font-family);\n  font-size: var(--accordion-content-font-size);\n  font-weight: var(--accordion-content-font-weight);\n  padding: var(--accordion-content-padding);\n}\n\n.divider {\n  background-color: var(--accordion-divider-background-color);\n  height: var(--accordion-divider-height);\n}\n\n.open {\n  .content-wrapper {\n    height: auto;\n  }\n  \n  .icon {\n    &.rotate {\n      transform: var(--accordion-icon-open-transform);\n    }\n  }\n}\n","import { Component, Element, Fragment, FunctionalComponent, h, Host, Method, Prop } from '@stencil/core';\nimport ExpandMore from '@material-design-icons/svg/round/expand_more.svg';\n\n@Component({\n  tag: 'rwc-accordion',\n  styleUrl: './accordion.scss',\n  shadow: true\n})\nexport class RwcAccordion {\n  /**\n   * The timeout callback for the end of the animation.\n   */\n  private animationCallback: NodeJS.Timer;\n\n  /**\n   * Reference to the content wrapper element.\n   */\n  private contentWrapperElement: HTMLElement;\n\n  /**\n   * Reference to the content element.\n   */\n  private contentElement: HTMLElement;\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcAccordionElement;\n\n  /**\n   * The open state of the accordion.\n   */\n  @Prop({ reflect: true, mutable: true }) open: boolean = false;\n\n  /**\n   * Enables rendering of the divider.\n   */\n  @Prop() renderDivider: boolean = true;\n\n  /**\n   * Enables rendering of the heading icon.\n   */\n  @Prop() renderIcon: boolean = true;\n  \n  /**\n   * The duration of the animation from the style of the host element.\n   */\n  private get animationDuration(): number {\n    return Number.parseInt(getComputedStyle(this.host).getPropertyValue('--accordion-animation-duration'));\n  }\n\n  /**\n   * The heading element click event handler.\n   */\n  private onHeadingClick(): void {\n    this.setState(!this.open);\n  }\n\n  /**\n   * Sets the open state of the accordion to the passed value\n   */\n  @Method()\n  public async setState(value: boolean): Promise<void> {\n    if (this.animationCallback !== null) {\n      clearTimeout(this.animationCallback);\n    }\n    \n    this.open = value;\n    \n    if (value) {\n      this.contentWrapperElement.style.height = `${ this.contentElement.offsetHeight }px`;\n    } else {\n      this.contentWrapperElement.style.height = `${ this.contentElement.offsetHeight }px`;\n      await new Promise(requestAnimationFrame);\n      this.contentWrapperElement.style.height = `0px`;\n    }\n    \n    this.animationCallback = setTimeout(() => {\n      this.contentWrapperElement.style.height = '';\n      this.animationCallback = null;\n    }, this.animationDuration);\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host class={ {\n        open: this.open,\n      } }>\n        <div class={ {\n          container: true,\n          open: this.open\n        } }>\n          <div class={ {\n            heading: true,\n            'with-icon': this.renderIcon\n          } }\n            onClick={ () => this.onHeadingClick() }\n          >\n            <div class=\"left\">\n              <slot name=\"heading\" />\n            </div>\n            { this.renderHeadingIconContainer() }\n          </div>\n          <div\n            ref={ (element: HTMLElement) => this.contentWrapperElement = element }\n            class=\"content-wrapper\">\n            <div\n              ref={ (element: HTMLElement) => this.contentElement = element }\n              class=\"content\">\n              <slot />\n            </div>\n          </div>\n          { this.renderDividerElement() }\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the divider element if divider property enabled.\n   */\n  private renderDividerElement(): FunctionalComponent {\n    if (this.renderDivider) {\n      return <div class=\"divider\"></div>\n    }\n    return <Fragment></Fragment>;\n  }\n\n  /**\n   * Renders the heading icon container\n   */\n  private renderHeadingIconContainer(): FunctionalComponent {\n    if (this.renderIcon) {\n      return (\n        <div class=\"right\">\n          <slot name=\"heading-icon\">\n            { this.renderDefaultIcon() }\n          </slot>\n        </div>\n      )\n    }\n    return <Fragment></Fragment>\n  }\n\n  /**\n   * Renders the default right icon for the accordion heading.\n   */\n  private renderDefaultIcon(): FunctionalComponent {\n    return <div class=\"icon rotate\" innerHTML={ ExpandMore }></div>;\n  }\n}\n","@import 'global.scss';\n\n:host {\n  /**\n  * @prop --navigation-container-padding: The padding of the navigation container.\n  * @prop --navigation-container-border: The border of the navigation container.\n  * @prop --navigation-container-border-radius: The border radius of the navigation container.\n  *\n  * @prop --navigation-font-family: The font family of the navigation elements.\n  * @prop --navigation-font-size: The font size of the navigation elements.\n  * @prop --navigation-font-weight: The font weight of the navigation elements.\n  * @prop --navigation-line-height: The line height of the navigation elements.\n  *\n  * @prop display: The display mode of the host element.\n  */\n  --navigation-container-padding: #{$rwc-spacing--xs};\n  --navigation-container-border: none;\n  --navigation-container-border-radius: none;\n  \n  --navigation-font-family: #{$rwc-font-family-default};\n  --navigation-font-size: #{$rwc-font-size-body-md};\n  --navigation-font-weight: 500;\n  --navigation-line-height: #{$rwc-line-height-xs};\n  \n  display: block;\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  font-family: var(--navigation-font-family);\n  font-size: var(--navigation-font-size);\n  font-weight: var(--navigation-font-weight);\n  line-height: var(--navigation-line-height);\n  padding: var(--navigation-container-padding);\n  border: var(--navigation-container-border);\n  border-radius: var(--navigation-container-border-radius);\n\n  &.vertical,\n  &.accordion {\n    flex-direction: column;\n  }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport { NavigationType } from '../../interfaces/components/basic/navigation/navigation';\n\n@Component({\n  tag: 'rwc-navigation',\n  styleUrl: './navigation.scss',\n  shadow: true\n})\nexport class RwcNavigation {\n  /**\n   * The type of the navigation\n   */\n  @Prop({ reflect: true }) type: NavigationType = 'horizontal';\n\n  /**\n   * Renders the component\n   */\n  render() {\n    return (\n      <Host>\n        <div class={ {\n          container: true,\n          [this.type]: true\n        } }>\n          <slot name=\"before\" />\n          <slot />\n          <slot name=\"after\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAe,4+E,MCQRC,EAAY,M,mCAwBiC,M,mBAKvB,K,gBAKH,I,CAK9B,qBAAYC,GACV,OAAOC,OAAOC,SAASC,iBAAiBC,KAAKC,MAAMC,iBAAiB,kC,CAM9D,cAAAC,GACNH,KAAKI,UAAUJ,KAAKK,K,CAOf,cAAMD,CAASE,GACpB,GAAIN,KAAKO,oBAAsB,KAAM,CACnCC,aAAaR,KAAKO,kB,CAGpBP,KAAKK,KAAOC,EAEZ,GAAIA,EAAO,CACTN,KAAKS,sBAAsBC,MAAMC,OAAS,GAAIX,KAAKY,eAAeC,gB,KAC7D,CACLb,KAAKS,sBAAsBC,MAAMC,OAAS,GAAIX,KAAKY,eAAeC,uBAC5D,IAAIC,QAAQC,uBAClBf,KAAKS,sBAAsBC,MAAMC,OAAS,K,CAG5CX,KAAKO,kBAAoBS,YAAW,KAClChB,KAAKS,sBAAsBC,MAAMC,OAAS,GAC1CX,KAAKO,kBAAoB,IAAI,GAC5BP,KAAKJ,kB,CAMV,MAAAqB,GACE,OACEC,EAACC,EAAI,CAACC,MAAQ,CACZf,KAAML,KAAKK,OAEXa,EAAA,OAAKE,MAAQ,CACXC,UAAW,KACXhB,KAAML,KAAKK,OAEXa,EAAA,OAAKE,MAAQ,CACXE,QAAS,KACT,YAAatB,KAAKuB,YAElBC,QAAU,IAAMxB,KAAKG,kBAErBe,EAAA,OAAKE,MAAM,QACTF,EAAA,QAAMO,KAAK,aAEXzB,KAAK0B,8BAETR,EAAA,OACES,IAAOC,GAAyB5B,KAAKS,sBAAwBmB,EAC7DR,MAAM,mBACNF,EAAA,OACES,IAAOC,GAAyB5B,KAAKY,eAAiBgB,EACtDR,MAAM,WACNF,EAAA,eAGFlB,KAAK6B,wB,CASP,oBAAAA,GACN,GAAI7B,KAAK8B,cAAe,CACtB,OAAOZ,EAAA,OAAKE,MAAM,W,CAEpB,OAAOF,EAACa,EAAQ,K,CAMV,0BAAAL,GACN,GAAI1B,KAAKuB,WAAY,CACnB,OACEL,EAAA,OAAKE,MAAM,SACTF,EAAA,QAAMO,KAAK,gBACPzB,KAAKgC,qB,CAKf,OAAOd,EAACa,EAAQ,K,CAMV,iBAAAC,GACN,OAAOd,EAAA,OAAKE,MAAM,cAAca,UAAYC,G,uCCvJhD,MAAMC,EAAgB,40C,MCQTC,EAAa,M,mCAIwB,Y,CAKhD,MAAAnB,GACE,OACEC,EAACC,EAAI,KACHD,EAAA,OAAKE,MAAQ,CACXC,UAAW,KACX,CAACrB,KAAKqC,MAAO,OAEbnB,EAAA,QAAMO,KAAK,WACXP,EAAA,aACAA,EAAA,QAAMO,KAAK,W"}