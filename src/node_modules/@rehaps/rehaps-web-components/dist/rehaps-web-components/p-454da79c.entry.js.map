{"version":3,"names":["dropdownCss","RwcDropdown","this","eventManager","EventManager","componentWillLoad","parent","host","parentElement","init","componentDidLoad","wrapperElement","style","height","disconnectedCallback","clearEventListeners","initHoverEvents","initClickEvents","onWindowScroll","mode","calculateDropdownOffset","onWindowResize","isOpen","setState","onDocumentClick","event","composedPath","includes","Promise","requestAnimationFrame","openMode","registerEventListener","async","value","handleStateChange","dropdownOpenEvent","emit","dropdownCloseEvent","calculateDropdownSize","offset","getStartingOffset","calculateSideOffset","fixOverflow","left","x","top","y","getBoundingClientRect","position","offsetWidth","offsetHeight","rightEdgePosition","window","innerWidth","containerElement","size","width","render","h","Host","ref","element","class","wrapper","open"],"sources":["src/components/basic/dropdown/dropdown.scss?tag=rwc-dropdown&encapsulation=shadow","src/components/basic/dropdown/dropdown.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --dropdown-background-color: The background color of the dropdown.\n   * @prop --dropdown-border: The border style of the dropdown.\n   * @prop --dropdown-border-radius: The border radius of the dropdown.\n   * @prop --dropdown-box-shadow: The box shadow of the dropdown.\n   * @prop --dropdown-max-width: The maximum width of the dropdown wrapper.\n   * @prop --dropdown-container-padding: The padding of the dropdown inner container.\n   * \n   * @prop --dropdown-wrapper-transition: The transition of the dropdown wrapper.\n   * \n   * @prop --dropdown-container-margin: The margin of the outer container of the dropdown.\n   * @prop --dropdown-container-padding: The padding of the inner container of the dropdown.\n   *\n   * @prop --dropdown-item-padding: The padding of the item inside the unnamed slot of the dropdown.\n   * @prop --dropdown-item-background-color: The background color of the item inside the unnamed slot of the dropdown.\n   * @prop --dropdown-item-hover-background-color: The background color of the item inside the unnamed slot of the dropdown on hover.\n   *\n   * @prop --dropdown-animation-duration: The duration of the opening and closing animations of the dropdown.\n   *\n   * @prop display: The display mode of the host element.\n   * @prop position: The position of the host element.\n   */\n  --dropdown-background-color: #{$rwc-color-foundation-white};\n  --dropdown-border: 1px solid #{$rwc-color-border-primary};\n  --dropdown-border-radius: #{$rwc-border-radius--md};\n  --dropdown-box-shadow: #{$rwc-box-shadow-lg};\n  --dropdown-max-width: 100%;\n\n  --dropdown-wrapper-transition: height var(--dropdown-animation-duration) ease-in-out;\n  \n  --dropdown-container-margin: #{$rwc-spacing--3xs} 0 0 0;\n  --dropdown-container-padding: #{$rwc-spacing--xs} 0;\n  \n  --dropdown-item-padding: #{$rwc-spacing--3xs} #{$rwc-spacing--xs};\n  --dropdown-item-background-color: transparent;\n  --dropdown-item-hover-background-color: #{$rwc-color-grey-200};\n  \n  --dropdown-animation-duration: 200ms;\n\n  display: block;\n  position: relative;\n}\n\n.wrapper {\n  background-color: var(--dropdown-background-color);\n  border: var(--dropdown-border);\n  border-radius: var(--dropdown-border-radius);\n  box-shadow: var(--dropdown-box-shadow);\n  height: 0;\n  left: #{$off-screen};\n  margin: var(--dropdown-container-margin);\n  max-width: var(--dropdown-wrapper-max-width);\n  overflow: hidden;\n  position: absolute;\n  transition: visibility 0ms var(--dropdown-animation-duration), left 0ms var(--dropdown-animation-duration), var(--dropdown-wrapper-transition);\n  \n  &.open {\n    left: 0;\n    visibility: visible;\n    height: auto;\n    transition: var(--dropdown-wrapper-transition);\n  }\n  \n  &.mode-fixed {\n    position: fixed;\n  }\n  \n  &.size-auto {\n    .container {\n      display: inline-block;\n    }\n  }\n}\n\n.container {\n  padding: var(--dropdown-container-padding);\n}\n\n::slotted(*) {\n  background-color: var(--dropdown-item-background-color);\n  padding: var(--dropdown-item-padding);\n}\n\n::slotted(*:hover) {\n  background-color: var(--dropdown-item-hover-background-color);\n}\n","import { Component, Element, Event, EventEmitter, FunctionalComponent, h, Host, Listen, Method, Prop, State } from '@stencil/core';\nimport { DropdownMode, DropdownOpenMode, DropdownPosition, DropdownSize } from '../../../interfaces/components/basic/dropdown/dropdown';\nimport { IPosition } from '../../../interfaces/data/position';\nimport { EventManager } from '../../../utils/actions/eventManager';\n\n@Component({\n  tag: 'rwc-dropdown',\n  styleUrl: './dropdown.scss',\n  shadow: true\n})\nexport class RwcDropdown {\n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  private eventManager: EventManager = new EventManager();\n\n  /**\n   * Reference to the parent of the dropdown.\n   */\n  private parent: HTMLElement;\n\n  /**\n   * Reference to the wrapper of the dropdown.\n   */\n  private wrapperElement: HTMLDivElement;\n\n  /**\n   * Reference to the container of the dropdown.\n   */\n  private containerElement: HTMLDivElement;\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcDropdownElement;\n\n  /**\n   * The open mode of the dropdown.\n   */\n  @Prop({ reflect: true }) openMode: DropdownOpenMode = 'manual';\n\n  /**\n   * The position of the dropdown from the parent.\n   */\n  @Prop({ reflect: true }) position: DropdownPosition = 'bottom';\n\n  /**\n   * The sizing of the dropdown.\n   */\n  @Prop({ reflect: true }) size: DropdownSize = 'parent';\n\n  /**\n   * Determines the rendering behaviour of the dropdown.\n   */\n  @Prop({ reflect: true }) mode: DropdownMode = 'fixed';\n\n  /**\n   * Determines if the dropdown is open.\n   */\n  @State() isOpen: boolean = false;\n\n  /**\n   * Event fired when the dropdown opening is triggered.\n   */\n  @Event({ eventName: 'dropdownOpen' }) dropdownOpenEvent: EventEmitter<void>;\n  \n  /**\n   * Event fired when the dropdown closing is triggered\n   */\n  @Event({ eventName: 'dropdownClose' }) dropdownCloseEvent: EventEmitter<void>;\n\n  /**\n   * Stencil event called the first time the component is to be initialized.\n   */\n  componentWillLoad(): void {\n    this.parent = this.host.parentElement;\n    this.init();\n  }\n\n  /**\n   * Stencil event called when the component is fully loaded for the first time.\n   */\n  componentDidLoad(): void {\n    this.wrapperElement.style.height = `0px`;\n  }\n\n  /**\n   * Fires when the component is about to be destroyed.\n   */\n  disconnectedCallback(): void {\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Initialize the component.\n   */\n  @Method()\n  async init(): Promise<void> {\n    this.eventManager.clearEventListeners();\n    this.initHoverEvents();\n    this.initClickEvents();\n  }\n\n  /**\n   * Handles the scroll event.\n   */\n  @Listen('scroll', { target: 'window' })\n  onWindowScroll(): void {\n    if (this.mode === 'fixed') {\n      this.calculateDropdownOffset();\n    }\n  }\n\n  /**\n   * Handles the window resize event.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    if (this.isOpen) {\n      this.setState(false);\n    }\n  }\n\n  /**\n   * Closes the dropdown on click outside the dropdown wrapper.\n   */\n  @Listen('click', { target: 'document' })\n  async onDocumentClick(event: MouseEvent): Promise<void> {\n    if (this.isOpen && !event.composedPath().includes(this.wrapperElement)) {\n      await new Promise(requestAnimationFrame);\n      this.setState(false);\n    }\n  }\n\n  /**\n   * Initialize the hover event listeners.\n   */\n  private initHoverEvents(): void {\n    if (this.openMode === 'hover') {\n      this.eventManager.registerEventListener(this.parent, 'mouseenter', () => this.setState(true));\n      this.eventManager.registerEventListener(this.parent, 'mouseleave', () => this.setState(false));\n    }\n  }\n\n  /**\n   * Initialize the click event listeners.\n   */\n  private initClickEvents(): void {\n    if (this.openMode === 'toggle') {\n      this.eventManager.registerEventListener(this.parent, 'click', async () => {\n        if (!this.isOpen) {\n          await new Promise(requestAnimationFrame);\n          this.setState(true);\n        }\n      });\n    }\n  }\n\n  /**\n   * Set state of the dropdown.\n   */\n  @Method()\n  async setState(value: boolean): Promise<void> {\n    this.handleStateChange(value);\n  }\n\n  /**\n   * Handle the state change of the dropdown.\n   */\n  async handleStateChange(value: boolean): Promise<void> {\n    this.isOpen = value;\n    \n    if (this.isOpen) {\n      this.dropdownOpenEvent.emit();\n    } else {\n      this.dropdownCloseEvent.emit();\n    }\n    \n    await new Promise(requestAnimationFrame);\n    this.calculateDropdownSize();\n    this.calculateDropdownOffset();\n  }\n\n  /**\n   * Calculate the position of the dropdown.\n   */\n  async calculateDropdownOffset(): Promise<void> {\n    if (this.wrapperElement && this.parent) {\n      let offset = this.getStartingOffset();\n      offset = this.calculateSideOffset(offset);\n      offset = this.fixOverflow(offset);\n      \n      this.wrapperElement.style.left = this.isOpen ? `${ offset.x }px` : '';\n      this.wrapperElement.style.top = `${ offset.y }px`;\n    }\n  }\n\n  /**\n   * Get the starting offset of the dropdown.\\\n   * Returns zero for non fixed modes.\n   */\n  private getStartingOffset(): IPosition {\n    if (this.mode === 'fixed') {\n      return {\n        x: this.parent.getBoundingClientRect().left,\n        y: this.parent.getBoundingClientRect().top\n      }\n    } else {\n      return {\n        x: 0,\n        y: 0\n      }\n    }\n  }\n\n  /**\n   * Get the offset for the side position of the dropdown.\n   */\n  private calculateSideOffset({ x, y }: IPosition): IPosition {\n    if (this.position === 'side') {\n      x += this.parent.offsetWidth;\n      if (this.mode === 'absolute') {\n        y = - this.parent.offsetHeight;\n      }\n    } else if (this.mode === 'fixed') {\n      y += this.parent.offsetHeight;\n    }\n\n    return {\n      x: x,\n      y: y\n    }\n  }\n\n  /**\n   * Calculate the right overflow and position the dropdown to fit the screen.\n   */\n  private fixOverflow({ x, y }: IPosition): IPosition {\n    const rightEdgePosition = this.mode === 'absolute' ?\n      this.parent.getBoundingClientRect().left + x + this.wrapperElement.offsetWidth :\n      x + this.wrapperElement.offsetWidth;\n\n    if (rightEdgePosition > window.innerWidth) {\n      x -= rightEdgePosition - window.innerWidth;\n    }\n\n    return {\n      x: x,\n      y: y\n    }\n  }\n\n  /**\n   * Calculate the size of the dropdown if set to parent size.\n   */\n  private async calculateDropdownSize(): Promise<void> {\n    this.wrapperElement.style.height = `${this.isOpen ? this.containerElement.offsetHeight : 0}px`;\n    if (this.mode === 'fixed' && this.size === 'parent') {\n      this.wrapperElement.style.width = `${ this.parent.offsetWidth }px`;\n    } else {\n      this.wrapperElement.style.width = '';\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={ (element: HTMLDivElement) => this.wrapperElement = element }\n          class={ {\n            wrapper: true,\n            open: this.isOpen,\n            [`mode-${ this.mode }`]: true,\n            [`size-${ this.size }`]: true\n          } }>\n          <div\n            ref={ (element: HTMLDivElement) => this.containerElement = element }\n            class=\"container\"\n          >\n            <div class=\"content\">\n              <slot></slot>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}