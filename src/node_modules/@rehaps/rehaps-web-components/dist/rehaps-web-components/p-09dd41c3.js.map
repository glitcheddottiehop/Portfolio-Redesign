{"version":3,"names":["RWCActionHelper","getLastComponentId","lastComponentId","getDefaultComponentKey","name","RWC_ACTION_PREFIX","bindRWCActions","component","host","actions","rwcKey","eventName","length","querySelector","map","action","join","document","querySelectorAll","forEach","element","getAttribute","callback","this","createCallback","eventManager","registerEventListener","event","_a","detail","origin","call"],"sources":["src/utils/actions/rwcActionHelper.ts"],"sourcesContent":["import { ISubscribable } from \"../../interfaces/actions/ISubscribable\";\n\nexport class RWCActionHelper {\n  /**\n   * The prefix used for automatic action binding on HTML elements.\n   */\n  static RWC_ACTION_PREFIX = 'rwc';\n\n  /**\n   * Stores the index of the last initialized component with the auto action binding.\n   */\n  static lastComponentId: number = 1;\n\n  /**\n   * Gets the last initialized component with auto action binding.\n   */\n  static getLastComponentId(): number {\n    return RWCActionHelper.lastComponentId++;\n  }\n  \n  /**\n   * Gets the default key for the component using passed name and the next available component index.\n   */\n  static getDefaultComponentKey(name: string): string {\n    return `${RWCActionHelper.RWC_ACTION_PREFIX}-${name}-${RWCActionHelper.getLastComponentId()}`;\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click.\n   */\n  static bindRWCActions(component: ISubscribable, host: HTMLElement, actions: Array<string>, rwcKey: string, eventName: string = 'click'): void {\n    if (actions.length > 0) {\n      const querySelector = actions.map(action => `[data-${ RWCActionHelper.RWC_ACTION_PREFIX }-${ action }='${ rwcKey }']`).join(', ');\n      document.querySelectorAll(querySelector).forEach(element => {\n        actions.forEach(action => {\n          if (element.getAttribute(`data-${ RWCActionHelper.RWC_ACTION_PREFIX }-${ action }`)) {\n            const callback = this.createCallback(component, host, action);\n            component.eventManager.registerEventListener(element, eventName, callback);\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Creates a callback method for the passed action of the passed component.\n   */\n  static createCallback(component: ISubscribable, host: HTMLElement, action: string): (event: Event | CustomEvent) => void {\n    return (event: Event | CustomEvent) => {\n      if ((event as CustomEvent).detail?.origin === host) {\n        return;\n      }\n      component[action].call(component, event);\n    }\n  }\n}\n"],"mappings":"MAEaA,EAcX,yBAAOC,GACL,OAAOD,EAAgBE,iB,CAMzB,6BAAOC,CAAuBC,GAC5B,MAAO,GAAGJ,EAAgBK,qBAAqBD,KAAQJ,EAAgBC,sB,CAMzE,qBAAOK,CAAeC,EAA0BC,EAAmBC,EAAwBC,EAAgBC,EAAoB,SAC7H,GAAIF,EAAQG,OAAS,EAAG,CACtB,MAAMC,EAAgBJ,EAAQK,KAAIC,GAAU,SAAUf,EAAgBK,qBAAuBU,MAAaL,QAAaM,KAAK,MAC5HC,SAASC,iBAAiBL,GAAeM,SAAQC,IAC/CX,EAAQU,SAAQJ,IACd,GAAIK,EAAQC,aAAa,QAASrB,EAAgBK,qBAAuBU,KAAY,CACnF,MAAMO,EAAWC,KAAKC,eAAejB,EAAWC,EAAMO,GACtDR,EAAUkB,aAAaC,sBAAsBN,EAAST,EAAWW,E,IAEnE,G,EAQR,qBAAOE,CAAejB,EAA0BC,EAAmBO,GACjE,OAAQY,I,MACN,KAAIC,EAACD,EAAsBE,UAAM,MAAAD,SAAA,SAAAA,EAAEE,UAAWtB,EAAM,CAClD,M,CAEFD,EAAUQ,GAAQgB,KAAKxB,EAAWoB,EAAM,C,EA9CrC3B,EAAAK,kBAAoB,MAKpBL,EAAAE,gBAA0B,S"}