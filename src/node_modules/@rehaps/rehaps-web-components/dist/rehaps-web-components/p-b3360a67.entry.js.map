{"version":3,"names":["systemNotificationsCss","RwcSystemNotification","Map","animationDuration","Number","parseInt","getComputedStyle","this","host","getPropertyValue","heightAnimationDuration","onWindowResize","notificationContainerElement","querySelectorAll","forEach","wrapper","style","maxHeight","scrollHeight","connectedCallback","notifications","clear","disconnectedCallback","timeout","clearTimeout","pushNotification","notification","key","Math","floor","random","MAX_SAFE_INTEGER","toString","set","initAutoRemove","forceStateChange","Promise","requestAnimationFrame","setTimeout","updateNotificationMaxHeight","setNotifications","clearNotifications","keys","push","removeNotification","index","Array","from","removeNotificationByReference","unsetAutoRemoveByReference","duration","get","closing","handleNotificationRemove","max","delete","notificationElement","querySelector","stateChangeTrigger","e","render","h","Host","ref","element","class","renderNotifications","notificationElements","_timeout","onMouseEnter","onMouseLeave","_a","type","renderCloseIcon","title","message","closable","innerHTML","CloseIcon","onClick","Fragment"],"sources":["src/components/messages/system-notifications/system-notifications.scss?tag=rwc-system-notifications&encapsulation=shadow","src/components/messages/system-notifications/system-notifications.tsx"],"sourcesContent":["@import \"global.scss\";\n\n:host {\n  /**\n   * @prop --system-notifications-info-title-color: Title color for info notifications.\n   * @prop --system-notifications-info-message-color: Message color for info notifications.\n   * @prop --system-notifications-info-background-color: Background color for info notifications.\n   * @prop --system-notifications-info-border-color: Border color for info notifications.\n   * @prop --system-notifications-info-close-icon-color: Close icon color for info notifications.\n   * @prop --system-notifications-info-close-icon-hover-color: Close icon hover color for info notifications.\n   * \n   * @prop --system-notifications-success-title-color: Title color for success notifications.\n   * @prop --system-notifications-success-message-color: Message color for success notifications.\n   * @prop --system-notifications-success-background-color: Background color for success notifications.\n   * @prop --system-notifications-success-border-color: Border color for success notifications.\n   * @prop --system-notifications-success-close-icon-color: Close icon color for success notifications.\n   * @prop --system-notifications-success-close-icon-hover-color: Close icon hover color for success notifications.\n   * \n   * @prop --system-notifications-warning-title-color: Title color for warning notifications.\n   * @prop --system-notifications-warning-message-color: Message color for warning notifications.\n   * @prop --system-notifications-warning-background-color: Background color for warning notifications.\n   * @prop --system-notifications-warning-border-color: Border color for warning notifications.\n   * @prop --system-notifications-warning-close-icon-color: Close icon color for warning notifications.\n   * @prop --system-notifications-warning-close-icon-hover-color: Close icon hover color for warning notifications.\n   * \n   * @prop --system-notifications-error-title-color: Title color for error notifications.\n   * @prop --system-notifications-error-message-color: Message color for error notifications.\n   * @prop --system-notifications-error-background-color: Background color for error notifications.\n   * @prop --system-notifications-error-border-color: Border color for error notifications.\n   * @prop --system-notifications-error-close-icon-color: Close icon color for error notifications.\n   * @prop --system-notifications-error-close-icon-hover-color: Close icon hover color for error notifications.\n   * \n   * @prop --system-notifications-border-width: Border width for notifications.\n   * @prop --system-notifications-border-style: Border style for notifications.\n   * @prop --system-notifications-border-radius: Border radius for notifications.\n   * \n   * @prop --system-notifications-item-padding: Padding for notification items.\n   * @prop --system-notifications-item-gap: Gap between notification items.\n   * \n   * @prop --system-notifications-close-icon-size: Size of the close icon.\n   * @prop --system-notifications-close-icon-spacing-right: Spacing to the right of the close icon.\n   * \n   * @prop --system-notifications-title-font-size: Font size for the title.\n   * @prop --system-notifications-title-font-weight: Font weight for the title.\n   * \n   * @prop --system-notifications-message-font-size: Font size for the message.\n   * @prop --system-notifications-message-font-weight: Font weight for the message.\n   * \n   * @prop --system-notifications-fade-animation-duration: Duration of the fade animation.\n   * @prop --system-notifications-height-animation-duration: Duration of the open and close animation. Open animation is 2x faster.\n   */\n  --system-notifications-info-title-color: #{$rwc-color-text-primary};\n  --system-notifications-info-message-color: #{$rwc-color-grey-900};\n  --system-notifications-info-background-color: #{$rwc-color-blue-300};\n  --system-notifications-info-border-color: #{$rwc-color-blue-600};\n  --system-notifications-info-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-info-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-success-title-color: #{$rwc-color-text-primary};\n  --system-notifications-success-message-color: #{$rwc-color-grey-900};\n  --system-notifications-success-background-color: #{$rwc-color-green-500};\n  --system-notifications-success-border-color: #{$rwc-color-green-700};\n  --system-notifications-success-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-success-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-warning-title-color: #{$rwc-color-text-primary};\n  --system-notifications-warning-message-color: #{$rwc-color-grey-900};\n  --system-notifications-warning-background-color: #{$rwc-color-orange-300};\n  --system-notifications-warning-border-color: #{$rwc-color-orange-600};\n  --system-notifications-warning-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-warning-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-error-title-color: #{$rwc-color-text-primary};\n  --system-notifications-error-message-color: #{$rwc-color-grey-900};\n  --system-notifications-error-background-color: #{$rwc-color-red-300};\n  --system-notifications-error-border-color: #{$rwc-color-red-600};\n  --system-notifications-error-close-icon-color: #{$rwc-color-text-primary};\n  --system-notifications-error-close-icon-hover-color: #{$rwc-color-grey-900};\n\n  --system-notifications-border-width: 2px;\n  --system-notifications-border-style: solid;\n  --system-notifications-border-radius: 0.5rem;\n\n  --system-notifications-item-padding: #{$rwc-spacing--xs} #{$rwc-spacing--xxl}\n    #{$rwc-spacing--xs} #{$rwc-spacing--xs};\n  --system-notifications-item-gap: #{$rwc-spacing--3xs};\n\n  --system-notifications-close-icon-size: 1.5rem;\n  --system-notifications-close-icon-spacing-right: #{$rwc-spacing--xs};\n\n  --system-notifications-title-font-size: #{$rwc-font-size-body-sm};\n  --system-notifications-title-font-weight: 600;\n\n  --system-notifications-message-font-size: #{$rwc-font-size-label-sm};\n  --system-notifications-message-font-weight: 500;\n\n  --system-notifications-fade-animation-duration: 500ms;\n  --system-notifications-height-animation-duration: 200ms;\n\n  display: block;\n}\n\np {\n  margin: 0;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: var(--system-notifications-item-gap);\n  position: relative;\n}\n\n.notification-wrapper {\n  box-sizing: border-box;\n  width: 100%;\n  overflow: hidden;\n  max-height: 0;\n\n  transition: opacity var(--system-notifications-fade-animation-duration),\n    max-height calc(var(--system-notifications-height-animation-duration) / 2) linear;\n\n  &.closing {\n    max-height: 0 !important;\n    opacity: 0;\n\n    transition: opacity var(--system-notifications-fade-animation-duration),\n      max-height var(--system-notifications-height-animation-duration) linear\n        calc(\n          var(--system-notifications-fade-animation-duration) -\n            var(--system-notifications-height-animation-duration)\n        );\n  }\n}\n\n.notification {\n  --system-notifications-background-color: var(\n    --system-notifications-info-background-color\n  );\n  --system-notifications-border-color: var(\n    --system-notifications-info-border-color\n  );\n  --system-notifications-title-color: var(\n    --system-notifications-info-title-color\n  );\n  --system-notifications-message-color: var(\n    --system-notifications-info-message-color\n  );\n  --system-notifications-close-icon-color: var(\n    --system-notifications-info-close-icon-color\n  );\n  --system-notifications-close-icon-hover-color: var(\n    --system-notifications-info-close-icon-hover-color\n  );\n\n  background-color: var(--system-notifications-background-color);\n  border: var(--system-notifications-border-width)\n    var(--system-notifications-border-style)\n    var(--system-notifications-border-color);\n\n  border-radius: var(--system-notifications-border-radius);\n  opacity: 1;\n  padding: var(--system-notifications-item-padding);\n  position: relative;\n\n  &.success {\n    --system-notifications-background-color: var(\n      --system-notifications-success-background-color\n    );\n    --system-notifications-border-color: var(\n      --system-notifications-success-border-color\n    );\n    --system-notifications-title-color: var(\n      --system-notifications-success-title-color\n    );\n    --system-notifications-message-color: var(\n      --system-notifications-success-message-color\n    );\n    --system-notifications-close-icon-color: var(\n      --system-notifications-success-close-icon-color\n    );\n    --system-notifications-close-icon-hover-color: var(\n      --system-notifications-success-close-icon-hover-color\n    );\n  }\n\n  &.warning {\n    --system-notifications-background-color: var(\n      --system-notifications-warning-background-color\n    );\n    --system-notifications-border-color: var(\n      --system-notifications-warning-border-color\n    );\n    --system-notifications-title-color: var(\n      --system-notifications-warning-title-color\n    );\n    --system-notifications-message-color: var(\n      --system-notifications-warning-message-color\n    );\n    --system-notifications-close-icon-color: var(\n      --system-notifications-warning-close-icon-color\n    );\n    --system-notifications-close-icon-hover-color: var(\n      --system-notifications-warning-close-icon-hover-color\n    );\n  }\n\n  &.error {\n    --system-notifications-background-color: var(\n      --system-notifications-error-background-color\n    );\n    --system-notifications-border-color: var(\n      --system-notifications-error-border-color\n    );\n    --system-notifications-title-color: var(\n      --system-notifications-error-title-color\n    );\n    --system-notifications-message-color: var(\n      --system-notifications-error-message-color\n    );\n    --system-notifications-close-icon-color: var(\n      --system-notifications-error-close-icon-color\n    );\n    --system-notifications-close-icon-hover-color: var(\n      --system-notifications-error-close-icon-hover-color\n    );\n  }\n}\n\n.close-icon {\n  bottom: 0;\n  top: 0;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  position: absolute;\n  right: var(--system-notifications-close-icon-spacing-right);\n\n  & > svg {\n    fill: var(--system-notifications-close-icon-color);\n    height: var(--system-notifications-close-icon-size);\n  }\n  &:hover {\n    & > svg {\n      fill: var(--system-notifications-close-icon-hover-color);\n    }\n  }\n}\n\n.title {\n  color: var(--system-notifications-title-color);\n  font-size: var(--system-notifications-title-font-size);\n  font-weight: var(--system-notifications-title-font-weight);\n}\n\n.message {\n  color: var(--system-notifications-message-color);\n  font-size: var(--system-notifications-message-font-size);\n  font-weight: var(--system-notifications-message-font-weight);\n}\n","import {\n  h,\n  Component,\n  FunctionalComponent,\n  Host,\n  State,\n  Method,\n  Element,\n  Fragment,\n  Listen,\n} from \"@stencil/core\";\nimport { SystemNotificationInterface } from \"../../../interfaces/components/messages/system-notifications/system-notifications\";\nimport CloseIcon from \"@material-design-icons/svg/round/close.svg\";\n\n/**\n * This is a component for system notifications.\n */\n@Component({\n  tag: \"rwc-system-notifications\",\n  styleUrl: \"system-notifications.scss\",\n  shadow: true,\n})\nexport class RwcSystemNotification {\n  /**\n   * The reference to the host element.\n   */\n  @Element() host!: HTMLRwcSystemNotificationsElement;\n\n  /**\n   * The reference to the notification container element.\n   */\n  private notificationContainerElement!: HTMLDivElement;\n\n  /**\n   * This state holds the notifications.\n   */\n  @State() notifications: Map<\n    SystemNotificationInterface,\n    NodeJS.Timeout | null\n  > = new Map();\n\n  /**\n   * This state is used to trigger changes.\n   */\n  @State() stateChangeTrigger: boolean = false;\n\n  /**\n   * This method gets the animation duration from the host element style.\n   */\n  private get animationDuration(): number {\n    return Number.parseInt(\n      getComputedStyle(this.host).getPropertyValue(\n        \"--system-notifications-fade-animation-duration\"\n      )\n    );\n  }\n\n  /**\n   * This method gets the close animation duration from the host element style.\n   */\n  private get heightAnimationDuration(): number {\n    return Number.parseInt(\n      getComputedStyle(this.host).getPropertyValue(\n        \"--system-notifications-height-animation-duration\"\n      )\n    );\n  }\n\n  /**\n   * Sets the max height of each of notifications wrapper to size of its content.\n   */\n  @Listen(\"resize\", { target: \"window\" })\n  onWindowResize(): void {\n    this.notificationContainerElement\n      .querySelectorAll(\".notification-wrapper\")\n      .forEach((wrapper: HTMLDivElement) => {\n        wrapper.style.maxHeight = `${wrapper.scrollHeight}px`;\n      });\n  }\n\n  /**\n   * Initialzies the timeout callbacks for any notifications existing in component.\n   */\n  public connectedCallback(): void {\n    this.notifications.clear();\n  }\n\n  /**\n   * Clears the timout callbacks.\n   */\n  public disconnectedCallback() {\n    this.notifications.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n  }\n\n  /**\n   * This method pushes a notification. Generates random key if not set.\n   * @returns {string} The notification key.\n   */\n  @Method()\n  public async pushNotification(\n    notification: SystemNotificationInterface\n  ): Promise<string> {\n    if (!notification.key) {\n      notification.key = Math.floor(\n        Math.random() * Number.MAX_SAFE_INTEGER\n      ).toString();\n    }\n\n    this.notifications.set(notification, this.initAutoRemove(notification));\n\n    if (this.forceStateChange()) {\n      await new Promise(requestAnimationFrame);\n\n      // Calculate and set the height after the browser has had a chance to render the element\n      setTimeout(() => {\n        this.updateNotificationMaxHeight(notification);\n      }, 0);\n    }\n    return notification.key;\n  }\n\n  /**\n   * This method sets notifications.\n   */\n  @Method()\n  public async setNotifications(\n    notifications: SystemNotificationInterface[]\n  ): Promise<string[]> {\n    this.clearNotifications();\n    const keys: string[] = [];\n    for (const notification of notifications) {\n      keys.push(await this.pushNotification(notification));\n    }\n\n    return keys;\n  }\n\n  /**\n   * This method removes a notification.\n   */\n  @Method()\n  public async removeNotification(index: number): Promise<void> {\n    const key = Array.from(this.notifications.keys())[index];\n    this.removeNotificationByReference(key);\n  }\n\n  /**\n   * This method clears all notifications.\n   */\n  @Method()\n  public async clearNotifications(): Promise<void> {\n    this.notifications.clear();\n    this.forceStateChange();\n  }\n\n  /**\n   * This method initializes auto removal of a notification.\n   */\n  private initAutoRemove(\n    notification: SystemNotificationInterface\n  ): NodeJS.Timeout | null {\n    this.unsetAutoRemoveByReference(notification);\n    if (notification.duration > 0) {\n      return setTimeout(() => {\n        this.removeNotificationByReference(notification);\n      }, notification.duration);\n    }\n\n    return null;\n  }\n\n  /**\n   * This method unsets auto removal of a notification by reference.\n   */\n  private unsetAutoRemoveByReference(\n    notification: SystemNotificationInterface\n  ): void {\n    const timeout = this.notifications.get(notification);\n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * This method removes a notification by reference.\n   */\n  private async removeNotificationByReference(\n    notification: SystemNotificationInterface\n  ): Promise<void> {\n    setTimeout(() => {\n      notification.closing = true;\n\n      if (this.forceStateChange()) {\n        setTimeout(() => {\n          this.handleNotificationRemove(notification);\n        }, Math.max(0, this.animationDuration - this.heightAnimationDuration));\n      }\n    }, 0);\n  }\n\n  /**\n   * Awaits end of closing animation and removes the notification from the list.\n   * @param notification The notification to remove.\n   */\n  private async handleNotificationRemove(\n    notification: SystemNotificationInterface\n  ): Promise<void> {\n    setTimeout(() => {\n      this.notifications.delete(notification);\n      this.forceStateChange();\n    }, Math.max(0, this.heightAnimationDuration));\n  }\n\n  /**\n   * Updates the max-height style attribute to the current height needed to render content.\n   * @param {SystemNotificationInterface} notification The notification to update the height for.\n   * @returns {HTMLElement} The html element of the notification.\n   */\n  private updateNotificationMaxHeight(\n    notification: SystemNotificationInterface\n  ): HTMLElement {\n    const notificationElement: HTMLElement = this.notificationContainerElement.querySelector(\n      `[data-key=\"${notification.key}\"]`\n    );\n\n    if (notificationElement) {\n      notificationElement.style.maxHeight = `${notificationElement.scrollHeight}px`;\n    }\n\n    return notificationElement;\n  }\n\n  /**\n   * This method forces a state change.\n   */\n  private forceStateChange(): boolean {\n    try {\n      this.stateChangeTrigger = !this.stateChangeTrigger;\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * This method renders the component.\n   */\n  public render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={(element: HTMLDivElement) =>\n            (this.notificationContainerElement = element)\n          }\n          class=\"container\"\n        >\n          {this.renderNotifications()}\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * This method renders notifications.\n   */\n  private renderNotifications(): FunctionalComponent[] {\n    const notificationElements: FunctionalComponent[] = [];\n    for (const [notification, _timeout] of this.notifications) {\n      notificationElements.push(\n        <div\n          class={{\n            [\"notification-wrapper\"]: true,\n            closing: notification.closing,\n          }}\n          key={notification.key}\n          data-key={notification.key}\n          onMouseEnter={() => this.unsetAutoRemoveByReference(notification)}\n          onMouseLeave={() => this.initAutoRemove(notification)}\n        >\n          <div\n            class={{\n              notification: true,\n              [notification.type ?? \"info\"]: true,\n            }}\n          >\n            {this.renderCloseIcon(notification)}\n            {notification.title && <p class=\"title\">{notification.title}</p>}\n            {notification.message && (\n              <p class=\"message\">{notification.message}</p>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return notificationElements;\n  }\n\n  /**\n   * This method renders the close icon for a notification.\n   */\n  private renderCloseIcon(\n    notification: SystemNotificationInterface\n  ): FunctionalComponent {\n    if (notification.closable) {\n      return (\n        <div\n          class=\"close-icon\"\n          innerHTML={CloseIcon}\n          onClick={() => this.removeNotificationByReference(notification)}\n        ></div>\n      );\n    }\n\n    return <Fragment></Fragment>;\n  }\n}\n"],"mappings":"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"}