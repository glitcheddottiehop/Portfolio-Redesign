import { r as registerInstance, h, a as Host, g as getElement } from './index-e9508d80.js';
import { D as DocumentUtils } from './document-utils-45dd6558.js';

const iconTextStepsCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--icon-text-steps-grid-column-gap:1.5rem;--icon-text-steps-grid-columns-row-gap:1.5rem;--icon-text-steps-card-width:10.75rem;display:block}.container{position:relative}.grid{--grid-column-gap:var(--icon-text-steps-grid-column-gap);--grid-row-gap:var(--icon-text-steps-grid-columns-row-gap)}::slotted(*){width:var(--icon-text-steps-card-width);margin-left:auto;margin-right:auto}";

const RwcIconTextSteps = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.columns = 4;
    this.autoUpdateLayout = true;
    this.autoColumnCount = 4;
  }
  onWindowResize() {
    this.updateLayout();
  }
  componentDidLoad() {
    this.updateLayout();
  }
  updateLayout() {
    if (this.autoUpdateLayout) {
      const stepCount = this.host.children.length;
      if (stepCount > 0) {
        const minCardWidth = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-card-width'));
        const gridGapSize = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-grid-column-gap'));
        const minHostSize = stepCount * minCardWidth + (stepCount - 1) * gridGapSize;
        let hostWidth = this.host.offsetWidth;
        if (typeof hostWidth === 'undefined') {
          hostWidth = window.innerWidth;
        }
        if (hostWidth >= minHostSize) {
          this.autoColumnCount = stepCount;
          this.host.classList.remove(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);
        }
        else {
          this.autoColumnCount = 1;
          this.host.classList.add(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);
        }
      }
      else {
        this.autoColumnCount = 4;
      }
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "container" }, h("rwc-grid", { class: "grid", columns: this.autoUpdateLayout ? this.autoColumnCount : this.columns }, h("slot", null)))));
  }
  get host() { return getElement(this); }
};
RwcIconTextSteps.VERTICAL_LAYOUT_CLASS = 'vertical';
RwcIconTextSteps.style = iconTextStepsCss;

export { RwcIconTextSteps as rwc_icon_text_steps };

//# sourceMappingURL=rwc-icon-text-steps.entry.js.map