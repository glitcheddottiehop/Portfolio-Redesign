import { r as registerInstance, h, a as Host, g as getElement } from './index-e9508d80.js';

const inputCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--rwc-input-background-color:#fff;--rwc-input-disabled-background-color:rgb(224, 224, 224);--rwc-input-container-border-color:rgb(224, 224, 224);--rwc-input-container-focused-border-color:rgb(224, 224, 224);--rwc-input-container-error-border-color:rgb(255, 160, 122);--rwc-input-container-border:1px solid\n    var(--rwc-input-container-border-color);--rwc-input-container-focused-border:1px solid\n    var(--rwc-input-container-focused-border-color);--rwc-input-container-border-radius:0.5rem;--rwc-input-container-box-shadow:inset 0 2px 4px 0 rgba(0, 0, 0, 0.05);--rwc-input-container-focus-box-shadow:inset 0 2px 4px 0 rgba(0, 0, 0, 0.05),\n    0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);--rwc-input-color:rgb(33, 33, 33);--rwc-input-placeholder-color:rgb(66, 66, 66);--rwc-input-font-size:1rem;--rwc-input-padding:0.25rem 0.5rem;--rwc-input-label-color:rgb(97, 97, 97);--rwc-input-label-font-size:0.875rem;--rwc-input-label-padding:0 0 0.5rem 0;--rwc-input-label-font-weight:600;--rwc-input-error-margin-top:0.125rem;--rwc-input-error-font-size:0.875rem;--rwc-input-error-color:rgb(139, 0, 0);display:block}:host(.disabled){--rwc-input-background-color:var(--rwc-input-disabled-background-color)}.input-container{background-color:var(--rwc-input-background-color);border:var(--rwc-input-container-border);border-radius:var(--rwc-input-container-border-radius);box-shadow:var(--rwc-input-container-box-shadow);cursor:text;display:flex;flex-direction:row;padding:var(--rwc-input-padding);padding-top:0;padding-bottom:0;transition:box-shadow ease-in-out 200ms, border-color ease-in-out 200ms}.input-container.focused{border:var(--rwc-input-container-focused-border);--rwc-input-container-box-shadow:var(\n    --rwc-input-container-focus-box-shadow\n  )}.input-container.error{border-color:var(--rwc-input-container-error-border-color)}.label{color:var(--rwc-input-label-color);font-size:var(--rwc-input-label-font-size);font-weight:var(--rwc-input-label-font-weight);padding:var(--rwc-input-label-padding)}.slot-container{display:flex;flex-direction:column;justify-content:center}.slot-horizontal-flex{display:flex;flex-direction:row}.input{background-color:var(--rwc-input-background-color);border:none;box-sizing:border-box;color:var(--rwc-input-color);font-size:var(--rwc-input-font-size);padding:var(--rwc-input-padding);padding-left:0;padding-right:0;width:100%;vertical-align:text-top}.input::placeholder{color:var(--rwc-input-placeholder-color)}.input:focus,.input:focus-visible{border:none;outline:none}.input.left-slot{padding-left:0.25rem}.input.right-slot{padding-right:0.25rem}.input:-webkit-autofill,.input:-webkit-autofill:hover,.input:-webkit-autofill:focus,.input:-webkit-autofill:active,.input:-internal-autofill-previewed,.input:-internal-autofill-selected{background-color:var(--rwc-input-background-color);-webkit-text-fill-color:var(--rwc-input-color);-webkit-background-clip:text}.error-text{color:var(--rwc-input-error-color);margin:var(--rwc-input-error-margin-top) 0 0 0;font-size:var(--rwc-input-error-font-size)}";

const RwcInput = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.leftSlot = undefined;
    this.rightSlot = undefined;
    this.name = "";
    this.autoComplete = "on";
    this.focused = false;
    this.value = "";
    this.placeholder = "";
    this.type = "text";
    this.validators = [];
    this.manualValidation = false;
    this.disabled = false;
    this.label = "";
    this.errors = [];
  }
  componentWillRender() {
    this.host.tabIndex = 0;
  }
  onFocus() {
    var _a;
    if (!this.disabled) {
      this.focused = true;
      this.clearErrors();
      (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }
  onBlur() {
    this.focused = false;
    if (!this.manualValidation) {
      this.validate();
    }
  }
  onInput() {
    this.value = this.inputElement.value;
  }
  async validate() {
    this.setErrors([]);
    this.validators.forEach((validator) => {
      if (!validator.validate(this.value)) {
        this.errors.push(validator.getMessage());
      }
    });
    return this.errors.length === 0;
  }
  async clearErrors() {
    this.setErrors([]);
  }
  async setErrors(errors) {
    this.errors = errors;
  }
  render() {
    var _a, _b;
    return (h(Host, { class: {
        disabled: this.disabled,
      } }, h("label", { htmlFor: this.name, class: "label", style: {
        display: this.name ? "block" : "none",
      } }, this.label), h("div", { class: {
        "input-container": true,
        focused: this.focused,
        error: this.errors.length > 0,
      } }, h("div", { class: "slot-container" }, h("div", { class: "slot-horizontal-flex" }, h("slot", { name: "left", ref: (element) => (this.leftSlot = element) }))), h("input", { id: this.name, class: {
        input: true,
        "left-slot": ((_a = this.leftSlot) === null || _a === void 0 ? void 0 : _a.assignedElements().length) > 0,
        "right-slot": ((_b = this.rightSlot) === null || _b === void 0 ? void 0 : _b.assignedElements().length) > 0,
      }, name: this.name, autoComplete: this.autoComplete, type: this.type, value: this.value, placeholder: this.placeholder, disabled: this.disabled ? true : null, ref: (element) => (this.inputElement = element) }), h("div", { class: "slot-container" }, h("div", { class: "slot-horizontal-flex" }, h("slot", { name: "right", ref: (element) => (this.rightSlot = element) })))), h("p", { class: "error-text" }, this.errors[0] || "")));
  }
  get host() { return getElement(this); }
};
RwcInput.style = inputCss;

export { RwcInput as rwc_input };

//# sourceMappingURL=rwc-input.entry.js.map