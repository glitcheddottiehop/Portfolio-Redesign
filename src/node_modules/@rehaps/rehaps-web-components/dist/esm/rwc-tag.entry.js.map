{"file":"rwc-tag.entry.js","mappings":";;;;AAAA,MAAM,MAAM,GAAG,m+EAAm+E;;MCSr+E,MAAM;;;;gBAIM,EAAE;sBAKK,KAAK;oBAKP,KAAK;qBAKJ,KAAK;;EAUlC,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WACE,KAAK,EAAG;QACN,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;OACxB,IAED,WAAK,KAAK,EAAC,MAAM,IACf,eAAa,CACT,EACJ,IAAI,CAAC,iBAAiB,EAAE,CACtB,CACD,EACP;GACH;EAKO,SAAS;IACf,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;GAC5B;EAKO,iBAAiB;IACvB,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,QACE,WAAK,KAAK,EAAC,cAAc,EACvB,OAAO,EAAG,MAAM,IAAI,CAAC,SAAS,EAAE,IAEhC,YAAM,IAAI,EAAC,MAAM,IACb,IAAI,CAAC,iBAAiB,EAAE,CACrB,CACH,EACP;KACF;GACF;EAKO,iBAAiB;IACvB,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,QACE,WAAK,KAAK,EAAC,MAAM,EAAC,GAAG,EAAG,IAAI,CAAC,IAAI,EAAG,GAAG,EAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAS,EACzF;KACF;IACD,QACE,WAAK,SAAS,EAAG,KAAK,EAAG,KAAK,EAAC,eAAe,GAAO,EACtD;GACF;;;;;;","names":[],"sources":["src/components/basic/tag/tag.scss?tag=rwc-tag&encapsulation=shadow","src/components/basic/tag/tag.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n  * @prop --tag-clickable-background-color: The background color of clickable tag.\n  * @prop --tag-clickable-hover-background-color: The background color of clickable tag on hover.\n  * @prop --tag-clickable-active-background-color: The backgrund color of clickable tag on mouse down.\n  * @prop --tag-border: The border of the tag.\n  * @prop --tag-font-size: The font size of the tag.\n  * @prop --tag-hover-text-color: The text color of the tag on hover.\n  * @prop --tag-border-radius: The border radius of the tag.\n  * @prop --tag-padding: The top-bottom and left-right padding for tag.\n  * @prop --tag-box-shadow: The shadow of the tag.\n  * @prop --tag-icon-size: The size of the icon of the tag.\n  * @prop --tag-width: The width of the tag.\n  * @prop --tag-background-color: The background color of the tag.\n  * @prop --tag-text-color: The text color of the tag.\n  * @prop --tag-transition-duration: The duration of transition on box shadow of the tag.\n  * @prop display: The display mode of the host element.\n  */\n  --tag-border: 2px solid #{$rwc-color-green-300};\n  --tag-border-radius: #{$rwc-spacing--xl};\n\n  --tag-box-shadow: #{$rwc-box-shadow-md};\n\n  --tag-background-color: #{$rwc-color-green-300};\n\n  --tag-clickable-background-color: #{$rwc-color-foundation-white};\n  --tag-clickable-hover-background-color: #{rgba($rwc-color-green-300, 0.06)};\n  --tag-clickable-active-background-color: #{rgba($rwc-color-green-300, 0.10)};\n\n  --tag-font-size: #{$rwc-font-size-label-md};\n  --tag-icon-size: #{$rwc-font-size-body-md};\n  --tag-icon-margin: 0 0 0 #{$rwc-spacing--2xs};\n  --tag-hover-text-color: #{$rwc-color-green-300};\n  --tag-text-color: #{$rwc-color-text-primary};\n\n  --tag-padding: #{$rwc-spacing--2xs} #{$rwc-spacing--xs};\n  --tag-width: fit-content;\n\n  --tag-transition-duration: 200ms;\n\n  display: block;\n}\n\n.container {\n  border: var(--tag-border);\n  align-items: center;\n  border-radius: var(--tag-border-radius);\n  display: flex;\n  width: var(--tag-width);\n  padding: var(--tag-padding);\n  background-color: var(--tag-background-color);\n  color: var(--tag-text-color);\n  font-size: var(--tag-font-size);\n}\n\n.clickable {\n  color: var(--tag-border);\n  transition: box-shadow var(--tag-transition-duration) ease;\n  background-color: var(--tag-clickable-background-color);\n\n  &:hover {\n    background-color: var(--tag-clickable-hover-background-color);\n    box-shadow: var(--tag-box-shadow);\n    color: var(--tag-hover-text-color);\n    cursor: pointer;\n\n    .icon-wrapper {\n      svg {\n        path {\n          fill: var(--tag-hover-text-color);\n        }\n      }\n    }\n  }\n\n  &:active {\n    background-color: var(--tag-clickable-active-background-color);\n  }\n\n  &.selected {\n    background-color: var(--tag-background-color);\n    color: var(--tag-text-color);\n    cursor: pointer;\n\n    .icon-wrapper {\n      svg {\n        path {\n          fill: var(--tag-text-color);\n        }\n      }\n    }\n  }\n\n  .icon-wrapper {\n    svg {\n      path {\n        fill: var(--tag-text-color);\n      }\n    }\n  }\n}\n\n.icon-wrapper {\n  align-self: center;\n  flex-shrink: 0;\n  display: flex;\n  cursor: pointer;\n  margin: var(--tag-icon-margin);\n\n  svg {\n    height: 100%;\n    width: 100%;\n\n    path {\n      fill: var(--tag-text-color);\n    }\n  }\n}\n\n.icon {\n  height: var(--tag-icon-size);\n  width: var(--tag-icon-size);\n}\n","import { Component, h, Prop, Host, FunctionalComponent, Event, EventEmitter } from '@stencil/core';\nimport Close from '@material-design-icons/svg/round/close.svg';\nimport { FileUtils } from '../../../utils/data/file';\n\n@Component({\n  tag: 'rwc-tag',\n  styleUrl: 'tag.scss',\n  shadow: true\n})\nexport class RwcTag {\n  /**\n   * Path to the icon.\n   */\n  @Prop() icon: string = '';\n\n  /**\n   * Render icon.\n   */\n  @Prop() renderIcon: boolean = false;\n\n  /**\n   * Set tag selected.\n   */\n  @Prop() selected: boolean = false;\n\n  /**\n   * Set tag to clickable.\n   */\n  @Prop() clickable: boolean = false;\n\n  /**\n   * Event fired when the delete icon is clicked.\n   */\n  @Event({ eventName: 'deleteTag ' }) deleteTagEvent: EventEmitter<void>;\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          class={ {\n            container: true,\n            clickable: this.clickable,\n            selected: this.selected\n          } }\n        >\n          <div class=\"text\">\n            <slot></slot>\n          </div>\n          { this.renderIconWrapper() }\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Fires the deleteTag event.\n   */\n  private deleteTag(): void {\n    this.deleteTagEvent.emit();\n  }\n\n  /**\n   * Renders the icon wrapper.\n   */\n  private renderIconWrapper(): FunctionalComponent {\n    if (this.renderIcon) {\n      return (\n        <div class=\"icon-wrapper\"\n          onClick={ () => this.deleteTag() }\n        >\n          <slot name=\"icon\">\n            { this.renderIconElement() }\n          </slot>\n        </div>\n      )\n    }\n  }\n\n  /**\n   * Renders the icon element.\n   */\n  private renderIconElement(): FunctionalComponent {\n    if (this.icon) {\n      return (\n        <img class=\"icon\" src={ this.icon } alt={ FileUtils.getCleanFileName(this.icon) }></img>\n      )\n    }\n    return (\n      <div innerHTML={ Close } class=\"icon svg-icon\"></div>\n    )\n  }\n}\n"],"version":3}