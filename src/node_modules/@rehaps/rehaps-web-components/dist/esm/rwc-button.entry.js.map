{"file":"rwc-button.entry.js","mappings":";;;;;;;AAAA,MAAM,SAAS,GAAG,4rIAA4rI;;MCejsI,SAAS;;;qBAUQ,EAAE;yBAKG,KAAK;oBAKX,EAAE;wBAKG,KAAK;gBAKO,QAAQ;iBAKN,SAAS;iBAK1B,MAAM;kBAKT,KAAK;wBAKC,IAAI;;EAMpC,aAAa,CAAC,KAAiB;IAC7B,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAC1B;GACF;EAKO,YAAY,CAAC,KAAiB;IACpC,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;IACjG,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,CAAC;IAE5B,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,GAAI,QAAS,IAAI,CAAC;IAC7D,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,GAAI,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAE,IAAI,CAAC;IAC5H,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAI,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAE,IAAI,CAAC;IAC1H,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE/B,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAE9D,IAAI,MAAM,EAAE;MACV,MAAM,CAAC,MAAM,EAAE,CAAC;KACjB;IAED,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;GAC3C;EAKD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WACE,GAAG,EAAG,CAAC,OAAoB,KAAK,IAAI,CAAC,gBAAgB,GAAG,OAAO,EAC/D,KAAK,EAAG;QACN,SAAS,EAAE,IAAI;QACf,MAAM,EAAE,IAAI,CAAC,YAAY;QACzB,CAAC,QAAS,IAAI,CAAC,IAAK,EAAE,GAAG,IAAI;QAC7B,CAAC,SAAU,IAAI,CAAC,KAAM,EAAE,GAAG,IAAI;QAC/B,CAAC,SAAU,IAAI,CAAC,KAAM,EAAE,GAAG,IAAI;OAChC,IACD,WAAK,KAAK,EAAC,cAAc,IACrB,IAAI,CAAC,qBAAqB,EAAE,CAC1B,EACN,WAAK,KAAK,EAAC,MAAM,IACf,eAAa,CACT,EACN,WAAK,KAAK,EAAC,cAAc,IACrB,IAAI,CAAC,sBAAsB,EAAE,CAC3B,CACF,CACD,EACP;GACH;EAKO,sBAAsB;IAC5B,IAAI,IAAI,CAAC,aAAa,EAAE;MACtB,QACE,EAAC,QAAQ,QACP,YAAM,IAAI,EAAC,MAAM,IACb,IAAI,CAAC,eAAe,EAAE,CACnB,CACG,EACb;KACF;GACF;EAKO,qBAAqB;IAC3B,IAAI,IAAI,CAAC,YAAY,EAAE;MACrB,QACE,EAAC,QAAQ,QACP,YAAM,IAAI,EAAC,MAAM,IACb,IAAI,CAAC,cAAc,EAAE,CAClB,CACG,EACb;KACF;GACF;EAKO,eAAe;IACrB,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,QACE,EAAC,QAAQ,QACP,WAAK,KAAK,EAAC,MAAM,EAAC,GAAG,EAAG,IAAI,CAAC,SAAS,EAAG,GAAG,EAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAS,CACzF,EACZ;KACF;IACD,QACE,EAAC,QAAQ,QACP,WAAK,SAAS,EAAG,YAAY,EAAG,KAAK,EAAC,eAAe,GAAO,CACnD,EACZ;GACF;EAKO,cAAc;IACpB,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,QACE,EAAC,QAAQ,QACP,WAAK,KAAK,EAAC,MAAM,EAAC,GAAG,EAAG,IAAI,CAAC,QAAQ,EAAG,GAAG,EAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAS,CACvF,EACZ;KACF;IACD,IAAI,IAAI,CAAC,YAAY,EAAE;MACrB,QACE,EAAC,QAAQ,QACP,WAAK,SAAS,EAAG,WAAW,EAAG,KAAK,EAAC,eAAe,GAC9C,CACG,EACZ;KACF;GACF;;;;;;","names":[],"sources":["src/components/basic/button/button.scss?tag=rwc-button&encapsulation=shadow","src/components/basic/button/button.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n  * @prop --button-border-width: The border width of outline button.\n  * @prop --button-border-radius: The border radius of the button.\n  * @prop --button-border-color: The color of the border of the button.\n  * @prop --button-padding: The top-bottom and left-right padding for button.\n  * @prop --button-box-shadow: The shadow of the button.\n  * @prop --button-icon-size: The size of the icon of the button.\n  * @prop --button-icon-color: The color of the icon of the button.\n  * @prop --button-width: The width of the button.\n  * @prop --button-background-color: The background color of the button.\n  * @prop --button-text-color: The color of the text of the button.\n  * @prop --button-background-color-hover: The color of the button on hover.\n  * @prop --button-outline-color: The coolor of the outline of the button.\n  * @prop --button-outline-style: The style of the outline of the button.\n  * @prop --button-background-color-type-outline-hover: The background color of the outline type button on hover.\n  * @prop --button-ripple-animation: The click animation of the button.\n  */\n  --button-border-width: 2px;\n  --button-border-radius: #{$rwc-spacing--2xs};\n  --button-border-color: #{$rwc-color-green-700};\n  --button-padding: #{$rwc-spacing--xs} #{$rwc-spacing--sm};\n  --button-box-shadow: #{$rwc-box-shadow-md};\n  --button-icon-size: 1.5rem;\n  --button-icon-color: #{$rwc-color-green-700};\n  --button-width: fit-content;\n  --button-background-color: #{$rwc-color-green-700};\n  --button-text-color: #{$rwc-color-text-primary};\n  --button-background-color-hover: #{$rwc-color-green-800};\n  --button-outline-color: #{$rwc-color-outline-default};\n  --button-outline-style: solid;\n  --button-background-color-type-outline-hover: #{$rwc-color-grey-700};\n  --button-ripple-animation: #{$rwc-color-ripple};\n\n  display: block;\n}\n\n.theme-blue {\n  --button-background-color: #{$rwc-color-blue-500};\n  --button-border-color: #{$rwc-color-blue-500};\n  --button-text-color: #{$rwc-color-grey-100};\n  --button-background-color-hover: #{$rwc-color-blue-600};\n  --button-outline-color: #{$rwc-color-outline-blue};\n  --button-red-outline-style: var(--button-outline-style);\n}\n\n.theme-dark {\n  --button-background-color: #{$rwc-color-grey-900};\n  --button-border-color: #{$rwc-color-grey-900};\n  --button-text-color: #{$rwc-color-grey-100};\n  --button-background-color-hover: #{$rwc-color-grey-800};\n  --button-outline-color: #{$rwc-color-outline-dark};\n  --button-dark-outline-style: var(--button-outline-style);\n}\n\n.theme-red {\n  --button-background-color: #{$rwc-color-red-700};\n  --button-border-color: #{$rwc-color-red-700};\n  --button-text-color: #{$rwc-color-grey-100};\n  --button-background-color-hover: #{$rwc-color-red-800};\n  --button-outline-color: #{$rwc-color-outline-red};\n  --button-red-outline-style: var(--button-outline-style);\n}\n\n.theme-orange {\n  --button-background-color: #{$rwc-color-orange-600};\n  --button-border-color: #{$rwc-color-orange-600};\n  --button-text-color: #{$rwc-color-grey-100};\n  --button-background-color-hover: #{$rwc-color-orange-700};\n  --button-outline-color: #{$rwc-color-outline-orange};\n  --button-red-outline-style: var(--button-outline-style);\n}\n\n.container {\n  position: relative;\n  overflow: hidden;\n  align-items: center;\n  border-radius: var(--button-border-radius);\n  display: flex;\n  padding: var(--button-padding);\n  transition: border-color 400ms ease, background-color 400ms ease, color 400ms ease, fill 400ms ease;\n  cursor: pointer;\n}\n\n.ripple {\n  position: absolute;\n  border-radius: 50%;\n  transform: scale(0);\n  animation: ripple 600ms linear;\n  background-color: var(--button-ripple-animation);\n}\n\n.type-filled {\n  background-color: var(--button-background-color);\n  border-color: var(--button-border-color);\n  color: var(--button-text-color);\n  transition: border-color 400ms ease, background-color 400ms ease;\n\n  &:hover {\n    background-color: var(--button-background-color-hover);\n    border-color: var(--button-background-color-hover);\n  }\n\n  &:active {\n    outline-color: var(--button-outline-color);\n    outline-style: var(--button-outline-style);\n  }\n}\n\n.type-outline {\n  border-color: var(--button-border-color);\n  color: var(--button-border-color);\n  transition: color 200ms ease, background-color 200ms ease;\n\n  .icon-wrapper {\n    svg {\n      path {\n        fill: var(--button-border-color);\n        transition: fill 200ms ease;\n      }\n    }\n  }\n\n  &:hover {\n    background-color: var(--button-background-color);\n    color: var(--button-text-color);\n\n    .icon-wrapper {\n      svg {\n        path {\n          fill: var(--button-text-color);\n        }\n      }\n    }\n  }\n\n  &:active {\n    outline-color: var(--button-outline-color);\n    outline-style: var(--button-outline-style);\n  }\n}\n\n.shadow {\n  box-shadow: var(--button-box-shadow);\n}\n\n.icon-wrapper {\n  align-self: center;\n  flex-shrink: 0;\n  display: flex;\n\n  svg {\n    height: 100%;\n    width: 100%;\n\n    path {\n      fill: var(--button-text-color);\n    }\n  }\n}\n\n.icon {\n  height: var(--button-icon-size);\n  width: var(--button-icon-size);\n}\n\n//Set border\n.type-filled,\n.type-outline {\n  border-width: var(--button-border-width);\n  border-style: solid;\n}\n\n.width-auto {\n  width: var(--button-width);\n}\n\n.width-full {\n  width: unset;\n  justify-content: space-between;\n}\n\n@keyframes ripple {\n  to {\n    transform: scale(4);\n    opacity: 0;\n  }\n}\n","import { Component, h, Prop, Host, FunctionalComponent, Fragment, Listen } from '@stencil/core';\nimport ChevronRight from '@material-design-icons/svg/outlined/chevron_right.svg';\nimport ChevronLeft from '@material-design-icons/svg/outlined/chevron_left.svg';\nimport { ButtonTheme, ButtonType, ButtonWidth } from '../../../interfaces/components/basic/button/button';\nimport { FileUtils } from '../../../utils/data/file';\n\n/**\n * @slot icon - Slot for the custom icon html.\n * @slot default - Slot for the content of the button\n */\n@Component({\n  tag: 'rwc-button',\n  styleUrl: 'button.scss',\n  shadow: true\n})\nexport class RwcButton {\n\n  /**\n   * The reference to the container element.\n   */\n  private containerElement: HTMLElement;\n\n  /**\n   * Path to the right icon.\n   */\n  @Prop() iconRight: string = '';\n\n  /**\n   * Set right icon visible.\n   */\n  @Prop() showIconRight: boolean = false;\n\n  /**\n  * Path to the left icon.\n  */\n  @Prop() iconLeft: string = '';\n\n  /**\n  * Set left icon visible.\n  */\n  @Prop() showIconLeft: boolean = false;\n\n  /**\n  * Set button type.\n  */\n  @Prop({ reflect: true }) type: ButtonType = 'filled';\n\n  /**\n  * Set button theme.\n  */\n  @Prop({ reflect: true }) theme: ButtonTheme = 'default';\n\n  /**\n  * Set button width.\n  */\n  @Prop() width: ButtonWidth = 'auto';\n\n  /**\n   * Set animation.\n   */\n  @Prop() ripple: boolean = false;\n\n  /**\n   * Set rendering of box-shadow.\n   */\n  @Prop() renderShadow: boolean = true;\n\n  /**\n   * Creates ripple animation on click.\n   */\n  @Listen('click')\n  onButtonClick(event: MouseEvent): void {\n    if (this.ripple) {\n      this.createRipple(event);\n    }\n  }\n\n  /**\n   * Renders the ripple animation.\n   */\n  private createRipple(event: MouseEvent): void {\n    const circle = document.createElement('span');\n    const diameter = Math.max(this.containerElement.clientWidth, this.containerElement.clientHeight);\n    const radius = diameter / 2;\n\n    circle.style.width = circle.style.height = `${ diameter }px`;\n    circle.style.left = `${ event.clientX - (this.containerElement.getBoundingClientRect().left + window.scrollX + radius) }px`;\n    circle.style.top = `${ event.clientY - (this.containerElement.getBoundingClientRect().top + window.scrollY + radius) }px`;\n    circle.classList.add('ripple');\n\n    const ripple = this.containerElement.querySelector('.ripple');\n\n    if (ripple) {\n      ripple.remove();\n    }\n\n    this.containerElement.appendChild(circle);\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={ (element: HTMLElement) => this.containerElement = element }\n          class={ {\n            container: true,\n            shadow: this.renderShadow,\n            [`type-${ this.type }`]: true,\n            [`theme-${ this.theme }`]: true,\n            [`width-${ this.width }`]: true,\n          } }>\n          <div class=\"icon-wrapper\">\n            { this.renderLeftIconWrapper() }\n          </div>\n          <div class=\"text\">\n            <slot></slot>\n          </div>\n          <div class=\"icon-wrapper\">\n            { this.renderRightIconWrapper() }\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the right icon wrapper.\n   */\n  private renderRightIconWrapper(): FunctionalComponent {\n    if (this.showIconRight) {\n      return (\n        <Fragment>\n          <slot name=\"icon\">\n            { this.renderRightIcon() }\n          </slot>\n        </Fragment >\n      )\n    }\n  }\n\n  /**\n  * Renders the left icon wrapper.\n  */\n  private renderLeftIconWrapper(): FunctionalComponent {\n    if (this.showIconLeft) {\n      return (\n        <Fragment>\n          <slot name=\"icon\">\n            { this.renderLeftIcon() }\n          </slot>\n        </Fragment >\n      )\n    }\n  }\n\n  /**\n   * Renders the right icon element.\n   */\n  private renderRightIcon(): FunctionalComponent {\n    if (this.iconRight) {\n      return (\n        <Fragment>\n          <img class=\"icon\" src={ this.iconRight } alt={ FileUtils.getCleanFileName(this.iconRight) }></img>\n        </Fragment>\n      )\n    }\n    return (\n      <Fragment>\n        <div innerHTML={ ChevronRight } class=\"icon svg-icon\"></div>\n      </Fragment>\n    )\n  }\n\n  /**\n   * Renders the left icon element.\n   */\n  private renderLeftIcon(): FunctionalComponent {\n    if (this.iconLeft) {\n      return (\n        <Fragment>\n          <img class=\"icon\" src={ this.iconLeft } alt={ FileUtils.getCleanFileName(this.iconLeft) }></img>\n        </Fragment>\n      )\n    }\n    if (this.showIconLeft) {\n      return (\n        <Fragment>\n          <div innerHTML={ ChevronLeft } class=\"icon svg-icon\">\n          </div>\n        </Fragment>\n      )\n    }\n  }\n}\n"],"version":3}