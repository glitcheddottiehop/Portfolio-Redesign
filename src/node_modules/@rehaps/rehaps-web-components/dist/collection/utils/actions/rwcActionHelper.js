export class RWCActionHelper {
  static getLastComponentId() {
    return RWCActionHelper.lastComponentId++;
  }
  static getDefaultComponentKey(name) {
    return `${RWCActionHelper.RWC_ACTION_PREFIX}-${name}-${RWCActionHelper.getLastComponentId()}`;
  }
  static bindRWCActions(component, host, actions, rwcKey, eventName = 'click') {
    if (actions.length > 0) {
      const querySelector = actions.map(action => `[data-${RWCActionHelper.RWC_ACTION_PREFIX}-${action}='${rwcKey}']`).join(', ');
      document.querySelectorAll(querySelector).forEach(element => {
        actions.forEach(action => {
          if (element.getAttribute(`data-${RWCActionHelper.RWC_ACTION_PREFIX}-${action}`)) {
            const callback = this.createCallback(component, host, action);
            component.eventManager.registerEventListener(element, eventName, callback);
          }
        });
      });
    }
  }
  static createCallback(component, host, action) {
    return (event) => {
      var _a;
      if (((_a = event.detail) === null || _a === void 0 ? void 0 : _a.origin) === host) {
        return;
      }
      component[action].call(component, event);
    };
  }
}
RWCActionHelper.RWC_ACTION_PREFIX = 'rwc';
RWCActionHelper.lastComponentId = 1;
//# sourceMappingURL=rwcActionHelper.js.map
