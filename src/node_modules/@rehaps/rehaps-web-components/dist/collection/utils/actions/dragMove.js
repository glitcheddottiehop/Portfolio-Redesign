import { DragState } from "./../../interfaces/data/dragState";
import { ScrollPosition } from "./../../interfaces/data/scrollPosition";
export class DragMove {
  get dragging() {
    return this.state.dragging && this.state.moving;
  }
  constructor(element) {
    this.position = new ScrollPosition();
    this.state = new DragState();
    this.element = null;
    this.initialCursorStyle = '';
    this.dragTimeout = null;
    this.mouseDownHandler = (event) => {
      if (event.composedPath().includes(this.element)) {
        this.startDrag();
        this.position = {
          left: this.element.scrollLeft,
          top: this.element.scrollTop,
          x: event.clientX,
          y: event.clientY
        };
        document.addEventListener('mousemove', this.mouseMoveHandler);
        document.addEventListener('mouseup', this.mouseUpHandler);
      }
    };
    this.mouseMoveHandler = (event) => {
      const dx = event.clientX - this.position.x;
      const dy = event.clientY - this.position.y;
      if (dx !== 0 || dy !== 0) {
        this.state.moving = true;
      }
      this.element.scrollTop = this.position.top - dy;
      this.element.scrollLeft = this.position.left - dx;
    };
    this.mouseUpHandler = () => {
      document.removeEventListener('mousemove', this.mouseMoveHandler);
      document.removeEventListener('mouseup', this.mouseUpHandler);
      this.element.style.cursor = this.initialCursorStyle;
      this.stopDrag();
    };
    this.init(element);
  }
  init(element) {
    this.element = element;
    this.initialCursorStyle = element.style.cursor || '';
    this.element.addEventListener('mousedown', this.mouseDownHandler);
  }
  destroy() {
    this.element.removeEventListener('mouseDown', this.mouseDownHandler);
  }
  startDrag() {
    this.stopDrag();
    this.dragTimeout = setTimeout(() => {
      this.state.dragging = true;
    }, DragMove.DRAG_STATE_DELAY);
  }
  stopDrag() {
    if (this.dragTimeout !== null) {
      clearTimeout(this.dragTimeout);
      this.dragTimeout = null;
    }
    if (this.state.dragging || this.state.moving) {
      setTimeout(() => {
        this.state.dragging = false;
        this.state.moving = false;
      }, 1);
    }
  }
}
DragMove.DRAG_STATE_DELAY = 200;
//# sourceMappingURL=dragMove.js.map
