{"version":3,"file":"rwcActionHelper.js","sourceRoot":"","sources":["../../../../src/utils/actions/rwcActionHelper.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,eAAe;EAc1B,MAAM,CAAC,kBAAkB;IACvB,OAAO,eAAe,CAAC,eAAe,EAAE,CAAC;EAC3C,CAAC;EAKD,MAAM,CAAC,sBAAsB,CAAC,IAAY;IACxC,OAAO,GAAG,eAAe,CAAC,iBAAiB,IAAI,IAAI,IAAI,eAAe,CAAC,kBAAkB,EAAE,EAAE,CAAC;EAChG,CAAC;EAKD,MAAM,CAAC,cAAc,CAAC,SAAwB,EAAE,IAAiB,EAAE,OAAsB,EAAE,MAAc,EAAE,YAAoB,OAAO;IACpI,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;MACtB,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,SAAU,eAAe,CAAC,iBAAkB,IAAK,MAAO,KAAM,MAAO,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MAClI,QAAQ,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QACzD,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;UACvB,IAAI,OAAO,CAAC,YAAY,CAAC,QAAS,eAAe,CAAC,iBAAkB,IAAK,MAAO,EAAE,CAAC,EAAE;YACnF,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YAC9D,SAAS,CAAC,YAAY,CAAC,qBAAqB,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;WAC5E;QACH,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC;KACJ;EACH,CAAC;EAKD,MAAM,CAAC,cAAc,CAAC,SAAwB,EAAE,IAAiB,EAAE,MAAc;IAC/E,OAAO,CAAC,KAA0B,EAAE,EAAE;;MACpC,IAAI,CAAA,MAAC,KAAqB,CAAC,MAAM,0CAAE,MAAM,MAAK,IAAI,EAAE;QAClD,OAAO;OACR;MACD,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAA;EACH,CAAC;;AAhDM,iCAAiB,GAAG,KAAK,CAAC;AAK1B,+BAAe,GAAW,CAAC,CAAC","sourcesContent":["import { ISubscribable } from \"../../interfaces/actions/ISubscribable\";\n\nexport class RWCActionHelper {\n  /**\n   * The prefix used for automatic action binding on HTML elements.\n   */\n  static RWC_ACTION_PREFIX = 'rwc';\n\n  /**\n   * Stores the index of the last initialized component with the auto action binding.\n   */\n  static lastComponentId: number = 1;\n\n  /**\n   * Gets the last initialized component with auto action binding.\n   */\n  static getLastComponentId(): number {\n    return RWCActionHelper.lastComponentId++;\n  }\n  \n  /**\n   * Gets the default key for the component using passed name and the next available component index.\n   */\n  static getDefaultComponentKey(name: string): string {\n    return `${RWCActionHelper.RWC_ACTION_PREFIX}-${name}-${RWCActionHelper.getLastComponentId()}`;\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click.\n   */\n  static bindRWCActions(component: ISubscribable, host: HTMLElement, actions: Array<string>, rwcKey: string, eventName: string = 'click'): void {\n    if (actions.length > 0) {\n      const querySelector = actions.map(action => `[data-${ RWCActionHelper.RWC_ACTION_PREFIX }-${ action }='${ rwcKey }']`).join(', ');\n      document.querySelectorAll(querySelector).forEach(element => {\n        actions.forEach(action => {\n          if (element.getAttribute(`data-${ RWCActionHelper.RWC_ACTION_PREFIX }-${ action }`)) {\n            const callback = this.createCallback(component, host, action);\n            component.eventManager.registerEventListener(element, eventName, callback);\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Creates a callback method for the passed action of the passed component.\n   */\n  static createCallback(component: ISubscribable, host: HTMLElement, action: string): (event: Event | CustomEvent) => void {\n    return (event: Event | CustomEvent) => {\n      if ((event as CustomEvent).detail?.origin === host) {\n        return;\n      }\n      component[action].call(component, event);\n    }\n  }\n}\n"]}