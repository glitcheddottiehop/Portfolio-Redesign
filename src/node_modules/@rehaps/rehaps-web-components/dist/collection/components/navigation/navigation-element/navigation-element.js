import { Fragment, h, Host } from "@stencil/core";
import ChevronRight from "@material-design-icons/svg/round/chevron_right.svg";
import ExpandMore from "@material-design-icons/svg/round/expand_more.svg";
export class RwcNavigationElement {
  constructor() {
    this.link = RwcNavigationElement.NO_NAVIGATION_HREF;
    this.openMode = 'hover';
    this.subNavigationType = 'vertical';
    this.subNavigationPosition = 'bottom';
    this.renderDividers = false;
    this.renderIcon = true;
    this.preventNavigation = false;
    this.iconLeft = '';
    this.iconRight = '';
    this.dropdownOpen = false;
  }
  get hasSubNavigation() {
    return Boolean(this.host.querySelector('[slot="sub-navigation"]'));
  }
  onDropdownOpen(event) {
    if (event.target === this.host) {
      this.dropdownOpen = true;
    }
  }
  onDropdownClose(event) {
    if (event.target === this.host) {
      this.dropdownOpen = false;
    }
  }
  componentWillLoad() {
    if (this.subNavigationType === 'accordion') {
      this.openMode = 'manual';
    }
  }
  handleNavigation(event) {
    if (this.preventNavigation) {
      event.preventDefault();
    }
    const closestAnchor = event.composedPath()[0].closest('a');
    if (closestAnchor) {
      this.navigate.emit(closestAnchor.href);
    }
  }
  getNavigationElementHref() {
    if (this.openMode === 'hover' &&
      this.subNavigationType !== 'accordion' ||
      !this.hasSubNavigation) {
      return this.link;
    }
    return RwcNavigationElement.NO_NAVIGATION_HREF;
  }
  render() {
    return (h(Host, null, h("div", { class: {
        container: true,
        [this.openMode]: true,
        divider: this.renderDividers,
        [`sub-nav-type-${this.subNavigationType}`]: true,
        'dropdown-open': this.dropdownOpen
      } }, this.renderNavigationElement())));
  }
  renderNavigationElement() {
    if (this.subNavigationType === 'accordion') {
      return (h("rwc-accordion", { class: {
          'sub-navigation-accordion': true,
          'has-sub-navigation': this.hasSubNavigation
        }, renderDivider: this.renderDividers, open: false, renderIcon: this.renderIcon && this.hasSubNavigation }, this.renderLinkElement({ slot: 'heading' })));
    }
    return this.renderLinkElement({ slot: null });
  }
  renderLinkElement(params) {
    return (h(Fragment, null, h("a", { href: this.getNavigationElementHref(),
      'slot': params.slot || '', onClick: (event) => this.handleNavigation(event) }, h("div", { class: "link" }, h("slot", { name: "before" }, this.renderLeftIcon()), h("div", { class: "text" }, h("slot", null)), h("slot", { name: "after" }, this.renderRightIcon()))), this.renderSubNavigationContainer()));
  }
  renderSubNavigationContainer() {
    if (this.hasSubNavigation) {
      if (this.subNavigationType === 'accordion') {
        return (h("rwc-navigation", { class: "sub-navigation", type: this.subNavigationType }, h("slot", { name: "sub-navigation" })));
      }
      else {
        return (h("rwc-dropdown", { class: "sub-navigation-dropdown", openMode: this.openMode, mode: 'fixed', position: this.subNavigationPosition, size: "auto" }, h("slot", { name: "sub-navigation" })));
      }
    }
    return h(Fragment, null);
  }
  renderLeftIcon() {
    if (this.iconLeft) {
      return (h("img", { src: this.iconLeft, alt: "Left icon", class: "icon icon icon-left" }));
    }
    return h(Fragment, null);
  }
  renderRightIcon() {
    if (this.iconRight) {
      return (h("img", { src: this.iconRight, alt: "Right icon", class: {
          icon: true,
          ['icon-right']: true,
          rotate: this.subNavigationPosition === 'bottom' && this.subNavigationType !== 'accordion'
        } }));
    }
    else if (this.subNavigationType === 'vertical' && this.renderIcon && this.hasSubNavigation) {
      return (h("div", { innerHTML: this.subNavigationPosition === 'side' ? ChevronRight : ExpandMore, class: {
          icon: true,
          ['icon-right']: true,
          rotate: this.subNavigationPosition === 'bottom'
        } }));
    }
  }
  static get is() { return "rwc-navigation-element"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./navigation-element.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["navigation-element.css"]
    };
  }
  static get properties() {
    return {
      "link": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The link to navigate to on click"
        },
        "attribute": "link",
        "reflect": true,
        "defaultValue": "RwcNavigationElement.NO_NAVIGATION_HREF"
      },
      "openMode": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "NavigationOpenMode",
          "resolved": "\"hover\" | \"manual\" | \"toggle\"",
          "references": {
            "NavigationOpenMode": {
              "location": "import",
              "path": "../../../interfaces/components/basic/navigation/navigation",
              "id": "src/interfaces/components/basic/navigation/navigation.ts::NavigationOpenMode"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Determines if the sub navigation opens on hover or on toggle click"
        },
        "attribute": "open-mode",
        "reflect": true,
        "defaultValue": "'hover'"
      },
      "subNavigationType": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationType",
          "resolved": "\"accordion\" | \"horizontal\" | \"vertical\"",
          "references": {
            "NavigationType": {
              "location": "import",
              "path": "../../../interfaces/components/basic/navigation/navigation",
              "id": "src/interfaces/components/basic/navigation/navigation.ts::NavigationType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The type of the sub navigation"
        },
        "attribute": "sub-navigation-type",
        "reflect": true,
        "defaultValue": "'vertical'"
      },
      "subNavigationPosition": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "SubNavigationPosition",
          "resolved": "\"bottom\" | \"side\"",
          "references": {
            "SubNavigationPosition": {
              "location": "import",
              "path": "../../../interfaces/components/basic/navigation/navigation",
              "id": "src/interfaces/components/basic/navigation/navigation.ts::SubNavigationPosition"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The position of the sub navigation in relation to the navigation element"
        },
        "attribute": "sub-navigation-position",
        "reflect": true,
        "defaultValue": "'bottom'"
      },
      "renderDividers": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The render mode of the dividers."
        },
        "attribute": "render-dividers",
        "reflect": false,
        "defaultValue": "false"
      },
      "renderIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables rendering of the default sub navigation indicator icon."
        },
        "attribute": "render-icon",
        "reflect": false,
        "defaultValue": "true"
      },
      "preventNavigation": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Prevents default anchor element navigation behaviour."
        },
        "attribute": "prevent-navigation",
        "reflect": false,
        "defaultValue": "false"
      },
      "iconLeft": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The path to the left icon image."
        },
        "attribute": "icon-left",
        "reflect": false,
        "defaultValue": "''"
      },
      "iconRight": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The path to the right icon image."
        },
        "attribute": "icon-right",
        "reflect": false,
        "defaultValue": "''"
      }
    };
  }
  static get states() {
    return {
      "dropdownOpen": {}
    };
  }
  static get events() {
    return [{
        "method": "navigate",
        "name": "navigate",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "The navigation event emitter."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "dropdownOpen",
        "method": "onDropdownOpen",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "dropdownClose",
        "method": "onDropdownClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
RwcNavigationElement.NO_NAVIGATION_HREF = 'javascript:void(0)';
//# sourceMappingURL=navigation-element.js.map
