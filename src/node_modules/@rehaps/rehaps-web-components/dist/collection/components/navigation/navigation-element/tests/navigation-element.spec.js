import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcNavigationElement } from "../navigation-element";
const containerExpectedClassesDefault = ['container', 'hover', 'sub-nav-type-vertical'];
const containerExpectedClassesDropdownOpen = ['container', 'hover', 'sub-nav-type-vertical', 'dropdown-open'];
const containerExpectedClassesAccordion = ['container', 'manual', 'sub-nav-type-accordion'];
describe('rwc-navigation', () => {
  it('should render the navigation element', async () => {
    const page = await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom">
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <a href="javascript:void(0)" slot="">
              <div class="link">
                <slot name="before"></slot>
                <div class="text">
                  <slot></slot>
                </div>
                <slot name="after"></slot>
              </div>
            </a>
          </div>
        </mock:shadow-root>
      </rwc-navigation-element>
    `);
  });
  it('should render the sub navigation', async () => {
    const page = await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", null, "Level 1", h("rwc-navigation-element", { slot: "sub-navigation" }, "Level 2"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom">
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <a href="javascript:void(0)" slot="">
              <div class="link">
                <slot name="before"></slot>
                <div class="text">
                  <slot></slot>
                </div>
                <slot name="after">
                  <div class="icon icon-right rotate"></div>
                </slot>
              </div>
            </a>
            <rwc-dropdown class="sub-navigation-dropdown" mode="fixed" openmode="hover" position="bottom" size="auto">
              <slot name="sub-navigation"></slot>
            </rwc-dropdown>
          </div>
        </mock:shadow-root>
        Level 1
        <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom" slot="sub-navigation">
          <mock:shadow-root>
            <div class="${containerExpectedClassesDefault.join(' ')}">
              <a href="javascript:void(0)" slot="">
                <div class="link">
                  <slot name="before"></slot>
                  <div class="text">
                    <slot></slot>
                  </div>
                  <slot name="after"></slot>
                </div>
              </a>
            </div>
          </mock:shadow-root>
          Level 2
        </rwc-navigation-element>
      </rwc-navigation-element>
    `);
  });
  it('should handle the dropdown events', async () => {
    const page = await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", null, "Level 1", h("rwc-navigation-element", { slot: "sub-navigation" }, "Level 2"))),
    });
    const navigationElementComponent = document.querySelector('rwc-navigation-element');
    navigationElementComponent.dispatchEvent(new CustomEvent('dropdownOpen'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom">
        <mock:shadow-root>
          <div class="${containerExpectedClassesDropdownOpen.join(' ')}">
            <a href="javascript:void(0)" slot="">
              <div class="link">
                <slot name="before"></slot>
                <div class="text">
                  <slot></slot>
                </div>
                <slot name="after">
                  <div class="icon icon-right rotate"></div>
                </slot>
              </div>
            </a>
            <rwc-dropdown class="sub-navigation-dropdown" mode="fixed" openmode="hover" position="bottom" size="auto">
              <slot name="sub-navigation"></slot>
            </rwc-dropdown>
          </div>
        </mock:shadow-root>
        Level 1
        <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom" slot="sub-navigation">
          <mock:shadow-root>
            <div class="${containerExpectedClassesDefault.join(' ')}">
              <a href="javascript:void(0)" slot="">
                <div class="link">
                  <slot name="before"></slot>
                  <div class="text">
                    <slot></slot>
                  </div>
                  <slot name="after"></slot>
                </div>
              </a>
            </div>
          </mock:shadow-root>
          Level 2
        </rwc-navigation-element>
      </rwc-navigation-element>
    `);
    navigationElementComponent.dispatchEvent(new CustomEvent('dropdownClose'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom">
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <a href="javascript:void(0)" slot="">
              <div class="link">
                <slot name="before"></slot>
                <div class="text">
                  <slot></slot>
                </div>
                <slot name="after">
                  <div class="icon icon-right rotate"></div>
                </slot>
              </div>
            </a>
            <rwc-dropdown class="sub-navigation-dropdown" mode="fixed" openmode="hover" position="bottom" size="auto">
              <slot name="sub-navigation"></slot>
            </rwc-dropdown>
          </div>
        </mock:shadow-root>
        Level 1
        <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom" slot="sub-navigation">
          <mock:shadow-root>
            <div class="${containerExpectedClassesDefault.join(' ')}">
              <a href="javascript:void(0)" slot="">
                <div class="link">
                  <slot name="before"></slot>
                  <div class="text">
                    <slot></slot>
                  </div>
                  <slot name="after"></slot>
                </div>
              </a>
            </div>
          </mock:shadow-root>
          Level 2
        </rwc-navigation-element>
      </rwc-navigation-element>
    `);
  });
  it('should render the sub navigation as accordion', async () => {
    const page = await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", { subNavigationType: "accordion" }, "Level 1", h("rwc-navigation-element", { slot: "sub-navigation", subNavigationType: "accordion" }, "Level 2"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-navigation-element link="javascript:void(0)" open-mode="manual" sub-navigation-type="accordion" sub-navigation-position="bottom">
        <mock:shadow-root>
          <div class="${containerExpectedClassesAccordion.join(' ')}">
            <rwc-accordion class="has-sub-navigation sub-navigation-accordion" rendericon="">
              <a href="javascript:void(0)" slot="heading">
                <div class="link">
                  <slot name="before"></slot>
                  <div class="text">
                    <slot></slot>
                  </div>
                  <slot name="after"></slot>
                </div>
              </a>
              <rwc-navigation class="sub-navigation" type="accordion">
                <slot name="sub-navigation"></slot>
              </rwc-navigation>
            </rwc-accordion>
          </div>
        </mock:shadow-root>
        Level 1
        <rwc-navigation-element link="javascript:void(0)" open-mode="manual" sub-navigation-type="accordion" sub-navigation-position="bottom" slot="sub-navigation">
          <mock:shadow-root>
            <div class="${containerExpectedClassesAccordion.join(' ')}">
              <rwc-accordion class="sub-navigation-accordion">
                <a href="javascript:void(0)" slot="heading">
                  <div class="link">
                    <slot name="before"></slot>
                    <div class="text">
                      <slot></slot>
                    </div>
                    <slot name="after"></slot>
                  </div>
                </a>
              </rwc-accordion>
            </div>
          </mock:shadow-root>
          Level 2
        </rwc-navigation-element>
      </rwc-navigation-element>
    `);
  });
  it('should render the icons by url', async () => {
    const page = await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", { iconLeft: "https://icon.png", iconRight: "https://icon.png" }, "Level 1", h("rwc-navigation-element", { slot: "sub-navigation" }, "Level 2"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom">
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <a href="javascript:void(0)" slot="">
              <div class="link">
                <slot name="before">
                  <img
                    src="https://icon.png"
                    alt="Left icon"
                    class="icon icon-left"
                  />
                </slot>
                <div class="text">
                  <slot></slot>
                </div>
                <slot name="after">
                  <img
                    src="https://icon.png"
                    alt="Right icon"
                    class="icon icon-right rotate"
                  />
                </slot>
              </div>
            </a>
            <rwc-dropdown class="sub-navigation-dropdown" mode="fixed" openmode="hover" position="bottom" size="auto">
              <slot name="sub-navigation"></slot>
            </rwc-dropdown>
          </div>
        </mock:shadow-root>
        Level 1
        <rwc-navigation-element link="javascript:void(0)" open-mode="hover" sub-navigation-type="vertical" sub-navigation-position="bottom" slot="sub-navigation">
          <mock:shadow-root>
            <div class="${containerExpectedClassesDefault.join(' ')}">
              <a href="javascript:void(0)" slot="">
                <div class="link">
                  <slot name="before"></slot>
                  <div class="text">
                    <slot></slot>
                  </div>
                  <slot name="after"></slot>
                </div>
              </a>
            </div>
          </mock:shadow-root>
          Level 2
        </rwc-navigation-element>
      </rwc-navigation-element>
    `);
  });
  it('should handle the link click', async () => {
    await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", null, "Level 1", h("rwc-navigation-element", { slot: "sub-navigation", id: "link", link: "https://test.link" }, "Level 2"))),
    });
    const spy = jest.fn();
    document.addEventListener('navigate', spy);
    document.querySelector('#link').shadowRoot.querySelector('a').click();
    expect(spy).toBeCalledTimes(1);
  });
  it('should prevent default navigation behaviour, but fire custom event', async () => {
    await newSpecPage({
      components: [RwcNavigationElement],
      template: () => (h("rwc-navigation-element", { subNavigationPosition: "side" }, "Level 1", h("rwc-navigation-element", { slot: "sub-navigation", id: "link", link: "https://test.link", preventNavigation: true }, "Level 2"))),
    });
    const spy = jest.fn();
    document.addEventListener('navigate', spy);
    document.querySelector('#link').shadowRoot.querySelector('a').click();
    expect(spy).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=navigation-element.spec.js.map
