{"version":3,"file":"navigation-element.spec.js","sourceRoot":"","sources":["../../../../../../src/components/navigation/navigation-element/tests/navigation-element.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcNavigationElement } from '../navigation-element';\n\nconst containerExpectedClassesDefault = ['container', 'hover', 'sub-nav-type-vertical'];\nconst containerExpectedClassesDropdownOpen = ['container', 'hover', 'sub-nav-type-vertical', 'dropdown-open'];\nconst containerExpectedClassesAccordion = ['container', 'manual', 'sub-nav-type-accordion'];\n\ndescribe('rwc-navigation', () => {\n  it('should render the navigation element', async () => {\n    const page = await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element>\n\n        </rwc-navigation-element>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\">\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <a href=\"javascript:void(0)\" slot=\"\">\n              <div class=\"link\">\n                <slot name=\"before\"></slot>\n                <div class=\"text\">\n                  <slot></slot>\n                </div>\n                <slot name=\"after\"></slot>\n              </div>\n            </a>\n          </div>\n        </mock:shadow-root>\n      </rwc-navigation-element>\n    `);\n  });\n\n  it('should render the sub navigation', async () => {\n    const page = await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element>\n          Level 1\n          <rwc-navigation-element slot=\"sub-navigation\">\n            Level 2\n          </rwc-navigation-element>\n        </rwc-navigation-element>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\">\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <a href=\"javascript:void(0)\" slot=\"\">\n              <div class=\"link\">\n                <slot name=\"before\"></slot>\n                <div class=\"text\">\n                  <slot></slot>\n                </div>\n                <slot name=\"after\">\n                  <div class=\"icon icon-right rotate\"></div>\n                </slot>\n              </div>\n            </a>\n            <rwc-dropdown class=\"sub-navigation-dropdown\" mode=\"fixed\" openmode=\"hover\" position=\"bottom\" size=\"auto\">\n              <slot name=\"sub-navigation\"></slot>\n            </rwc-dropdown>\n          </div>\n        </mock:shadow-root>\n        Level 1\n        <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\" slot=\"sub-navigation\">\n          <mock:shadow-root>\n            <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n              <a href=\"javascript:void(0)\" slot=\"\">\n                <div class=\"link\">\n                  <slot name=\"before\"></slot>\n                  <div class=\"text\">\n                    <slot></slot>\n                  </div>\n                  <slot name=\"after\"></slot>\n                </div>\n              </a>\n            </div>\n          </mock:shadow-root>\n          Level 2\n        </rwc-navigation-element>\n      </rwc-navigation-element>\n    `);\n  });\n\n  it('should handle the dropdown events', async () => {\n    const page = await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element>\n          Level 1\n          <rwc-navigation-element slot=\"sub-navigation\">\n            Level 2\n          </rwc-navigation-element>\n        </rwc-navigation-element>\n      ),\n    });\n\n    const navigationElementComponent = document.querySelector('rwc-navigation-element');\n    navigationElementComponent.dispatchEvent(new CustomEvent('dropdownOpen'));\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\">\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDropdownOpen.join(' ') }\">\n            <a href=\"javascript:void(0)\" slot=\"\">\n              <div class=\"link\">\n                <slot name=\"before\"></slot>\n                <div class=\"text\">\n                  <slot></slot>\n                </div>\n                <slot name=\"after\">\n                  <div class=\"icon icon-right rotate\"></div>\n                </slot>\n              </div>\n            </a>\n            <rwc-dropdown class=\"sub-navigation-dropdown\" mode=\"fixed\" openmode=\"hover\" position=\"bottom\" size=\"auto\">\n              <slot name=\"sub-navigation\"></slot>\n            </rwc-dropdown>\n          </div>\n        </mock:shadow-root>\n        Level 1\n        <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\" slot=\"sub-navigation\">\n          <mock:shadow-root>\n            <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n              <a href=\"javascript:void(0)\" slot=\"\">\n                <div class=\"link\">\n                  <slot name=\"before\"></slot>\n                  <div class=\"text\">\n                    <slot></slot>\n                  </div>\n                  <slot name=\"after\"></slot>\n                </div>\n              </a>\n            </div>\n          </mock:shadow-root>\n          Level 2\n        </rwc-navigation-element>\n      </rwc-navigation-element>\n    `);\n\n    navigationElementComponent.dispatchEvent(new CustomEvent('dropdownClose'));\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\">\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <a href=\"javascript:void(0)\" slot=\"\">\n              <div class=\"link\">\n                <slot name=\"before\"></slot>\n                <div class=\"text\">\n                  <slot></slot>\n                </div>\n                <slot name=\"after\">\n                  <div class=\"icon icon-right rotate\"></div>\n                </slot>\n              </div>\n            </a>\n            <rwc-dropdown class=\"sub-navigation-dropdown\" mode=\"fixed\" openmode=\"hover\" position=\"bottom\" size=\"auto\">\n              <slot name=\"sub-navigation\"></slot>\n            </rwc-dropdown>\n          </div>\n        </mock:shadow-root>\n        Level 1\n        <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\" slot=\"sub-navigation\">\n          <mock:shadow-root>\n            <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n              <a href=\"javascript:void(0)\" slot=\"\">\n                <div class=\"link\">\n                  <slot name=\"before\"></slot>\n                  <div class=\"text\">\n                    <slot></slot>\n                  </div>\n                  <slot name=\"after\"></slot>\n                </div>\n              </a>\n            </div>\n          </mock:shadow-root>\n          Level 2\n        </rwc-navigation-element>\n      </rwc-navigation-element>\n    `);\n  });\n\n  it('should render the sub navigation as accordion', async () => {\n    const page = await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element subNavigationType=\"accordion\">\n          Level 1\n          <rwc-navigation-element slot=\"sub-navigation\" subNavigationType=\"accordion\">\n            Level 2\n          </rwc-navigation-element>\n        </rwc-navigation-element>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"manual\" sub-navigation-type=\"accordion\" sub-navigation-position=\"bottom\">\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesAccordion.join(' ') }\">\n            <rwc-accordion class=\"has-sub-navigation sub-navigation-accordion\" rendericon=\"\">\n              <a href=\"javascript:void(0)\" slot=\"heading\">\n                <div class=\"link\">\n                  <slot name=\"before\"></slot>\n                  <div class=\"text\">\n                    <slot></slot>\n                  </div>\n                  <slot name=\"after\"></slot>\n                </div>\n              </a>\n              <rwc-navigation class=\"sub-navigation\" type=\"accordion\">\n                <slot name=\"sub-navigation\"></slot>\n              </rwc-navigation>\n            </rwc-accordion>\n          </div>\n        </mock:shadow-root>\n        Level 1\n        <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"manual\" sub-navigation-type=\"accordion\" sub-navigation-position=\"bottom\" slot=\"sub-navigation\">\n          <mock:shadow-root>\n            <div class=\"${ containerExpectedClassesAccordion.join(' ') }\">\n              <rwc-accordion class=\"sub-navigation-accordion\">\n                <a href=\"javascript:void(0)\" slot=\"heading\">\n                  <div class=\"link\">\n                    <slot name=\"before\"></slot>\n                    <div class=\"text\">\n                      <slot></slot>\n                    </div>\n                    <slot name=\"after\"></slot>\n                  </div>\n                </a>\n              </rwc-accordion>\n            </div>\n          </mock:shadow-root>\n          Level 2\n        </rwc-navigation-element>\n      </rwc-navigation-element>\n    `);\n  });\n  \n  it('should render the icons by url', async () => {\n    const page = await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element iconLeft=\"https://icon.png\" iconRight=\"https://icon.png\">\n          Level 1\n          <rwc-navigation-element slot=\"sub-navigation\">\n            Level 2\n          </rwc-navigation-element>\n        </rwc-navigation-element>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\">\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <a href=\"javascript:void(0)\" slot=\"\">\n              <div class=\"link\">\n                <slot name=\"before\">\n                  <img\n                    src=\"https://icon.png\"\n                    alt=\"Left icon\"\n                    class=\"icon icon-left\"\n                  />\n                </slot>\n                <div class=\"text\">\n                  <slot></slot>\n                </div>\n                <slot name=\"after\">\n                  <img\n                    src=\"https://icon.png\"\n                    alt=\"Right icon\"\n                    class=\"icon icon-right rotate\"\n                  />\n                </slot>\n              </div>\n            </a>\n            <rwc-dropdown class=\"sub-navigation-dropdown\" mode=\"fixed\" openmode=\"hover\" position=\"bottom\" size=\"auto\">\n              <slot name=\"sub-navigation\"></slot>\n            </rwc-dropdown>\n          </div>\n        </mock:shadow-root>\n        Level 1\n        <rwc-navigation-element link=\"javascript:void(0)\" open-mode=\"hover\" sub-navigation-type=\"vertical\" sub-navigation-position=\"bottom\" slot=\"sub-navigation\">\n          <mock:shadow-root>\n            <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n              <a href=\"javascript:void(0)\" slot=\"\">\n                <div class=\"link\">\n                  <slot name=\"before\"></slot>\n                  <div class=\"text\">\n                    <slot></slot>\n                  </div>\n                  <slot name=\"after\"></slot>\n                </div>\n              </a>\n            </div>\n          </mock:shadow-root>\n          Level 2\n        </rwc-navigation-element>\n      </rwc-navigation-element>\n    `);\n  });\n\n  it('should handle the link click', async () => {\n    await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element>\n          Level 1\n          <rwc-navigation-element slot=\"sub-navigation\" id=\"link\" link=\"https://test.link\">\n            Level 2\n          </rwc-navigation-element>\n        </rwc-navigation-element>\n      ),\n    });\n\n    const spy = jest.fn();\n    document.addEventListener('navigate', spy)\n    document.querySelector('#link').shadowRoot.querySelector('a').click();\n    expect(spy).toBeCalledTimes(1);\n  });\n\n  it('should prevent default navigation behaviour, but fire custom event', async () => {\n    await newSpecPage({\n      components: [RwcNavigationElement],\n      template: () => (\n        <rwc-navigation-element subNavigationPosition=\"side\">\n          Level 1\n          <rwc-navigation-element slot=\"sub-navigation\" id=\"link\" link=\"https://test.link\" preventNavigation={ true }>\n            Level 2\n          </rwc-navigation-element>\n        </rwc-navigation-element>\n      ),\n    });\n\n    const spy = jest.fn();\n    document.addEventListener('navigate', spy)\n    document.querySelector('#link').shadowRoot.querySelector('a').click();\n    expect(spy).toBeCalledTimes(1);\n  });\n});\n"]}