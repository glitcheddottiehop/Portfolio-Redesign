{"version":3,"file":"info-card.js","sourceRoot":"","sources":["../../../../../../src/components/basic/cards/info-card/info-card.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAuB,MAAM,eAAe,CAAC;AAC9E,OAAO,QAAQ,MAAM,8CAA8C,CAAC;AAQpE,MAAM,OAAO,WAAW;;gBAIkB,EAAE;wBAKO,IAAI;wBAKJ,KAAK;yBAKJ,KAAK;mBAK5B,KAAK;gBAKG,YAAY;;EAK/C,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,gBACE,KAAK,EAAC,MAAM,EACZ,YAAY,EAAG,IAAI,CAAC,YAAY,EAChC,YAAY,EAAG,IAAI,CAAC,YAAY,EAChC,aAAa,EAAG,IAAI,CAAC,aAAa,EAClC,OAAO,EAAG,IAAI,CAAC,OAAO;QAEtB,WACE,KAAK,EAAG;YACN,SAAS,EAAE,IAAI;YACf,CAAC,QAAS,IAAI,CAAC,IAAK,EAAE,CAAC,EAAE,IAAI;WAC9B;UAED,WAAK,KAAK,EAAC,MAAM;YACf,YAAM,IAAI,EAAC,MAAM,IACb,IAAI,CAAC,UAAU,EAAE,CACd,CACH;UACN,WAAK,KAAK,EAAC,MAAM;YACf,eAAa,CACT,CACF,CACG,CACN,CACR,CAAC;EACJ,CAAC;EAKD,UAAU;IACR,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,OAAO,CACL,WAAK,GAAG,EAAG,IAAI,CAAC,IAAI,EAAG,GAAG,EAAC,MAAM,GAAO,CACzC,CAAA;KACF;IACD,OAAO,CACL,WAAK,SAAS,EAAG,QAAQ,EAAG,KAAK,EAAC,UAAU,GAAO,CACpD,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop, Host, FunctionalComponent } from '@stencil/core';\nimport InfoIcon from '@material-design-icons/svg/outlined/info.svg';\nimport { InfoCardLayoutMode } from '../../../../interfaces/components/basic/cards/info-card/info-card';\n\n@Component({\n  tag: 'rwc-info-card',\n  styleUrl: 'info-card.scss',\n  shadow: true\n})\nexport class RwcInfoCard {\n  /**\n   * Path to the icon.\n   */\n  @Prop({ reflect: true }) icon: string = '';\n\n  /**\n   * Set rendering of box-shadow.\n   */\n  @Prop({ reflect: true }) renderShadow: boolean = true;\n\n  /**\n   * Set rendering of border.\n   */\n  @Prop({ reflect: true }) renderBorder: boolean = false;\n\n  /**\n   * Animate border on hover.\n   */\n  @Prop({ reflect: true }) animateBorder: boolean = false;\n\n  /**\n   * Change cursor to pointer on hover.\n   */\n  @Prop() pointer: boolean = false;\n\n  /**\n   * The layout mode of the info card.\n   */\n  @Prop() mode: InfoCardLayoutMode = 'horizontal';\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <rwc-card\n          class=\"card\"\n          renderShadow={ this.renderShadow }\n          renderBorder={ this.renderBorder }\n          animateBorder={ this.animateBorder }\n          pointer={ this.pointer }\n        >\n          <div\n            class={ {\n              container: true,\n              [`mode-${ this.mode }`]: true\n            } }\n          >\n            <div class=\"icon\">\n              <slot name=\"icon\">\n                { this.renderIcon() }\n              </slot>\n            </div>\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n          </div>\n        </rwc-card>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the icon element.\n   */\n  renderIcon(): FunctionalComponent {\n    if (this.icon) {\n      return (\n        <img src={ this.icon } alt=\"icon\"></img>\n      )\n    }\n    return (\n      <div innerHTML={ InfoIcon } class=\"svg-icon\"></div>\n    )\n  }\n}\n"]}