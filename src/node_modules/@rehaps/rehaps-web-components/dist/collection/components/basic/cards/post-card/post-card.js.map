{"version":3,"file":"post-card.js","sourceRoot":"","sources":["../../../../../../src/components/basic/cards/post-card/post-card.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAuB,MAAM,eAAe,CAAC;AAC9E,OAAO,WAAW,MAAM,wDAAwD,CAAC;AAOjF,MAAM,OAAO,WAAW;;kBAIoB,EAAE;yBAKX,KAAK;wBAKW,IAAI;wBAKJ,KAAK;yBAKJ,KAAK;mBAK5B,KAAK;;EAKhC,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,gBACE,KAAK,EAAC,MAAM,EACZ,YAAY,EAAG,IAAI,CAAC,YAAY,EAChC,YAAY,EAAG,IAAI,CAAC,YAAY,EAChC,aAAa,EAAG,IAAI,CAAC,aAAa,EAClC,OAAO,EAAG,IAAI,CAAC,OAAO;QAEtB,WAAK,KAAK,EAAC,WAAW;UACpB,WAAK,KAAK,EAAC,MAAM;YACf,WAAK,KAAK,EAAC,QAAQ;cACjB,YAAM,IAAI,EAAC,QAAQ,IACf,IAAI,CAAC,YAAY,EAAE,CAChB,CACH;YACN,WAAK,KAAK,EAAC,MAAM;cACf,YAAM,IAAI,EAAC,MAAM,GAAQ,CACrB,CACF;UACN,WAAK,KAAK,EAAC,MAAM;YACf,WAAK,KAAK,EAAC,yBAAyB;cAClC,YAAM,IAAI,EAAC,SAAS,GAAQ,CACxB;YACN,WAAK,KAAK,EAAC,6BAA6B;cACtC,YAAM,IAAI,EAAC,aAAa,GAAQ,CAC5B;YACN,WAAK,KAAK,EAAC,wBAAwB;cACjC,YAAM,IAAI,EAAC,QAAQ,GAAQ,CACvB,CACF,CACF,CACG,CACN,CACR,CAAA;EACH,CAAC;EAKD,YAAY;IACV,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,OAAO,CACL,WACE,GAAG,EAAG,IAAI,CAAC,MAAM,EACjB,GAAG,EAAC,QAAQ,EACZ,KAAK,EAAG;UACN,IAAI,EAAE,IAAI;UACV,OAAO,EAAE,IAAI,CAAC,aAAa;SAC5B,GACD,CACH,CAAA;KACF;IACD,OAAO,CACL,WAAK,SAAS,EAAG,WAAW,EAAG,KAAK,EAAC,UAAU,GAAO,CACvD,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop, Host, FunctionalComponent } from '@stencil/core';\nimport AccountIcon from '@material-design-icons/svg/outlined/account_circle.svg';\n\n@Component({\n  tag: 'rwc-post-card',\n  styleUrl: 'post-card.scss',\n  shadow: true\n})\nexport class RwcPostCard {\n  /**\n   * Path to the avatar.\n   */\n  @Prop({ reflect: true }) avatar: string = '';\n\n  /**\n   * Set avatar rounded.\n   */\n  @Prop() roundedAvatar: boolean = false;\n\n  /**\n   * Set rendering of box-shadow.\n   */\n  @Prop({ reflect: true }) renderShadow: boolean = true;\n\n  /**\n   * Set rendering of border.\n   */\n  @Prop({ reflect: true }) renderBorder: boolean = false;\n\n  /**\n   * Animate border on hover.\n   */\n  @Prop({ reflect: true }) animateBorder: boolean = false;\n\n  /**\n   * Change cursor to pointer on hover.\n   */\n  @Prop() pointer: boolean = false;\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <rwc-card\n          class=\"card\"\n          renderShadow={ this.renderShadow }\n          renderBorder={ this.renderBorder }\n          animateBorder={ this.animateBorder }\n          pointer={ this.pointer }\n        >\n          <div class=\"container\">\n            <div class=\"user\">\n              <div class=\"avatar\">\n                <slot name=\"avatar\">\n                  { this.renderAvatar() }\n                </slot>\n              </div>\n              <div class=\"name\">\n                <slot name=\"name\"></slot>\n              </div>\n            </div>\n            <div class=\"text\">\n              <div class=\"heading content-spacing\">\n                <slot name=\"heading\"></slot>\n              </div>\n              <div class=\"description content-spacing\">\n                <slot name=\"description\"></slot>\n              </div>\n              <div class=\"footer content-spacing\">\n                <slot name=\"footer\"></slot>\n              </div>\n            </div>\n          </div>\n        </rwc-card>\n      </Host>\n    )\n  }\n\n  /**\n   * Renders the avatar element.\n   */\n  renderAvatar(): FunctionalComponent {\n    if (this.avatar) {\n      return (\n        <img\n          src={ this.avatar }\n          alt=\"avatar\"\n          class={ {\n            icon: true,\n            rounded: this.roundedAvatar\n          } }\n        />\n      )\n    }\n    return (\n      <div innerHTML={ AccountIcon } class=\"svg-icon\"></div>\n    )\n  }\n}\n"]}