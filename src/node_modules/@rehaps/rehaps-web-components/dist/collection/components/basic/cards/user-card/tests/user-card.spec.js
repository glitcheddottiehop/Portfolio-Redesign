import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcUserCard } from "../user-card";
describe('rwc-user-card', () => {
  it('should render the post card', async () => {
    const page = await newSpecPage({
      components: [RwcUserCard],
      template: () => (h("rwc-user-card", { renderShadow: true, renderBorder: true, animateBorder: true, pointer: true }, "Card Text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-user-card
        render-shadow=""
        render-border=""
        animate-border=""
        avatar=""
        location-icon=""
        rating-icon=""
      >
        <mock:shadow-root>
          <rwc-card
            rendershadow=""
            renderborder=""
            animateborder=""
            pointer=""
            class="card"
          >
            <div class="container">
              <div class="header">
                <slot name="header"></slot>
              </div>
              <div class="avatar">
                <slot name="avatar">
                  <div class="svg-icon"></div>
                </slot>
              </div>
              <div class="name content-spacing">
                <slot name="name"></slot>
              </div>
              <div class="heading content-spacing">
                <slot name="heading"></slot>
              </div>
              <div class="description">
                <slot name="description">
                </slot>
              </div>
            </div>
          </rwc-card>
        </mock:shadow-root>
        Card Text
      </rwc-user-card>
    `);
  });
  it('should render the location and rating', async () => {
    const page = await newSpecPage({
      components: [RwcUserCard],
      template: () => (h("rwc-user-card", { renderShadow: true, renderBorder: true, animateBorder: true, pointer: true }, "Card Text", h("div", { slot: "location" }, "Location"), h("div", { slot: "rating" }, "5/7 (69 ratings)"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-user-card
        render-shadow=""
        render-border=""
        animate-border=""
        avatar=""
        location-icon=""
        rating-icon=""
      >
        <mock:shadow-root>
          <rwc-card
            rendershadow=""
            renderborder=""
            animateborder=""
            pointer=""
            class="card"
          >
            <div class="container">
              <div class="header">
                <slot name="header"></slot>
              </div>
              <div class="avatar">
                <slot name="avatar">
                  <div class="svg-icon"></div>
                </slot>
              </div>
              <div class="name content-spacing">
                <slot name="name"></slot>
              </div>
              <div class="heading content-spacing">
                <slot name="heading"></slot>
              </div>
              <div class="location-icon content-spacing">
                <span>
                  <div class="svg-icon"></div>
                </span>
                <span>
                  <slot name="location"></slot>
                </span>
              </div>
              <div class="rating-icon content-spacing">
                <span>
                  <div class="svg-icon"></div>
                </span>
                <span>
                  <slot name="rating"></slot>
                </span>
              </div>
              <div class="description">
                <slot name="description">
                </slot>
              </div>
            </div>
          </rwc-card>
        </mock:shadow-root>
        Card Text
        <div slot="location">Location</div>
        <div slot="rating">5/7 (69 ratings)</div>
      </rwc-user-card>
    `);
  });
  it('should render the icons by url', async () => {
    const page = await newSpecPage({
      components: [RwcUserCard],
      template: () => (h("rwc-user-card", { renderShadow: true, renderBorder: true, animateBorder: true, pointer: true, avatar: "https://test-icon.png", locationIcon: "https://location-icon.png", ratingIcon: "https://rating-icon.png" }, "Card Text", h("div", { slot: "location" }, "Location"), h("div", { slot: "rating" }, "5/7 (69 ratings)"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-user-card
        render-shadow=""
        render-border=""
        animate-border=""
        avatar="https://test-icon.png"
        location-icon="https://location-icon.png"
        rating-icon="https://rating-icon.png"
      >
        <mock:shadow-root>
          <rwc-card
            rendershadow=""
            renderborder=""
            animateborder=""
            pointer=""
            class="card"
          >
            <div class="container">
              <div class="header">
                <slot name="header"></slot>
              </div>
              <div class="avatar">
                <slot name="avatar">
                <img src="https://test-icon.png" alt="avatar"></img>
                </slot>
              </div>
              <div class="name content-spacing">
                <slot name="name"></slot>
              </div>
              <div class="heading content-spacing">
                <slot name="heading"></slot>
              </div>
              <div class="location-icon content-spacing">
                <span>
                  <img src="https://location-icon.png" alt="location-icon"></img>
                </span>
                <span>
                  <slot name="location"></slot>
                </span>
              </div>
              <div class="rating-icon content-spacing">
                <span>
                  <img src="https://rating-icon.png" alt="rating-icon"></img>
                </span>
                <span>
                  <slot name="rating"></slot>
                </span>
              </div>
              <div class="description">
                <slot name="description">
                </slot>
              </div>
            </div>
          </rwc-card>
        </mock:shadow-root>
        Card Text
        <div slot="location">Location</div>
        <div slot="rating">5/7 (69 ratings)</div>
      </rwc-user-card>
    `);
  });
});
//# sourceMappingURL=user-card.spec.js.map
