import { h, Host, } from "@stencil/core";
export class RwcInput {
  constructor() {
    this.leftSlot = undefined;
    this.rightSlot = undefined;
    this.name = "";
    this.autoComplete = "on";
    this.focused = false;
    this.value = "";
    this.placeholder = "";
    this.type = "text";
    this.validators = [];
    this.manualValidation = false;
    this.disabled = false;
    this.label = "";
    this.errors = [];
  }
  componentWillRender() {
    this.host.tabIndex = 0;
  }
  onFocus() {
    var _a;
    if (!this.disabled) {
      this.focused = true;
      this.clearErrors();
      (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }
  onBlur() {
    this.focused = false;
    if (!this.manualValidation) {
      this.validate();
    }
  }
  onInput() {
    this.value = this.inputElement.value;
  }
  async validate() {
    this.setErrors([]);
    this.validators.forEach((validator) => {
      if (!validator.validate(this.value)) {
        this.errors.push(validator.getMessage());
      }
    });
    return this.errors.length === 0;
  }
  async clearErrors() {
    this.setErrors([]);
  }
  async setErrors(errors) {
    this.errors = errors;
  }
  render() {
    var _a, _b;
    return (h(Host, { class: {
        disabled: this.disabled,
      } }, h("label", { htmlFor: this.name, class: "label", style: {
        display: this.name ? "block" : "none",
      } }, this.label), h("div", { class: {
        "input-container": true,
        focused: this.focused,
        error: this.errors.length > 0,
      } }, h("div", { class: "slot-container" }, h("div", { class: "slot-horizontal-flex" }, h("slot", { name: "left", ref: (element) => (this.leftSlot = element) }))), h("input", { id: this.name, class: {
        input: true,
        "left-slot": ((_a = this.leftSlot) === null || _a === void 0 ? void 0 : _a.assignedElements().length) > 0,
        "right-slot": ((_b = this.rightSlot) === null || _b === void 0 ? void 0 : _b.assignedElements().length) > 0,
      }, name: this.name, autoComplete: this.autoComplete, type: this.type, value: this.value, placeholder: this.placeholder, disabled: this.disabled ? true : null, ref: (element) => (this.inputElement = element) }), h("div", { class: "slot-container" }, h("div", { class: "slot-horizontal-flex" }, h("slot", { name: "right", ref: (element) => (this.rightSlot = element) })))), h("p", { class: "error-text" }, this.errors[0] || "")));
  }
  static get is() { return "rwc-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./input.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["input.css"]
    };
  }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The name attribute of the input field."
        },
        "attribute": "name",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "autoComplete": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "InputAutoComplete",
          "resolved": "\"off\" | \"on\"",
          "references": {
            "InputAutoComplete": {
              "location": "import",
              "path": "../../../../interfaces/components/basic/input/input",
              "id": "src/interfaces/components/basic/input/input.ts::InputAutoComplete"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables the auto complete for the input field."
        },
        "attribute": "auto-complete",
        "reflect": false,
        "defaultValue": "\"on\""
      },
      "focused": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The focused state of the component."
        },
        "attribute": "focused",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The current value of the input field."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The placeholder value of the input field."
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "InputType",
          "resolved": "\"email\" | \"number\" | \"password\" | \"tel\" | \"text\" | \"url\"",
          "references": {
            "InputType": {
              "location": "import",
              "path": "../../../../interfaces/components/basic/input/input",
              "id": "src/interfaces/components/basic/input/input.ts::InputType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The type of the input field."
        },
        "attribute": "type",
        "reflect": true,
        "defaultValue": "\"text\""
      },
      "validators": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Array<RwcInputValidatorInterface>",
          "resolved": "RwcInputValidatorInterface[]",
          "references": {
            "Array": {
              "location": "global",
              "id": "global::Array"
            },
            "RwcInputValidatorInterface": {
              "location": "import",
              "path": "../../../../interfaces/components/basic/input/input",
              "id": "src/interfaces/components/basic/input/input.ts::RwcInputValidatorInterface"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "List of validators used for validation of the input."
        },
        "defaultValue": "[]"
      },
      "manualValidation": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Determines if the validation must be only triggered manually."
        },
        "attribute": "manual-validation",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Sets the disabled state for the input field."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The label for the input field."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "\"\""
      }
    };
  }
  static get states() {
    return {
      "leftSlot": {},
      "rightSlot": {},
      "errors": {}
    };
  }
  static get methods() {
    return {
      "validate": {
        "complexType": {
          "signature": "() => Promise<boolean>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "RwcInputValidatorInterface": {
              "location": "import",
              "path": "../../../../interfaces/components/basic/input/input",
              "id": "src/interfaces/components/basic/input/input.ts::RwcInputValidatorInterface"
            }
          },
          "return": "Promise<boolean>"
        },
        "docs": {
          "text": "Validates the input of the component",
          "tags": []
        }
      },
      "clearErrors": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Clears the list of validation errors.",
          "tags": []
        }
      },
      "setErrors": {
        "complexType": {
          "signature": "(errors: Array<string>) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "Array": {
              "location": "global",
              "id": "global::Array"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the components error array to passed array of strings.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "focus",
        "method": "onFocus",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "blur",
        "method": "onBlur",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "input",
        "method": "onInput",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=input.js.map
