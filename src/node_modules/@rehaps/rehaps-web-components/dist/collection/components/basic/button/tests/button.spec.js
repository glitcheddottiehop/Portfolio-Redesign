import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcButton } from "../button";
const containerExpectedClassesDefault = ['container', 'shadow', 'type-filled', 'theme-default', 'width-auto'];
describe('rwc-button', () => {
  it('should render the button', async () => {
    const page = await newSpecPage({
      components: [RwcButton],
      template: () => (h("rwc-button", null, "Button Text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-button
        type="filled"
        theme="default"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="icon-wrapper"></div>
            <div class="text">
              <slot></slot>
            </div>
            <div class="icon-wrapper"></div>
          </div>
        </mock:shadow-root>
        Button Text
      </rwc-button>
    `);
  });
  it('should render the default icons', async () => {
    const page = await newSpecPage({
      components: [RwcButton],
      template: () => (h("rwc-button", { showIconRight: true, showIconLeft: true }, "Button Text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-button
        type="filled"
        theme="default"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="icon-wrapper">
              <slot name="icon">
                <div class="icon svg-icon"></div>
              </slot>
            </div>
            <div class="text">
              <slot></slot>
            </div>
            <div class="icon-wrapper">
              <slot name="icon">
                <div class="icon svg-icon"></div>
              </slot>
            </div>
          </div>
        </mock:shadow-root>
        Button Text
      </rwc-button>
    `);
  });
  it('should render the icons by path', async () => {
    const page = await newSpecPage({
      components: [RwcButton],
      template: () => (h("rwc-button", { showIconRight: true, showIconLeft: true, iconLeft: "left.jpg", iconRight: "right.jpg" }, "Button Text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-button
        type="filled"
        theme="default"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="icon-wrapper">
              <slot name="icon">
                <img class="icon" src="left.jpg" alt="left"></img>
              </slot>
            </div>
            <div class="text">
              <slot></slot>
            </div>
            <div class="icon-wrapper">
              <slot name="icon">
                <img class="icon" src="right.jpg" alt="right"></img>
              </slot>
            </div>
          </div>
        </mock:shadow-root>
        Button Text
      </rwc-button>
    `);
  });
  it('should render the ripple', async () => {
    const page = await newSpecPage({
      components: [RwcButton],
      template: () => (h("rwc-button", { ripple: true }, "Button Text")),
    });
    const buttonElement = page.body.querySelector('rwc-button');
    buttonElement.click();
    buttonElement.click();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-button
        type="filled"
        theme="default"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="icon-wrapper"></div>
            <div class="text">
              <slot></slot>
            </div>
            <div class="icon-wrapper"></div>
            <span class="ripple" style="height: NaNpx; width: NaNpx; left: NaNpx; top: NaNpx;"></span>
          </div>
        </mock:shadow-root>
        Button Text
      </rwc-button>
    `);
  });
});
//# sourceMappingURL=button.spec.js.map
