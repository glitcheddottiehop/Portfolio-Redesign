import { Fragment, h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcTabs } from "../tabs";
import { simulateAssignedElements } from "../../../../../jest/polyfill/slot";
import { simulateMouseEvent } from "../../../../../jest/simulation/mouse";
import { simulateAllOffsets } from "../../../../../jest/polyfill/offset";
import { DragMove } from "../../../../utils/actions/dragMove";
const containerExpectedClassesDefault = ['container', 'mode-underline'];
const containerExpectedClassesSegments = ['container', 'mode-segments'];
describe('rwc-tabs', () => {
  simulateAssignedElements();
  simulateAllOffsets();
  it('should render the tabs', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-1"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-tabs>
    `);
  });
  it('should render the tabs as segments', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", { mode: "segments" }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-2"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesSegments.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div class="active" slot="">Tab 1</div>
        <div slot="">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should handle the resize event', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", null, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    global.innerWidth = 500;
    global.dispatchEvent(new Event('resize'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-3"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div class="active" slot="">Tab 1</div>
        <div slot="">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should validate the default tab', async () => {
    let page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", { defaultTab: -1 }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-4"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div class="active" slot="">Tab 1</div>
        <div slot="">Tab 2</div>
      </rwc-tabs>
    `);
    page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", { defaultTab: 2 }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-5"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div class="active" slot="">Tab 1</div>
        <div slot="">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should handle the tab click', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", null, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    document.querySelector('rwc-tabs > div:not(.active)').click();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-6"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Tab 1</div>
        <div slot="" class="active">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should handle the go to method with custom event as param', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", null, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    const host = document.querySelector('rwc-tabs');
    host.addEventListener('click', () => {
      const customEventInit = {
        detail: {
          next: 1
        }
      };
      host.goTo(new CustomEvent('click', customEventInit));
    });
    host.click();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-7"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Tab 1</div>
        <div slot="" class="active">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should animate the segments', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", { mode: "segments" }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    const host = document.querySelector('rwc-tabs');
    host.shadowRoot.querySelector('slot').dispatchEvent(new Event('slotchange'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-8"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesSegments.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="" class="active">Tab 1</div>
        <div slot="">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should handle the slot change', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", { mode: "segments" }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    document.querySelector('rwc-tabs > div:not(.active)').remove();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-9"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesSegments.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="" class="active">Tab 1</div>
      </rwc-tabs>
    `);
  });
  it('should handle the drag move', async () => {
    await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", { mode: "segments" }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    const host = document.querySelector('rwc-tabs');
    const container = host.shadowRoot.querySelector('.container');
    simulateMouseEvent(container, 'mousedown', 0, 0);
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, DragMove.DRAG_STATE_DELAY);
    });
    simulateMouseEvent(document, 'mousemove', 10, 0, [container, document]);
    simulateMouseEvent(document, 'mouseup', 10, 0, [container, document]);
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, DragMove.DRAG_STATE_DELAY);
    });
    simulateMouseEvent(container, 'mousedown', 0, 0);
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, DragMove.DRAG_STATE_DELAY);
    });
    simulateMouseEvent(document, 'mousemove', 0, 0, [container, document]);
    simulateMouseEvent(document, 'mouseup', 0, 0, [container, document]);
    document.querySelector('rwc-tabs > div:not(.active)').click();
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, DragMove.DRAG_STATE_DELAY);
    });
  });
  it('should automatically register goTo events', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h(Fragment, null, h("rwc-tabs", { rwcKey: "rwc-tabs-auto" }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2")), h("div", { "data-rwc-goTo": "rwc-tabs-auto" }))),
    });
    const autoEventDispatcher = document.querySelector('[data-rwc-goTo="rwc-tabs-auto"]');
    const customEventInit = {
      detail: {
        next: 1
      }
    };
    autoEventDispatcher.dispatchEvent(new CustomEvent('indexChange', customEventInit));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-auto"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Tab 1</div>
        <div slot="" class="active">Tab 2</div>
      </rwc-tabs>
    `);
    const host = document.querySelector('rwc-tabs');
    const customEventInitIgnore = {
      detail: {
        next: 0,
        origin: host
      }
    };
    autoEventDispatcher.dispatchEvent(new CustomEvent('indexChange', customEventInitIgnore));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-tabs
        rwc-key="rwc-tabs-auto"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="tabs-wrapper">
              <div class="tabs-container">
                <div class="tabs-inner-container">
                  <slot></slot>
                </div>
                <div class="indicator" style="width: 0px; left: 0px;"></div>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Tab 1</div>
        <div slot="" class="active">Tab 2</div>
      </rwc-tabs>
    `);
  });
  it('should handle the disconnect callback', async () => {
    const page = await newSpecPage({
      components: [RwcTabs],
      template: () => (h("rwc-tabs", null, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "" }, "Tab 2"))),
    });
    document.querySelector('rwc-tabs').remove();
    await page.waitForChanges();
  });
});
//# sourceMappingURL=tabs.spec.js.map
