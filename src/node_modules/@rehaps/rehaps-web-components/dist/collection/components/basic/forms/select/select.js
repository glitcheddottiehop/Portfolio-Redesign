import { h, Host } from "@stencil/core";
import ChevronDown from "@material-design-icons/svg/outlined/expand_more.svg";
export class RwcSelect {
  constructor() {
    this.icon = '';
    this.pointer = false;
    this.value = '';
    this.text = '';
    this.isOpen = false;
  }
  onSelectClick(event) {
    this.optionsSlot.assignedElements().forEach((element) => {
      if (event.target === element) {
        this.setValue(element.value);
      }
    });
  }
  onDropdownOpen() {
    this.isOpen = true;
  }
  onDropdownClose() {
    this.isOpen = false;
  }
  componentDidLoad() {
    this.setValue(this.value);
  }
  async setValue(value) {
    this.optionsSlot.assignedElements().forEach((element) => {
      if (value === element.value) {
        this.value = element.value;
        this.text = element.text;
        this.dropdownElement.setState(false);
      }
    });
  }
  render() {
    return (h(Host, null, h("div", { class: {
        container: true,
        pointer: this.pointer,
      } }, h("div", { class: "wrapper" }, h("div", { class: "value" }, this.text), h("div", { slot: "right", class: {
        rotate: true,
        open: this.isOpen
      } }, h("slot", { name: "icon-right" }, this.renderIcon()))), h("rwc-dropdown", { class: "dropdown", "open-mode": "toggle", size: "parent", mode: 'fixed', ref: (dropdown) => this.dropdownElement = dropdown }, h("slot", { name: "option", ref: (slot) => this.optionsSlot = slot })))));
  }
  renderIcon() {
    if (this.icon) {
      return (h("img", { src: this.icon, alt: "icon" }));
    }
    return (h("div", { innerHTML: ChevronDown, class: "icon svg-icon" }));
  }
  static get is() { return "rwc-select"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["select.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["select.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Path to the icon."
        },
        "attribute": "icon",
        "reflect": true,
        "defaultValue": "''"
      },
      "pointer": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Change cursor to pointer on hover."
        },
        "attribute": "pointer",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value of selected field."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "''"
      },
      "text": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Text of selected field."
        },
        "attribute": "text",
        "reflect": false,
        "defaultValue": "''"
      }
    };
  }
  static get states() {
    return {
      "isOpen": {}
    };
  }
  static get methods() {
    return {
      "setValue": {
        "complexType": {
          "signature": "(value: string) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "HTMLOptionElement": {
              "location": "global",
              "id": "global::HTMLOptionElement"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the value and text of the component to the value of the option element containing the passed value.",
          "tags": []
        }
      }
    };
  }
  static get listeners() {
    return [{
        "name": "click",
        "method": "onSelectClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "dropdownOpen",
        "method": "onDropdownOpen",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "dropdownClose",
        "method": "onDropdownClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=select.js.map
