import { newSpecPage } from "@stencil/core/testing";
import { RwcInput } from "../input";
import { simulateAllOffsets } from "../../../../../../jest/polyfill/offset";
import { simulateAssignedElements } from "../../../../../../jest/polyfill/slot";
import { InputEvent } from "../../../../../../jest/polyfill/events";
describe("RwcInput", () => {
  simulateAllOffsets();
  simulateAssignedElements();
  it("should render rwc-input component", async () => {
    const page = await newSpecPage({
      components: [RwcInput],
      html: `<rwc-input></rwc-input>`,
    });
    expect(page.root).toEqualHtml(`
      <rwc-input tabindex="0" type="text">
        <mock:shadow-root>
          <label class="label" htmlfor="" style="display: none;"></label>
          <div class="input-container">
            <div class="slot-container">
              <div class="slot-horizontal-flex">
                <slot name="left"></slot>
              </div>
            </div>
            <input autocomplete="on" class="input" placeholder="" type="text" value="">
            <div class="slot-container">
              <div class="slot-horizontal-flex">
                <slot name="right"></slot>
              </div>
            </div>
          </div>
          <p class="error-text"></p>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should render with disabled state", async () => {
    const page = await newSpecPage({
      components: [RwcInput],
      html: `<rwc-input disabled="true" label=""></rwc-input>`,
    });
    expect(page.root).toEqualHtml(`
      <rwc-input tabindex="0" type="text" class="disabled" disabled="true" label="">
        <mock:shadow-root>
          <label class="label" htmlfor="" style="display: none;"></label>
          <div class="input-container">
            <div class="slot-container">
              <div class="slot-horizontal-flex">
                <slot name="left"></slot>
              </div>
            </div>
            <input autocomplete="on" class="input" placeholder="" type="text" value="" disabled="">
            <div class="slot-container">
              <div class="slot-horizontal-flex">
                <slot name="right"></slot>
              </div>
            </div>
          </div>
          <p class="error-text"></p>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should handle focus and blur", async () => {
    const page = await newSpecPage({
      components: [RwcInput],
      html: `<rwc-input></rwc-input>`,
    });
    const input = page.body.querySelector("rwc-input");
    input.dispatchEvent(new Event("focus"));
    await page.waitForChanges();
    input.dispatchEvent(new Event("blur"));
    await page.waitForChanges();
  });
  it("should handle input event", async () => {
    const page = await newSpecPage({
      components: [RwcInput],
      html: `<rwc-input></rwc-input>`,
    });
    const input = page.body.querySelector("rwc-input");
    const inputEvent = jest.fn();
    input.addEventListener("input", inputEvent);
    input.value = "test";
    const event = new InputEvent("input", {
      data: "test",
      inputType: "insertText",
      isComposing: false,
    });
    input.dispatchEvent(event);
    expect(inputEvent).toHaveBeenCalledTimes(1);
    expect(inputEvent).toHaveBeenCalledWith(expect.objectContaining({ data: "test" }));
  });
  it("should handle validation errors", async () => {
    const page = await newSpecPage({
      components: [RwcInput],
      html: `<rwc-input></rwc-input>`,
    });
    const input = page.body.querySelector("rwc-input");
    input.validators = [
      {
        validate: (value) => value.length > 5,
        getMessage: () => "Input value must be at least 6 characters",
      },
    ];
    input.value = "test";
    input.validate();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-input tabindex="0" type="text">
        <mock:shadow-root>
          <label class="label" htmlfor="" style="display: none;"></label>
          <div class="input-container error">
            <div class="slot-container">
              <div class="slot-horizontal-flex">
                <slot name="left"></slot>
              </div>
            </div>
            <input autocomplete="on" class="input" placeholder="" type="text" value="test">
            <div class="slot-container">
              <div class="slot-horizontal-flex">
                <slot name="right"></slot>
              </div>
            </div>
          </div>
          <p class="error-text">Input value must be at least 6 characters</p>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
});
//# sourceMappingURL=input.spec.js.map
