import { Fragment, h, Host } from "@stencil/core";
import ExpandMore from "@material-design-icons/svg/round/expand_more.svg";
export class RwcAccordion {
  constructor() {
    this.open = false;
    this.renderDivider = true;
    this.renderIcon = true;
  }
  get animationDuration() {
    return Number.parseInt(getComputedStyle(this.host).getPropertyValue('--accordion-animation-duration'));
  }
  onHeadingClick() {
    this.setState(!this.open);
  }
  async setState(value) {
    if (this.animationCallback !== null) {
      clearTimeout(this.animationCallback);
    }
    this.open = value;
    if (value) {
      this.contentWrapperElement.style.height = `${this.contentElement.offsetHeight}px`;
    }
    else {
      this.contentWrapperElement.style.height = `${this.contentElement.offsetHeight}px`;
      await new Promise(requestAnimationFrame);
      this.contentWrapperElement.style.height = `0px`;
    }
    this.animationCallback = setTimeout(() => {
      this.contentWrapperElement.style.height = '';
      this.animationCallback = null;
    }, this.animationDuration);
  }
  render() {
    return (h(Host, { class: {
        open: this.open,
      } }, h("div", { class: {
        container: true,
        open: this.open
      } }, h("div", { class: {
        heading: true,
        'with-icon': this.renderIcon
      }, onClick: () => this.onHeadingClick() }, h("div", { class: "left" }, h("slot", { name: "heading" })), this.renderHeadingIconContainer()), h("div", { ref: (element) => this.contentWrapperElement = element, class: "content-wrapper" }, h("div", { ref: (element) => this.contentElement = element, class: "content" }, h("slot", null))), this.renderDividerElement())));
  }
  renderDividerElement() {
    if (this.renderDivider) {
      return h("div", { class: "divider" });
    }
    return h(Fragment, null);
  }
  renderHeadingIconContainer() {
    if (this.renderIcon) {
      return (h("div", { class: "right" }, h("slot", { name: "heading-icon" }, this.renderDefaultIcon())));
    }
    return h(Fragment, null);
  }
  renderDefaultIcon() {
    return h("div", { class: "icon rotate", innerHTML: ExpandMore });
  }
  static get is() { return "rwc-accordion"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./accordion.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["accordion.css"]
    };
  }
  static get properties() {
    return {
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The open state of the accordion."
        },
        "attribute": "open",
        "reflect": true,
        "defaultValue": "false"
      },
      "renderDivider": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables rendering of the divider."
        },
        "attribute": "render-divider",
        "reflect": false,
        "defaultValue": "true"
      },
      "renderIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables rendering of the heading icon."
        },
        "attribute": "render-icon",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get methods() {
    return {
      "setState": {
        "complexType": {
          "signature": "(value: boolean) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the open state of the accordion to the passed value",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
}
//# sourceMappingURL=accordion.js.map
