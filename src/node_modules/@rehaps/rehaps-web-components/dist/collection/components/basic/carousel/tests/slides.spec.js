import { Fragment, h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { simulateAssignedElements } from "../../../../../jest/polyfill/slot";
import { RwcSlides } from "../slides";
import { simulateMouseEvent } from "../../../../../jest/simulation/mouse";
import { RwcTabs } from "../../tabs/tabs";
const containerExpectedClassesDefault = ['container'];
describe('rwc-slides', () => {
  simulateAssignedElements();
  it('should render the slides', async () => {
    const page = await newSpecPage({
      components: [RwcSlides],
      template: () => (h("rwc-slides", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-slides
        rwc-key="rwc-slides-1"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="slide-wrapper">
              <div class="slide-flex">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-slides>
    `);
  });
  it('should handle the slot change', async () => {
    const page = await newSpecPage({
      components: [RwcSlides],
      template: () => (h("rwc-slides", null, h("div", { slot: "" }, "Slide 1"), h("div", { slot: "", id: "slide-2" }, "Slide 2"))),
    });
    const slideComponent = document.querySelector('rwc-slides');
    document.querySelector('#slide-2').remove();
    slideComponent.shadowRoot.querySelector('slot').dispatchEvent(new Event('slotchange'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-slides
        rwc-key="rwc-slides-2"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="slide-wrapper">
              <div class="slide-flex">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="" class="active">Slide 1</div>
      </rwc-slides>
    `);
  });
  it('should handle the auto-slide', async () => {
    const page = await newSpecPage({
      components: [RwcSlides],
      template: () => (h("rwc-slides", { autoSlide: true, autoSlideDelay: 50 }, h("div", { slot: "" }, "Slide 1"), h("div", { slot: "" }, "Slide 2"))),
    });
    const slidesComponent = document.querySelector('rwc-slides');
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 51);
    });
    expect(page.root).toEqualHtml(`
      <rwc-slides
        rwc-key="rwc-slides-3"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="slide-wrapper">
              <div class="slide-flex">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Slide 1</div>
        <div slot="" class="active">Slide 2</div>
      </rwc-slides>
    `);
    simulateMouseEvent(slidesComponent, 'mouseenter', 0, 0);
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 51);
    });
    expect(page.root).toEqualHtml(`
      <rwc-slides
        rwc-key="rwc-slides-3"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="slide-wrapper">
              <div class="slide-flex">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Slide 1</div>
        <div slot="" class="active">Slide 2</div>
      </rwc-slides>
    `);
    simulateMouseEvent(slidesComponent, 'mouseleave', 0, 0);
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 51);
    });
    expect(page.root).toEqualHtml(`
      <rwc-slides
        rwc-key="rwc-slides-3"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="slide-wrapper">
              <div class="slide-flex">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="" class="active">Slide 1</div>
        <div slot="">Slide 2</div>
      </rwc-slides>
    `);
    slidesComponent.autoSlide = false;
  });
  it('should auto register goTo events', async () => {
    const page = await newSpecPage({
      components: [RwcSlides, RwcTabs],
      template: () => (h(Fragment, null, h("rwc-slides", { rwcKey: "rwc-slides-auto-goTo" }, h("div", { slot: "" }, "Slide 1"), h("div", { slot: "" }, "Slide 2")), h("rwc-tabs", { rwcKey: "rwc-tabs-1", "data-rwc-goTo": "rwc-slides-auto-goTo" }, h("div", { slot: "" }, "Tab 1"), h("div", { slot: "", id: "tab-2" }, "Tab 2")))),
    });
    document.querySelector('#tab-2').click();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-slides
        rwc-key="rwc-slides-auto-goTo"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <div class="slide-wrapper">
              <div class="slide-flex">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <div slot="">Slide 1</div>
        <div slot="" class="active">Slide 2</div>
      </rwc-slides>
    `);
  });
  it('should handle the disconnect callback', async () => {
    const page = await newSpecPage({
      components: [RwcSlides],
      template: () => (h("rwc-slides", null, h("div", { slot: "" }, "Slide 1"), h("div", { slot: "" }, "Slide 2"))),
    });
    document.querySelector('rwc-slides').remove();
    await page.waitForChanges();
  });
});
//# sourceMappingURL=slides.spec.js.map
