{"version":3,"file":"tag.spec.js","sourceRoot":"","sources":["../../../../../../src/components/basic/tag/tests/tag.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;EACvB,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;IACrC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,eACE,SAAS,EAAG,IAAI,eAGR,CACX;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;IACtC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,eACE,SAAS,EAAG,IAAI,EAChB,UAAU,EAAG,IAAI,eAGT,CACX;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;IAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,eACE,SAAS,EAAG,IAAI,EAChB,UAAU,EAAG,IAAI,EACjB,IAAI,EAAC,uBAAuB,eAGpB,CACX;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;IAC/C,MAAM,WAAW,CAAC;MAChB,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,eACE,SAAS,EAAG,IAAI,EAChB,UAAU,EAAG,IAAI,EACjB,IAAI,EAAC,uBAAuB,eAGpB,CACX;KACF,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACvD,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IACtB,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IAC/C,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,eAAe,CAAiB,CAAC,KAAK,EAAE,CAAC;IAChF,MAAM,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAA","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcTag } from '../tag';\n\ndescribe('rwc-tag', () => {\n  it('should render the tag', async () => {\n    const page = await newSpecPage({\n      components: [RwcTag],\n      template: () => (\n        <rwc-tag\n          clickable={ true }\n        >\n          Tag text\n        </rwc-tag>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-tag>\n        <mock:shadow-root>\n          <div class=\"container clickable\">\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        Tag text\n      </rwc-tag>\n    `);\n  });\n\n  it('should render the icon', async () => {\n    const page = await newSpecPage({\n      components: [RwcTag],\n      template: () => (\n        <rwc-tag\n          clickable={ true }\n          renderIcon={ true }\n        >\n          Tag text\n        </rwc-tag>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-tag>\n        <mock:shadow-root>\n          <div class=\"container clickable\">\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n              <div class=\"icon-wrapper\">\n                <slot name=\"icon\">\n                  <div class=\"icon svg-icon\"></div>\n                </slot>\n              </div>\n          </div>\n        </mock:shadow-root>\n        Tag text\n      </rwc-tag>\n    `);\n  });\n  \n  it('should render the icon as url', async () => {\n    const page = await newSpecPage({\n      components: [RwcTag],\n      template: () => (\n        <rwc-tag\n          clickable={ true }\n          renderIcon={ true }\n          icon=\"https://test-icon.png\"\n        >\n          Tag text\n        </rwc-tag>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-tag>\n        <mock:shadow-root>\n          <div class=\"container clickable\">\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n              <div class=\"icon-wrapper\">\n                <slot name=\"icon\">\n                  <img class=\"icon\" src=\"https://test-icon.png\" alt=\"test-icon\"></img>\n                </slot>\n              </div>\n          </div>\n        </mock:shadow-root>\n        Tag text\n      </rwc-tag>\n    `);\n  });\n  \n  it('should emit the deleteTag event', async () => {\n    await newSpecPage({\n      components: [RwcTag],\n      template: () => (\n        <rwc-tag\n          clickable={ true }\n          renderIcon={ true }\n          icon=\"https://test-icon.png\"\n        >\n          Tag text\n        </rwc-tag>\n      ),\n    });\n    \n    const tagComponent = document.querySelector('rwc-tag');\n    const spy = jest.fn();\n    tagComponent.addEventListener('deleteTag', spy);\n    (tagComponent.shadowRoot.querySelector('.icon-wrapper') as HTMLElement).click();\n    expect(spy).toBeCalledTimes(1);\n  });\n})\n"]}