{"version":3,"file":"input.spec.js","sourceRoot":"","sources":["../../../../../../../src/components/basic/forms/input/tests/input.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from \"@stencil/core/testing\";\nimport { RwcInput } from \"../input\";\nimport { simulateAllOffsets } from \"../../../../../../jest/polyfill/offset\";\nimport { simulateAssignedElements } from \"../../../../../../jest/polyfill/slot\";\nimport { InputEvent } from \"../../../../../../jest/polyfill/events\";\n\ndescribe(\"RwcInput\", () => {\n  simulateAllOffsets();\n  simulateAssignedElements();\n\n  it(\"should render rwc-input component\", async () => {\n    const page = await newSpecPage({\n      components: [RwcInput],\n      html: `<rwc-input></rwc-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-input tabindex=\"0\" type=\"text\">\n        <mock:shadow-root>\n          <label class=\"label\" htmlfor=\"\" style=\"display: none;\"></label>\n          <div class=\"input-container\">\n            <div class=\"slot-container\">\n              <div class=\"slot-horizontal-flex\">\n                <slot name=\"left\"></slot>\n              </div>\n            </div>\n            <input autocomplete=\"on\" class=\"input\" placeholder=\"\" type=\"text\" value=\"\">\n            <div class=\"slot-container\">\n              <div class=\"slot-horizontal-flex\">\n                <slot name=\"right\"></slot>\n              </div>\n            </div>\n          </div>\n          <p class=\"error-text\"></p>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should render with disabled state\", async () => {\n    const page = await newSpecPage({\n      components: [RwcInput],\n      html: `<rwc-input disabled=\"true\" label=\"\"></rwc-input>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-input tabindex=\"0\" type=\"text\" class=\"disabled\" disabled=\"true\" label=\"\">\n        <mock:shadow-root>\n          <label class=\"label\" htmlfor=\"\" style=\"display: none;\"></label>\n          <div class=\"input-container\">\n            <div class=\"slot-container\">\n              <div class=\"slot-horizontal-flex\">\n                <slot name=\"left\"></slot>\n              </div>\n            </div>\n            <input autocomplete=\"on\" class=\"input\" placeholder=\"\" type=\"text\" value=\"\" disabled=\"\">\n            <div class=\"slot-container\">\n              <div class=\"slot-horizontal-flex\">\n                <slot name=\"right\"></slot>\n              </div>\n            </div>\n          </div>\n          <p class=\"error-text\"></p>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should handle focus and blur\", async () => {\n    const page = await newSpecPage({\n      components: [RwcInput],\n      html: `<rwc-input></rwc-input>`,\n    });\n\n    const input = page.body.querySelector(\"rwc-input\");\n\n    input.dispatchEvent(new Event(\"focus\"));\n    await page.waitForChanges();\n    input.dispatchEvent(new Event(\"blur\"));\n    await page.waitForChanges();\n  });\n\n  it(\"should handle input event\", async () => {\n    const page = await newSpecPage({\n      components: [RwcInput],\n      html: `<rwc-input></rwc-input>`,\n    });\n\n    const input = page.body.querySelector(\"rwc-input\");\n\n    const inputEvent = jest.fn();\n    input.addEventListener(\"input\", inputEvent);\n    input.value = \"test\";\n    const event = new InputEvent(\"input\", {\n      data: \"test\",\n      inputType: \"insertText\",\n      isComposing: false,\n    });\n    input.dispatchEvent(event);\n    expect(inputEvent).toHaveBeenCalledTimes(1);\n    expect(inputEvent).toHaveBeenCalledWith(\n      expect.objectContaining({ data: \"test\" })\n    );\n  });\n\n  it(\"should handle validation errors\", async () => {\n    const page = await newSpecPage({\n      components: [RwcInput],\n      html: `<rwc-input></rwc-input>`,\n    });\n\n    const input = page.body.querySelector(\"rwc-input\");\n\n    input.validators = [\n      {\n        validate: (value) => value.length > 5,\n        getMessage: () => \"Input value must be at least 6 characters\",\n      },\n    ];\n\n    input.value = \"test\";\n    input.validate();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-input tabindex=\"0\" type=\"text\">\n        <mock:shadow-root>\n          <label class=\"label\" htmlfor=\"\" style=\"display: none;\"></label>\n          <div class=\"input-container error\">\n            <div class=\"slot-container\">\n              <div class=\"slot-horizontal-flex\">\n                <slot name=\"left\"></slot>\n              </div>\n            </div>\n            <input autocomplete=\"on\" class=\"input\" placeholder=\"\" type=\"text\" value=\"test\">\n            <div class=\"slot-container\">\n              <div class=\"slot-horizontal-flex\">\n                <slot name=\"right\"></slot>\n              </div>\n            </div>\n          </div>\n          <p class=\"error-text\">Input value must be at least 6 characters</p>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n});\n"]}