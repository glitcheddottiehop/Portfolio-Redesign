import { h, Host } from "@stencil/core";
import { EventManager } from "../../../utils/actions/eventManager";
import { RWCActionHelper } from "../../../utils/actions/rwcActionHelper";
export class RwcSlides {
  constructor() {
    this.eventManager = new EventManager();
    this.actions = ['goTo'];
    this.autoSlideCoroutine = null;
    this.rwcKey = RWCActionHelper.getDefaultComponentKey('slides');
    this.defaultSlide = 0;
    this.autoSlide = false;
    this.autoSlideDelay = 5000;
    this.activeSlide = 0;
  }
  onAutoSlideChange() {
    this.init();
  }
  onMouseEnter() {
    clearInterval(this.autoSlideCoroutine);
  }
  onMouseLeave() {
    if (this.autoSlide) {
      this.initAutoSlide();
    }
  }
  validateTargetIndex(value) {
    if (value > this.slides.length - 1 || value < 0) {
      return 0;
    }
    return value;
  }
  componentDidLoad() {
    this.init();
  }
  disconnectedCallback() {
    clearInterval(this.autoSlideCoroutine);
    this.eventManager.clearEventListeners();
  }
  init() {
    this.eventManager.clearEventListeners();
    this.slides = this.slideContainer.assignedElements();
    this.initDefaultSlide();
    this.initGoToEventListeners();
    clearInterval(this.autoSlideCoroutine);
    if (this.autoSlide) {
      this.initAutoSlide();
    }
  }
  initDefaultSlide() {
    var _a;
    this.activeSlide = this.validateTargetIndex(this.activeSlide);
    if (((_a = this.slides) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      this.slides[this.activeSlide].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);
    }
  }
  initAutoSlide() {
    clearInterval(this.autoSlideCoroutine);
    this.autoSlideCoroutine = setInterval(() => {
      this.goTo(this.validateTargetIndex(this.activeSlide + 1));
    }, this.autoSlideDelay);
  }
  async goTo(targetIndex) {
    const parsedIndex = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);
    if (this.activeSlide !== parsedIndex) {
      this.slides.forEach(slide => {
        slide.classList.remove(RwcSlides.ACTIVE_SLIDE_CLASS);
      });
      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;
      this.setActiveSlide(parsedIndex, originalEvent);
    }
  }
  setActiveSlide(targetIndex, originalEvent) {
    var _a;
    this.slides[targetIndex].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);
    this.changeEvent.emit((_a = originalEvent === null || originalEvent === void 0 ? void 0 : originalEvent.detail) !== null && _a !== void 0 ? _a : { origin: this.host, next: targetIndex, previous: this.activeSlide });
    this.activeSlide = targetIndex;
  }
  initGoToEventListeners() {
    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');
  }
  render() {
    return (h(Host, null, h("div", { class: {
        container: true
      } }, h("div", { class: "slide-wrapper" }, h("div", { class: "slide-flex" }, h("slot", { ref: (slot) => this.slideContainer = slot, onSlotchange: () => this.init() }))))));
  }
  static get is() { return "rwc-slides"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["slides.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["slides.css"]
    };
  }
  static get properties() {
    return {
      "rwcKey": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Key used for initializing event listeners."
        },
        "attribute": "rwc-key",
        "reflect": true,
        "defaultValue": "RWCActionHelper.getDefaultComponentKey('slides')"
      },
      "defaultSlide": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The active slide on component load."
        },
        "attribute": "default-slide",
        "reflect": false,
        "defaultValue": "0"
      },
      "autoSlide": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable auto slide change."
        },
        "attribute": "auto-slide",
        "reflect": false,
        "defaultValue": "false"
      },
      "autoSlideDelay": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Auto slide change delay in milliseconds."
        },
        "attribute": "auto-slide-delay",
        "reflect": false,
        "defaultValue": "5000"
      }
    };
  }
  static get states() {
    return {
      "activeSlide": {}
    };
  }
  static get events() {
    return [{
        "method": "changeEvent",
        "name": "indexChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event fired when active slide has been changed."
        },
        "complexType": {
          "original": "GoToEventDetail",
          "resolved": "GoToEventDetail",
          "references": {
            "GoToEventDetail": {
              "location": "global",
              "id": "global::GoToEventDetail"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "goTo": {
        "complexType": {
          "signature": "(targetIndex: number | CustomEvent) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "CustomEvent": {
              "location": "global",
              "id": "global::CustomEvent"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Change active tab to provided index and start indicator animation.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
  static get watchers() {
    return [{
        "propName": "autoSlide",
        "methodName": "onAutoSlideChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "mouseenter",
        "method": "onMouseEnter",
        "target": undefined,
        "capture": false,
        "passive": true
      }, {
        "name": "mouseleave",
        "method": "onMouseLeave",
        "target": undefined,
        "capture": false,
        "passive": true
      }];
  }
}
RwcSlides.ACTIVE_SLIDE_CLASS = 'active';
//# sourceMappingURL=slides.js.map
