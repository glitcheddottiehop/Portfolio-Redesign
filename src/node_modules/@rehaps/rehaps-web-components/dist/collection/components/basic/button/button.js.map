{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../../../src/components/basic/button/button.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Prop, Host, FunctionalComponent, Fragment, Listen } from '@stencil/core';\nimport ChevronRight from '@material-design-icons/svg/outlined/chevron_right.svg';\nimport ChevronLeft from '@material-design-icons/svg/outlined/chevron_left.svg';\nimport { ButtonTheme, ButtonType, ButtonWidth } from '../../../interfaces/components/basic/button/button';\nimport { FileUtils } from '../../../utils/data/file';\n\n/**\n * @slot icon - Slot for the custom icon html.\n * @slot default - Slot for the content of the button\n */\n@Component({\n  tag: 'rwc-button',\n  styleUrl: 'button.scss',\n  shadow: true\n})\nexport class RwcButton {\n\n  /**\n   * The reference to the container element.\n   */\n  private containerElement: HTMLElement;\n\n  /**\n   * Path to the right icon.\n   */\n  @Prop() iconRight: string = '';\n\n  /**\n   * Set right icon visible.\n   */\n  @Prop() showIconRight: boolean = false;\n\n  /**\n  * Path to the left icon.\n  */\n  @Prop() iconLeft: string = '';\n\n  /**\n  * Set left icon visible.\n  */\n  @Prop() showIconLeft: boolean = false;\n\n  /**\n  * Set button type.\n  */\n  @Prop({ reflect: true }) type: ButtonType = 'filled';\n\n  /**\n  * Set button theme.\n  */\n  @Prop({ reflect: true }) theme: ButtonTheme = 'default';\n\n  /**\n  * Set button width.\n  */\n  @Prop() width: ButtonWidth = 'auto';\n\n  /**\n   * Set animation.\n   */\n  @Prop() ripple: boolean = false;\n\n  /**\n   * Set rendering of box-shadow.\n   */\n  @Prop() renderShadow: boolean = true;\n\n  /**\n   * Creates ripple animation on click.\n   */\n  @Listen('click')\n  onButtonClick(event: MouseEvent): void {\n    if (this.ripple) {\n      this.createRipple(event);\n    }\n  }\n\n  /**\n   * Renders the ripple animation.\n   */\n  private createRipple(event: MouseEvent): void {\n    const circle = document.createElement('span');\n    const diameter = Math.max(this.containerElement.clientWidth, this.containerElement.clientHeight);\n    const radius = diameter / 2;\n\n    circle.style.width = circle.style.height = `${ diameter }px`;\n    circle.style.left = `${ event.clientX - (this.containerElement.getBoundingClientRect().left + window.scrollX + radius) }px`;\n    circle.style.top = `${ event.clientY - (this.containerElement.getBoundingClientRect().top + window.scrollY + radius) }px`;\n    circle.classList.add('ripple');\n\n    const ripple = this.containerElement.querySelector('.ripple');\n\n    if (ripple) {\n      ripple.remove();\n    }\n\n    this.containerElement.appendChild(circle);\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={ (element: HTMLElement) => this.containerElement = element }\n          class={ {\n            container: true,\n            shadow: this.renderShadow,\n            [`type-${ this.type }`]: true,\n            [`theme-${ this.theme }`]: true,\n            [`width-${ this.width }`]: true,\n          } }>\n          <div class=\"icon-wrapper\">\n            { this.renderLeftIconWrapper() }\n          </div>\n          <div class=\"text\">\n            <slot></slot>\n          </div>\n          <div class=\"icon-wrapper\">\n            { this.renderRightIconWrapper() }\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the right icon wrapper.\n   */\n  private renderRightIconWrapper(): FunctionalComponent {\n    if (this.showIconRight) {\n      return (\n        <Fragment>\n          <slot name=\"icon\">\n            { this.renderRightIcon() }\n          </slot>\n        </Fragment >\n      )\n    }\n  }\n\n  /**\n  * Renders the left icon wrapper.\n  */\n  private renderLeftIconWrapper(): FunctionalComponent {\n    if (this.showIconLeft) {\n      return (\n        <Fragment>\n          <slot name=\"icon\">\n            { this.renderLeftIcon() }\n          </slot>\n        </Fragment >\n      )\n    }\n  }\n\n  /**\n   * Renders the right icon element.\n   */\n  private renderRightIcon(): FunctionalComponent {\n    if (this.iconRight) {\n      return (\n        <Fragment>\n          <img class=\"icon\" src={ this.iconRight } alt={ FileUtils.getCleanFileName(this.iconRight) }></img>\n        </Fragment>\n      )\n    }\n    return (\n      <Fragment>\n        <div innerHTML={ ChevronRight } class=\"icon svg-icon\"></div>\n      </Fragment>\n    )\n  }\n\n  /**\n   * Renders the left icon element.\n   */\n  private renderLeftIcon(): FunctionalComponent {\n    if (this.iconLeft) {\n      return (\n        <Fragment>\n          <img class=\"icon\" src={ this.iconLeft } alt={ FileUtils.getCleanFileName(this.iconLeft) }></img>\n        </Fragment>\n      )\n    }\n    if (this.showIconLeft) {\n      return (\n        <Fragment>\n          <div innerHTML={ ChevronLeft } class=\"icon svg-icon\">\n          </div>\n        </Fragment>\n      )\n    }\n  }\n}\n"]}