import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcTag } from "../tag";
describe('rwc-tag', () => {
  it('should render the tag', async () => {
    const page = await newSpecPage({
      components: [RwcTag],
      template: () => (h("rwc-tag", { clickable: true }, "Tag text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tag>
        <mock:shadow-root>
          <div class="container clickable">
            <div class="text">
              <slot></slot>
            </div>
          </div>
        </mock:shadow-root>
        Tag text
      </rwc-tag>
    `);
  });
  it('should render the icon', async () => {
    const page = await newSpecPage({
      components: [RwcTag],
      template: () => (h("rwc-tag", { clickable: true, renderIcon: true }, "Tag text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tag>
        <mock:shadow-root>
          <div class="container clickable">
            <div class="text">
              <slot></slot>
            </div>
              <div class="icon-wrapper">
                <slot name="icon">
                  <div class="icon svg-icon"></div>
                </slot>
              </div>
          </div>
        </mock:shadow-root>
        Tag text
      </rwc-tag>
    `);
  });
  it('should render the icon as url', async () => {
    const page = await newSpecPage({
      components: [RwcTag],
      template: () => (h("rwc-tag", { clickable: true, renderIcon: true, icon: "https://test-icon.png" }, "Tag text")),
    });
    expect(page.root).toEqualHtml(`
      <rwc-tag>
        <mock:shadow-root>
          <div class="container clickable">
            <div class="text">
              <slot></slot>
            </div>
              <div class="icon-wrapper">
                <slot name="icon">
                  <img class="icon" src="https://test-icon.png" alt="test-icon"></img>
                </slot>
              </div>
          </div>
        </mock:shadow-root>
        Tag text
      </rwc-tag>
    `);
  });
  it('should emit the deleteTag event', async () => {
    await newSpecPage({
      components: [RwcTag],
      template: () => (h("rwc-tag", { clickable: true, renderIcon: true, icon: "https://test-icon.png" }, "Tag text")),
    });
    const tagComponent = document.querySelector('rwc-tag');
    const spy = jest.fn();
    tagComponent.addEventListener('deleteTag', spy);
    tagComponent.shadowRoot.querySelector('.icon-wrapper').click();
    expect(spy).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=tag.spec.js.map
