{"version":3,"file":"slides.js","sourceRoot":"","sources":["../../../../../src/components/basic/carousel/slides.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, State, Prop, Event, EventEmitter, Method, FunctionalComponent, Listen, Host, Watch } from '@stencil/core';\nimport { IPaginable } from '../../../interfaces/actions/IPaginable';\nimport { EventManager } from '../../../utils/actions/eventManager';\nimport { RWCActionHelper } from '../../../utils/actions/rwcActionHelper';\n\n@Component({\n  tag: 'rwc-slides',\n  styleUrl: 'slides.scss',\n  shadow: true\n})\nexport class RwcSlides implements IPaginable {\n  /**\n   * The class name used for the active slide element.\n   */\n  static ACTIVE_SLIDE_CLASS = 'active';\n\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcSlidesElement;\n\n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  public eventManager: EventManager = new EventManager();\n\n  /**\n   * List of the actions available for the Slides.\n   */\n  public actions: 'goTo'[] = ['goTo'];\n\n  /**\n   * The coroutine handling the slide animation.\n   */\n  private autoSlideCoroutine: NodeJS.Timer = null;\n\n  /**\n   * The reference to the element containing slides.\n   */\n  private slideContainer: HTMLSlotElement;\n\n  /**\n   * The reference to the slide elements.\n   */\n  private slides?: HTMLElement[];\n\n  /**\n   * Key used for initializing event listeners.\n   */\n  @Prop({ reflect: true }) rwcKey = RWCActionHelper.getDefaultComponentKey('slides');\n\n  /**\n   * The active slide on component load.\n   */\n  @Prop() defaultSlide: number = 0;\n\n  /**\n   * Enable auto slide change.\n   */\n  @Prop() autoSlide: boolean = false;\n\n  /**\n   * Auto slide change delay in milliseconds.\n   */\n  @Prop() autoSlideDelay: number = 5000;\n\n  /**\n   * Event fired when active slide has been changed.\n   */\n  @Event({ eventName: 'indexChange' }) changeEvent: EventEmitter<GoToEventDetail>;\n\n  /**\n   * Currently active tab.\n   */\n  @State() activeSlide: number = 0;\n  \n  @Watch('autoSlide')\n  onAutoSlideChange(): void {\n    this.init();\n  }\n\n  /**\n   * Pauses the auto slide if mouse is inside the content.\n   */\n  @Listen('mouseenter')\n  onMouseEnter(): void {\n    clearInterval(this.autoSlideCoroutine);\n  }\n\n  /**\n   * Resumes the auto slide if mouse is outside of the content.\n   */\n  @Listen('mouseleave')\n  onMouseLeave(): void {\n    if (this.autoSlide) {\n      this.initAutoSlide();\n    }\n  }\n  \n  /**\n   * Gets the currently active tab index in valid range.\n   */\n  private validateTargetIndex(value: number): number {\n    if (value > this.slides.length - 1 || value < 0) {\n      return 0;\n    }\n    \n    return value;\n  }\n\n  /**\n   * Initializes event listeners on render.\n   */\n  componentDidLoad(): void {\n    this.init();\n  }\n\n  /**\n   * Destroy component's event listeners before component is destroyed.\n   */\n  disconnectedCallback(): void {\n    clearInterval(this.autoSlideCoroutine);\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Initialize the component.\n   */\n  init(): void {\n    this.eventManager.clearEventListeners();\n    this.slides = this.slideContainer.assignedElements() as HTMLElement[];\n    this.initDefaultSlide();\n    this.initGoToEventListeners();\n    clearInterval(this.autoSlideCoroutine);\n    if (this.autoSlide) {\n      this.initAutoSlide();\n    }\n  }\n\n  /**\n   * Initialize default tab.\n   */\n  initDefaultSlide(): void {\n    this.activeSlide = this.validateTargetIndex(this.activeSlide);\n    if (this.slides?.length > 0) {\n      this.slides[this.activeSlide].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);\n    }\n  }\n\n  /**\n   * Initialize auto slide coroutine.\n   */\n  initAutoSlide(): void {\n    clearInterval(this.autoSlideCoroutine);\n    this.autoSlideCoroutine = setInterval(() => {\n      this.goTo(this.validateTargetIndex(this.activeSlide + 1));\n    }, this.autoSlideDelay);\n  }\n\n  /**\n   * Change active tab to provided index and start indicator animation.\n   */\n  @Method()\n  async goTo(targetIndex: number | CustomEvent): Promise<void> {\n    const parsedIndex: number = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);\n    \n    if (this.activeSlide !== parsedIndex) {\n      this.slides.forEach(slide => {\n        slide.classList.remove(RwcSlides.ACTIVE_SLIDE_CLASS);\n      });\n\n      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;\n      this.setActiveSlide(parsedIndex, originalEvent);\n    }\n  }\n\n  /**\n   * Set html and class properties for active slide and fire change event.\n   */\n  setActiveSlide(targetIndex: number, originalEvent?: CustomEvent): void {\n    this.slides[targetIndex].classList.add(RwcSlides.ACTIVE_SLIDE_CLASS);\n    this.changeEvent.emit(originalEvent?.detail ?? { origin: this.host, next: targetIndex, previous: this.activeSlide });\n    this.activeSlide = targetIndex;\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click.\n   */\n  initGoToEventListeners(): void {\n    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          class={ {\n            container: true\n          } }\n        >\n          <div class=\"slide-wrapper\">\n            <div class=\"slide-flex\">\n              <slot\n                ref={ (slot: HTMLSlotElement) => this.slideContainer = slot }\n                onSlotchange={ () => this.init() }\n              />\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}