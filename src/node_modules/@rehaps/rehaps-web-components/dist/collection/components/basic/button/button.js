import { h, Host, Fragment } from "@stencil/core";
import ChevronRight from "@material-design-icons/svg/outlined/chevron_right.svg";
import ChevronLeft from "@material-design-icons/svg/outlined/chevron_left.svg";
import { FileUtils } from "../../../utils/data/file";
export class RwcButton {
  constructor() {
    this.iconRight = '';
    this.showIconRight = false;
    this.iconLeft = '';
    this.showIconLeft = false;
    this.type = 'filled';
    this.theme = 'default';
    this.width = 'auto';
    this.ripple = false;
    this.renderShadow = true;
  }
  onButtonClick(event) {
    if (this.ripple) {
      this.createRipple(event);
    }
  }
  createRipple(event) {
    const circle = document.createElement('span');
    const diameter = Math.max(this.containerElement.clientWidth, this.containerElement.clientHeight);
    const radius = diameter / 2;
    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${event.clientX - (this.containerElement.getBoundingClientRect().left + window.scrollX + radius)}px`;
    circle.style.top = `${event.clientY - (this.containerElement.getBoundingClientRect().top + window.scrollY + radius)}px`;
    circle.classList.add('ripple');
    const ripple = this.containerElement.querySelector('.ripple');
    if (ripple) {
      ripple.remove();
    }
    this.containerElement.appendChild(circle);
  }
  render() {
    return (h(Host, null, h("div", { ref: (element) => this.containerElement = element, class: {
        container: true,
        shadow: this.renderShadow,
        [`type-${this.type}`]: true,
        [`theme-${this.theme}`]: true,
        [`width-${this.width}`]: true,
      } }, h("div", { class: "icon-wrapper" }, this.renderLeftIconWrapper()), h("div", { class: "text" }, h("slot", null)), h("div", { class: "icon-wrapper" }, this.renderRightIconWrapper()))));
  }
  renderRightIconWrapper() {
    if (this.showIconRight) {
      return (h(Fragment, null, h("slot", { name: "icon" }, this.renderRightIcon())));
    }
  }
  renderLeftIconWrapper() {
    if (this.showIconLeft) {
      return (h(Fragment, null, h("slot", { name: "icon" }, this.renderLeftIcon())));
    }
  }
  renderRightIcon() {
    if (this.iconRight) {
      return (h(Fragment, null, h("img", { class: "icon", src: this.iconRight, alt: FileUtils.getCleanFileName(this.iconRight) })));
    }
    return (h(Fragment, null, h("div", { innerHTML: ChevronRight, class: "icon svg-icon" })));
  }
  renderLeftIcon() {
    if (this.iconLeft) {
      return (h(Fragment, null, h("img", { class: "icon", src: this.iconLeft, alt: FileUtils.getCleanFileName(this.iconLeft) })));
    }
    if (this.showIconLeft) {
      return (h(Fragment, null, h("div", { innerHTML: ChevronLeft, class: "icon svg-icon" })));
    }
  }
  static get is() { return "rwc-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["button.css"]
    };
  }
  static get properties() {
    return {
      "iconRight": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Path to the right icon."
        },
        "attribute": "icon-right",
        "reflect": false,
        "defaultValue": "''"
      },
      "showIconRight": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set right icon visible."
        },
        "attribute": "show-icon-right",
        "reflect": false,
        "defaultValue": "false"
      },
      "iconLeft": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Path to the left icon."
        },
        "attribute": "icon-left",
        "reflect": false,
        "defaultValue": "''"
      },
      "showIconLeft": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set left icon visible."
        },
        "attribute": "show-icon-left",
        "reflect": false,
        "defaultValue": "false"
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonType",
          "resolved": "\"filled\" | \"outline\"",
          "references": {
            "ButtonType": {
              "location": "import",
              "path": "../../../interfaces/components/basic/button/button",
              "id": "src/interfaces/components/basic/button/button.ts::ButtonType"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set button type."
        },
        "attribute": "type",
        "reflect": true,
        "defaultValue": "'filled'"
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonTheme",
          "resolved": "\"blue\" | \"dark\" | \"default\" | \"orange\" | \"red\"",
          "references": {
            "ButtonTheme": {
              "location": "import",
              "path": "../../../interfaces/components/basic/button/button",
              "id": "src/interfaces/components/basic/button/button.ts::ButtonTheme"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set button theme."
        },
        "attribute": "theme",
        "reflect": true,
        "defaultValue": "'default'"
      },
      "width": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonWidth",
          "resolved": "\"auto\" | \"full\"",
          "references": {
            "ButtonWidth": {
              "location": "import",
              "path": "../../../interfaces/components/basic/button/button",
              "id": "src/interfaces/components/basic/button/button.ts::ButtonWidth"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set button width."
        },
        "attribute": "width",
        "reflect": false,
        "defaultValue": "'auto'"
      },
      "ripple": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set animation."
        },
        "attribute": "ripple",
        "reflect": false,
        "defaultValue": "false"
      },
      "renderShadow": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set rendering of box-shadow."
        },
        "attribute": "render-shadow",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get listeners() {
    return [{
        "name": "click",
        "method": "onButtonClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=button.js.map
