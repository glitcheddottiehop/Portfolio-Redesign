import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcDropdown } from "../dropdown";
import { simulateAllOffsets, simulateOffsetSizes } from "../../../../../jest/polyfill/offset";
const containerExpectedClassesDefault = ['wrapper', 'mode-fixed', 'size-parent'];
describe('rwc-dropdown', () => {
  simulateAllOffsets();
  it('should render the dropdown', async () => {
    const page = await newSpecPage({
      components: [RwcDropdown],
      template: () => (h("rwc-dropdown", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-dropdown open-mode="manual" position="bottom" size="parent" mode="fixed">
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}" style="height: 0px;">
            <div class="container">
              <div class="content">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-dropdown>
    `);
  });
  it('should handle the scroll event', async () => {
    const page = await newSpecPage({
      components: [RwcDropdown],
      template: () => (h("div", null, "Dropdown parent", h("rwc-dropdown", null))),
    });
    global.dispatchEvent(new Event('scroll'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-dropdown open-mode="manual" position="bottom" size="parent" mode="fixed">
        <mock:shadow-root>
          <div
            class="${containerExpectedClassesDefault.join(' ')}"
            style="height: 0px; top: 0px;"
          >
            <div class="container">
              <div class="content">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-dropdown>
    `);
  });
  it('should handle the resize event', async () => {
    const page = await newSpecPage({
      components: [RwcDropdown],
      template: () => (h("div", { id: "parent" }, "Dropdown parent", h("rwc-dropdown", { openMode: "hover" }))),
    });
    document.querySelector('#parent').dispatchEvent(new MouseEvent('mouseenter'));
    await page.waitForChanges();
    global.dispatchEvent(new Event('resize'));
    await page.waitForChanges();
    await new Promise(requestAnimationFrame);
    expect(page.root).toEqualHtml(`
      <rwc-dropdown open-mode="hover" position="bottom" size="parent" mode="fixed">
        <mock:shadow-root>
          <div
            class="${containerExpectedClassesDefault.join(' ')}"
            style="height: 0px; width: 0px; top: 0px;"
          >
            <div class="container">
              <div class="content">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-dropdown>
    `);
  });
  it('should handle click outside the dropdown', async () => {
    await newSpecPage({
      components: [RwcDropdown],
      template: () => (h("div", { id: "parent" }, "Dropdown parent", h("rwc-dropdown", { openMode: "toggle", mode: "absolute", position: "side" }))),
    });
    const dropdownComponent = document.querySelector('rwc-dropdown');
    simulateOffsetSizes(2000);
    const dropdownOpenSpy = jest.fn();
    const dropdownCloseSpy = jest.fn();
    dropdownComponent.addEventListener('dropdownOpen', dropdownOpenSpy);
    dropdownComponent.addEventListener('dropdownClose', dropdownCloseSpy);
    document.querySelector('#parent').click();
    await new Promise(requestAnimationFrame);
    expect(dropdownOpenSpy).toBeCalledTimes(1);
    expect(dropdownCloseSpy).toBeCalledTimes(0);
    document.querySelector('#parent').click();
    await new Promise(requestAnimationFrame);
    expect(dropdownOpenSpy).toBeCalledTimes(1);
    expect(dropdownCloseSpy).toBeCalledTimes(1);
  });
  it('should handle the disconnected callback', async () => {
    const page = await newSpecPage({
      components: [RwcDropdown],
      template: () => (h("rwc-dropdown", null)),
    });
    document.querySelector('rwc-dropdown').remove();
    await page.waitForChanges();
  });
});
//# sourceMappingURL=dropdown.spec.js.map
