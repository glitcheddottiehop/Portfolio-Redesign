{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../../../../src/components/basic/accordion/accordion.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Fragment, FunctionalComponent, h, Host, Method, Prop } from '@stencil/core';\nimport ExpandMore from '@material-design-icons/svg/round/expand_more.svg';\n\n@Component({\n  tag: 'rwc-accordion',\n  styleUrl: './accordion.scss',\n  shadow: true\n})\nexport class RwcAccordion {\n  /**\n   * The timeout callback for the end of the animation.\n   */\n  private animationCallback: NodeJS.Timer;\n\n  /**\n   * Reference to the content wrapper element.\n   */\n  private contentWrapperElement: HTMLElement;\n\n  /**\n   * Reference to the content element.\n   */\n  private contentElement: HTMLElement;\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcAccordionElement;\n\n  /**\n   * The open state of the accordion.\n   */\n  @Prop({ reflect: true, mutable: true }) open: boolean = false;\n\n  /**\n   * Enables rendering of the divider.\n   */\n  @Prop() renderDivider: boolean = true;\n\n  /**\n   * Enables rendering of the heading icon.\n   */\n  @Prop() renderIcon: boolean = true;\n  \n  /**\n   * The duration of the animation from the style of the host element.\n   */\n  private get animationDuration(): number {\n    return Number.parseInt(getComputedStyle(this.host).getPropertyValue('--accordion-animation-duration'));\n  }\n\n  /**\n   * The heading element click event handler.\n   */\n  private onHeadingClick(): void {\n    this.setState(!this.open);\n  }\n\n  /**\n   * Sets the open state of the accordion to the passed value\n   */\n  @Method()\n  public async setState(value: boolean): Promise<void> {\n    if (this.animationCallback !== null) {\n      clearTimeout(this.animationCallback);\n    }\n    \n    this.open = value;\n    \n    if (value) {\n      this.contentWrapperElement.style.height = `${ this.contentElement.offsetHeight }px`;\n    } else {\n      this.contentWrapperElement.style.height = `${ this.contentElement.offsetHeight }px`;\n      await new Promise(requestAnimationFrame);\n      this.contentWrapperElement.style.height = `0px`;\n    }\n    \n    this.animationCallback = setTimeout(() => {\n      this.contentWrapperElement.style.height = '';\n      this.animationCallback = null;\n    }, this.animationDuration);\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host class={ {\n        open: this.open,\n      } }>\n        <div class={ {\n          container: true,\n          open: this.open\n        } }>\n          <div class={ {\n            heading: true,\n            'with-icon': this.renderIcon\n          } }\n            onClick={ () => this.onHeadingClick() }\n          >\n            <div class=\"left\">\n              <slot name=\"heading\" />\n            </div>\n            { this.renderHeadingIconContainer() }\n          </div>\n          <div\n            ref={ (element: HTMLElement) => this.contentWrapperElement = element }\n            class=\"content-wrapper\">\n            <div\n              ref={ (element: HTMLElement) => this.contentElement = element }\n              class=\"content\">\n              <slot />\n            </div>\n          </div>\n          { this.renderDividerElement() }\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the divider element if divider property enabled.\n   */\n  private renderDividerElement(): FunctionalComponent {\n    if (this.renderDivider) {\n      return <div class=\"divider\"></div>\n    }\n    return <Fragment></Fragment>;\n  }\n\n  /**\n   * Renders the heading icon container\n   */\n  private renderHeadingIconContainer(): FunctionalComponent {\n    if (this.renderIcon) {\n      return (\n        <div class=\"right\">\n          <slot name=\"heading-icon\">\n            { this.renderDefaultIcon() }\n          </slot>\n        </div>\n      )\n    }\n    return <Fragment></Fragment>\n  }\n\n  /**\n   * Renders the default right icon for the accordion heading.\n   */\n  private renderDefaultIcon(): FunctionalComponent {\n    return <div class=\"icon rotate\" innerHTML={ ExpandMore }></div>;\n  }\n}\n"]}