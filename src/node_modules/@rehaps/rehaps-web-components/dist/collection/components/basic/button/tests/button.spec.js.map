{"version":3,"file":"button.spec.js","sourceRoot":"","sources":["../../../../../../src/components/basic/button/tests/button.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEtC,MAAM,+BAA+B,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;AAE9G,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;EAC1B,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;IACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;MACvB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,oCAEa,CACd;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;wBAMT,+BAA+B,CAAC,IAAI,CAAC,GAAG,CAAE;;;;;;;;;;KAU9D,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;IAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;MACvB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,kBAAY,aAAa,EAAG,IAAI,EAAG,YAAY,EAAG,IAAI,kBAEzC,CACd;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;wBAMT,+BAA+B,CAAC,IAAI,CAAC,GAAG,CAAE;;;;;;;;;;;;;;;;;;KAkB9D,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;IAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;MACvB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,kBACE,aAAa,EAAG,IAAI,EACpB,YAAY,EAAG,IAAI,EACnB,QAAQ,EAAC,UAAU,EACnB,SAAS,EAAC,WAAW,kBAGR,CAChB;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;wBAMT,+BAA+B,CAAC,IAAI,CAAC,GAAG,CAAE;;;;;;;;;;;;;;;;;;KAkB9D,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;IACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,SAAS,CAAC;MACvB,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,kBAAY,MAAM,EAAG,IAAI,kBAEZ,CACd;KACF,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAyB,CAAC;IACpF,aAAa,CAAC,KAAK,EAAE,CAAC;IAEtB,aAAa,CAAC,KAAK,EAAE,CAAC;IAEtB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;wBAMT,+BAA+B,CAAC,IAAI,CAAC,GAAG,CAAE;;;;;;;;;;;KAW9D,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAA","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcButton } from '../button';\n\nconst containerExpectedClassesDefault = ['container', 'shadow', 'type-filled', 'theme-default', 'width-auto'];\n\ndescribe('rwc-button', () => {\n  it('should render the button', async () => {\n    const page = await newSpecPage({\n      components: [RwcButton],\n      template: () => (\n        <rwc-button>\n          Button Text\n        </rwc-button>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-button\n        type=\"filled\"\n        theme=\"default\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <div class=\"icon-wrapper\"></div>\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n            <div class=\"icon-wrapper\"></div>\n          </div>\n        </mock:shadow-root>\n        Button Text\n      </rwc-button>\n    `);\n  });\n\n  it('should render the default icons', async () => {\n    const page = await newSpecPage({\n      components: [RwcButton],\n      template: () => (\n        <rwc-button showIconRight={ true } showIconLeft={ true }>\n          Button Text\n        </rwc-button>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-button\n        type=\"filled\"\n        theme=\"default\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <div class=\"icon-wrapper\">\n              <slot name=\"icon\">\n                <div class=\"icon svg-icon\"></div>\n              </slot>\n            </div>\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n            <div class=\"icon-wrapper\">\n              <slot name=\"icon\">\n                <div class=\"icon svg-icon\"></div>\n              </slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        Button Text\n      </rwc-button>\n    `);\n  });\n  \n  it('should render the icons by path', async () => {\n    const page = await newSpecPage({\n      components: [RwcButton],\n      template: () => (\n        <rwc-button\n          showIconRight={ true }\n          showIconLeft={ true }\n          iconLeft=\"left.jpg\"\n          iconRight=\"right.jpg\"\n          >\n            Button Text\n          </rwc-button>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-button\n        type=\"filled\"\n        theme=\"default\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <div class=\"icon-wrapper\">\n              <slot name=\"icon\">\n                <img class=\"icon\" src=\"left.jpg\" alt=\"left\"></img>\n              </slot>\n            </div>\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n            <div class=\"icon-wrapper\">\n              <slot name=\"icon\">\n                <img class=\"icon\" src=\"right.jpg\" alt=\"right\"></img>\n              </slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        Button Text\n      </rwc-button>\n    `);\n  });\n\n  it('should render the ripple', async () => {\n    const page = await newSpecPage({\n      components: [RwcButton],\n      template: () => (\n        <rwc-button ripple={ true }>\n          Button Text\n        </rwc-button>\n      ),\n    });\n\n    const buttonElement = page.body.querySelector('rwc-button') as HTMLRwcButtonElement;\n    buttonElement.click();\n    // Test removal of the old ripple\n    buttonElement.click();\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-button\n        type=\"filled\"\n        theme=\"default\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <div class=\"icon-wrapper\"></div>\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n            <div class=\"icon-wrapper\"></div>\n            <span class=\"ripple\" style=\"height: NaNpx; width: NaNpx; left: NaNpx; top: NaNpx;\"></span>\n          </div>\n        </mock:shadow-root>\n        Button Text\n      </rwc-button>\n    `);\n  });\n})\n"]}