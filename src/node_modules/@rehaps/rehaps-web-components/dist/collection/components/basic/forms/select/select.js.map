{"version":3,"file":"select.js","sourceRoot":"","sources":["../../../../../../src/components/basic/forms/select/select.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAuB,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACrG,OAAO,WAAW,MAAM,qDAAqD,CAAC;AAO9E,MAAM,OAAO,SAAS;;gBAcoB,EAAE;mBAKf,KAAK;iBAKC,EAAE;gBAKH,EAAE;kBAKP,KAAK;;EAMhC,aAAa,CAAC,KAAiB;IAC7B,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,CAAC,OAA0B,EAAE,EAAE;MACzE,IAAI,KAAK,CAAC,MAAM,KAAK,OAAO,EAAE;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;OAC9B;IACH,CAAC,CAAC,CAAC;EACL,CAAC;EAMD,cAAc;IACZ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;EACrB,CAAC;EAMD,eAAe;IACb,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;EACtB,CAAC;EAKD,gBAAgB;IACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC5B,CAAC;EAMD,KAAK,CAAC,QAAQ,CAAC,KAAa;IAC1B,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,CAAC,OAA0B,EAAE,EAAE;MACzE,IAAI,KAAK,KAAK,OAAO,CAAC,KAAK,EAAE;QAC3B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;OACtC;IACH,CAAC,CAAC,CAAC;EACL,CAAC;EAKD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAG;UACX,SAAS,EAAE,IAAI;UACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB;QAEC,WAAK,KAAK,EAAC,SAAS;UAClB,WAAK,KAAK,EAAC,OAAO,IACd,IAAI,CAAC,IAAI,CACP;UACN,WACE,IAAI,EAAC,OAAO,EACZ,KAAK,EAAG;cACN,MAAM,EAAE,IAAI;cACZ,IAAI,EAAE,IAAI,CAAC,MAAM;aAClB;YACD,YAAM,IAAI,EAAC,YAAY,IACnB,IAAI,CAAC,UAAU,EAAE,CACd,CACH,CACF;QACN,oBACE,KAAK,EAAC,UAAU,eACN,QAAQ,EAClB,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,OAAO,EACZ,GAAG,EAAG,CAAC,QAAgC,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,GAAG,QAAQ;UAE3E,YACE,IAAI,EAAC,QAAQ,EACb,GAAG,EAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAK,CAClD,CACX,CACD,CACR,CAAC;EACJ,CAAC;EAKD,UAAU;IACR,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,OAAO,CACL,WAAK,GAAG,EAAG,IAAI,CAAC,IAAI,EAAG,GAAG,EAAC,MAAM,GAAO,CACzC,CAAA;KACF;IACD,OAAO,CACL,WAAK,SAAS,EAAG,WAAW,EAAG,KAAK,EAAC,eAAe,GAAO,CAC5D,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop, Host, FunctionalComponent, Listen, State, Method } from '@stencil/core';\nimport ChevronDown from '@material-design-icons/svg/outlined/expand_more.svg';\n\n@Component({\n  tag: 'rwc-select',\n  styleUrl: 'select.scss',\n  shadow: true\n})\nexport class RwcSelect {\n  /**\n   * The reference to the slot containing options.\n   */\n  private optionsSlot: HTMLSlotElement;\n\n  /**\n   * The reference to the dropdown HTML element.\n   */\n  private dropdownElement: HTMLRwcDropdownElement;\n\n  /**\n   * Path to the icon.\n   */\n  @Prop({ reflect: true }) icon: string = '';\n\n  /**\n   * Change cursor to pointer on hover.\n   */\n  @Prop() pointer: boolean = false;\n\n  /**\n   * Value of selected field.\n   */\n  @Prop({ mutable: true }) value = '';\n\n  /**\n   * Text of selected field.\n   */\n  @Prop({ mutable: true }) text = '';\n\n  /**\n   * State of icon.\n   */\n  @State() isOpen: boolean = false;\n\n  /**\n   * Handles the click event inside the select component including children (option elements inside dropdown).\n   */\n  @Listen('click')\n  onSelectClick(event: MouseEvent): void {\n    this.optionsSlot.assignedElements().forEach((element: HTMLOptionElement) => {\n      if (event.target === element) {\n        this.setValue(element.value);\n      }\n    });\n  }\n\n  /**\n   * Handles the open event of the dropdown component.\n   */\n  @Listen('dropdownOpen')\n  onDropdownOpen(): void {\n    this.isOpen = true;\n  }\n\n  /**\n   * Handles the close event of the dropdown component.\n   */\n  @Listen('dropdownClose')\n  onDropdownClose(): void {\n    this.isOpen = false;\n  }\n\n  /**\n   * Initializes the default active element and sets component value to the value of the active element.\n   */\n  componentDidLoad(): void {\n    this.setValue(this.value);\n  }\n\n  /**\n   * Sets the value and text of the component to the value of the option element containing the passed value.\n   */\n  @Method()\n  async setValue(value: string): Promise<void> {\n    this.optionsSlot.assignedElements().forEach((element: HTMLOptionElement) => {\n      if (value === element.value) {\n        this.value = element.value;\n        this.text = element.text;\n        this.dropdownElement.setState(false);\n      }\n    });\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div class={ {\n          container: true,\n          pointer: this.pointer,\n        } }\n        >\n          <div class=\"wrapper\">\n            <div class=\"value\">\n              { this.text }\n            </div>\n            <div \n              slot=\"right\" \n              class={ {\n                rotate: true,\n                open: this.isOpen\n              } }>\n              <slot name=\"icon-right\">\n                { this.renderIcon() }\n              </slot>\n            </div>\n          </div>\n          <rwc-dropdown\n            class=\"dropdown\"\n            open-mode=\"toggle\"\n            size=\"parent\"\n            mode='fixed'\n            ref={ (dropdown: HTMLRwcDropdownElement) => this.dropdownElement = dropdown }\n          >\n            <slot\n              name=\"option\"\n              ref={ (slot: HTMLSlotElement) => this.optionsSlot = slot } />\n          </rwc-dropdown>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the icon element.\n   */\n  renderIcon(): FunctionalComponent {\n    if (this.icon) {\n      return (\n        <img src={ this.icon } alt=\"icon\"></img>\n      )\n    }\n    return (\n      <div innerHTML={ ChevronDown } class=\"icon svg-icon\"></div>\n    )\n  }\n}\n"]}