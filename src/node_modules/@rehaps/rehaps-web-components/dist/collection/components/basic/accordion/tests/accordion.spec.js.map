{"version":3,"file":"accordion.spec.js","sourceRoot":"","sources":["../../../../../../src/components/basic/accordion/tests/accordion.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAE5C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;EAC7B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;IAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;MAC1B,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,qBAAe,UAAU,EAAG,IAAI,EAAG,aAAa,EAAG,IAAI;QACrD,WAAK,IAAI,EAAC,SAAS,mBAAmB;QACtC,WAAK,IAAI,EAAC,EAAE,cAAc,CACZ,CACjB;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KAyB7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;IAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;MAC1B,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,qBAAe,aAAa,EAAG,KAAK,EAAG,UAAU,EAAG,KAAK;QACvD,WAAK,IAAI,EAAC,SAAS,mBAAmB;QACtC,WAAK,IAAI,EAAC,EAAE,cAAc,CACZ,CACjB;KACF,CAAC,CAAC;IAEH,MAAM,OAAO,GAAI,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAiB,CAAC;IAC9G,OAAO,CAAC,KAAK,EAAE,CAAC;IAChB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAC5B,MAAM,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;MAChC,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,EAAE,CAAC;MACZ,CAAC,EAAE,GAAG,CAAC,CAAA;IACT,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;KAmB7B,CAAC,CAAC;IAEH,OAAO,CAAC,KAAK,EAAE,CAAC;IAChB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAC5B,MAAM,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;MAChC,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,EAAE,CAAC;MACZ,CAAC,EAAE,GAAG,CAAC,CAAA;IACT,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;KAmB7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcAccordion } from '../accordion';\n\ndescribe('rwc-accordion', () => {\n  it('should render the accordion', async () => {\n    const page = await newSpecPage({\n      components: [RwcAccordion],\n      template: () => (\n        <rwc-accordion renderIcon={ true } renderDivider={ true }>\n          <div slot=\"heading\">Heading text</div>\n          <div slot=\"\">Content</div>\n        </rwc-accordion>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-accordion>\n        <mock:shadow-root>\n          <div class=\"container\">\n            <div class=\"heading with-icon\">\n              <div class=\"left\">\n                <slot name=\"heading\"></slot>\n              </div>\n              <div class=\"right\">\n                <slot name=\"heading-icon\">\n                  <div class=\"icon rotate\"></div>\n                </slot>\n              </div>\n            </div>\n            <div class=\"content-wrapper\">\n              <div class=\"content\">\n                <slot></slot>\n              </div>\n            </div>\n            <div class=\"divider\"></div>\n          </div>\n        </mock:shadow-root>\n        <div slot=\"heading\">Heading text</div>\n        <div slot=\"\">Content</div>\n      </rwc-accordion>\n    `);\n  });\n\n  it('should handles the header click', async () => {\n    const page = await newSpecPage({\n      components: [RwcAccordion],\n      template: () => (\n        <rwc-accordion renderDivider={ false } renderIcon={ false }>\n          <div slot=\"heading\">Heading text</div>\n          <div slot=\"\">Content</div>\n        </rwc-accordion>\n      ),\n    });\n\n    const heading = (document.querySelector('rwc-accordion').shadowRoot.querySelector('.heading') as HTMLElement);\n    heading.click();\n    await page.waitForChanges();\n    await new Promise<void>(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, 200)\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-accordion class=\"open\" open=\"\">\n        <mock:shadow-root>\n          <div class=\"container open\">\n            <div class=\"heading\">\n              <div class=\"left\">\n                <slot name=\"heading\"></slot>\n              </div>\n            </div>\n            <div class=\"content-wrapper\">\n              <div class=\"content\">\n                <slot></slot>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <div slot=\"heading\">Heading text</div>\n        <div slot=\"\">Content</div>\n      </rwc-accordion>\n    `);\n\n    heading.click();\n    await page.waitForChanges();\n    await new Promise<void>(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, 200)\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-accordion>\n        <mock:shadow-root>\n          <div class=\"container\">\n            <div class=\"heading\">\n              <div class=\"left\">\n                <slot name=\"heading\"></slot>\n              </div>\n            </div>\n            <div class=\"content-wrapper\">\n              <div class=\"content\">\n                <slot></slot>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <div slot=\"heading\">Heading text</div>\n        <div slot=\"\">Content</div>\n      </rwc-accordion>\n    `);\n  });\n});\n"]}