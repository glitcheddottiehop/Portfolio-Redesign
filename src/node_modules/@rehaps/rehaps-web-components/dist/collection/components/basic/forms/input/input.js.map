{"version":3,"file":"input.js","sourceRoot":"","sources":["../../../../../../src/components/basic/forms/input/input.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  h,\n  Element,\n  Prop,\n  Method,\n  Listen,\n  Host,\n  State,\n} from \"@stencil/core\";\nimport {\n  InputAutoComplete,\n  InputType,\n  RwcInputValidatorInterface,\n} from \"../../../../interfaces/components/basic/input/input\";\n\n/**\n * @slot left - Slot for the left side of the input field.\n * @slot right - Slot for the right side of the input field.\n */\n@Component({\n  tag: \"rwc-input\",\n  styleUrl: \"./input.scss\",\n  shadow: true,\n})\nexport class RwcInput {\n  /**\n   * Reference to the input field element.\n   */\n  private inputElement?: HTMLInputElement;\n\n  /**\n   * Reference to the left slot element of the component\n   */\n  @State() private leftSlot?: HTMLSlotElement;\n\n  /**\n   * Reference to the right slot element of the component\n   */\n  @State() private rightSlot?: HTMLSlotElement;\n\n  /**\n   * Reference to the component's host element.\n   */\n  @Element() host!: HTMLRwcInputElement;\n\n  /**\n   * The name attribute of the input field.\n   */\n  @Prop() name: string = \"\";\n\n  /**\n   * Enables the auto complete for the input field.\n   */\n  @Prop() autoComplete: InputAutoComplete = \"on\";\n\n  /**\n   * The focused state of the component.\n   */\n  @Prop({ mutable: true }) focused: boolean = false;\n\n  /**\n   * The current value of the input field.\n   */\n  @Prop({ mutable: true }) value: string = \"\";\n\n  /**\n   * The placeholder value of the input field.\n   */\n  @Prop() placeholder: string = \"\";\n\n  /**\n   * The type of the input field.\n   */\n  @Prop({ reflect: true }) type: InputType = \"text\";\n\n  /**\n   * List of validators used for validation of the input.\n   */\n  @Prop() validators: Array<RwcInputValidatorInterface> = [];\n\n  /**\n   * Determines if the validation must be only triggered manually.\n   */\n  @Prop() manualValidation: boolean = false;\n\n  /**\n   * Sets the disabled state for the input field.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * The label for the input field.\n   */\n  @Prop() label: string = \"\";\n\n  /**\n   * List of errors acquired after the validation.\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Called before each render call\n   */\n  componentWillRender(): void {\n    this.host.tabIndex = 0;\n  }\n\n  /**\n   * Event handler for the focus event\n   */\n  @Listen(\"focus\")\n  onFocus(): void {\n    if (!this.disabled) {\n      this.focused = true;\n      this.clearErrors();\n      this.inputElement?.focus();\n    }\n  }\n\n  /**\n   * Event handler for the blur event\n   */\n  @Listen(\"blur\")\n  onBlur(): void {\n    this.focused = false;\n    if (!this.manualValidation) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Event handler for the input event\n   */\n  @Listen(\"input\")\n  onInput(): void {\n    this.value = this.inputElement.value;\n  }\n\n  /**\n   * Validates the input of the component\n   */\n  @Method()\n  async validate(): Promise<boolean> {\n    this.setErrors([]);\n    this.validators.forEach((validator: RwcInputValidatorInterface) => {\n      if (!validator.validate(this.value)) {\n        this.errors.push(validator.getMessage());\n      }\n    });\n    return this.errors.length === 0;\n  }\n\n  /**\n   * Clears the list of validation errors.\n   */\n  @Method()\n  async clearErrors(): Promise<void> {\n    this.setErrors([]);\n  }\n\n  /**\n   * Sets the components error array to passed array of strings.\n   */\n  @Method()\n  async setErrors(errors: Array<string>): Promise<void> {\n    this.errors = errors;\n  }\n\n  /**\n   * Renders the component\n   */\n  render() {\n    return (\n      <Host\n        class={{\n          disabled: this.disabled,\n        }}\n      >\n        <label\n          htmlFor={this.name}\n          class=\"label\"\n          style={{\n            display: this.name ? \"block\" : \"none\",\n          }}\n        >\n          {this.label}\n        </label>\n        <div\n          class={{\n            \"input-container\": true,\n            focused: this.focused,\n            error: this.errors.length > 0,\n          }}\n        >\n          <div class=\"slot-container\">\n            <div class=\"slot-horizontal-flex\">\n              <slot\n                name=\"left\"\n                ref={(element: HTMLSlotElement) => (this.leftSlot = element)}\n              />\n            </div>\n          </div>\n          <input\n            id={this.name}\n            class={{\n              input: true,\n              \"left-slot\": this.leftSlot?.assignedElements().length > 0,\n              \"right-slot\": this.rightSlot?.assignedElements().length > 0,\n            }}\n            name={this.name}\n            autoComplete={this.autoComplete}\n            type={this.type}\n            value={this.value}\n            placeholder={this.placeholder}\n            disabled={this.disabled ? true : null}\n            ref={(element: HTMLInputElement) => (this.inputElement = element)}\n          />\n          <div class=\"slot-container\">\n            <div class=\"slot-horizontal-flex\">\n              <slot\n                name=\"right\"\n                ref={(element: HTMLSlotElement) => (this.rightSlot = element)}\n              />\n            </div>\n          </div>\n        </div>\n        <p class=\"error-text\">{this.errors[0] || \"\"}</p>\n      </Host>\n    );\n  }\n}\n"]}