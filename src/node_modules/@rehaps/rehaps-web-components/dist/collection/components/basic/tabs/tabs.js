import { h, Host } from "@stencil/core";
import { DragMove } from "../../../utils/actions/dragMove";
import { EventManager } from "../../../utils/actions/eventManager";
import { RWCActionHelper } from "../../../utils/actions/rwcActionHelper";
export class RwcTabs {
  constructor() {
    this.eventManager = new EventManager();
    this.tabEventManager = new EventManager();
    this.actions = ['goTo'];
    this.textAnimationCoroutine = null;
    this.dragMove = null;
    this.resizeHandler = () => {
      var _a;
      if (((_a = this.tabs) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        this.tabs[this.validateTargetIndex(this.activeTab)].scrollIntoView({ behavior: 'smooth', inline: 'center' });
      }
    };
    this.rwcKey = RWCActionHelper.getDefaultComponentKey('tabs');
    this.mode = 'underline';
    this.defaultTab = 0;
    this.activeTab = 0;
  }
  validateTargetIndex(value) {
    if (value > this.tabs.length - 1 || value < 0) {
      return 0;
    }
    return value;
  }
  get tabsWrapperPaddingLeft() {
    var _a;
    return Number.parseFloat((_a = getComputedStyle(this.tabsWrapper).paddingLeft) !== null && _a !== void 0 ? _a : '0');
  }
  onWindowResize() {
    this.resizeHandler();
  }
  componentWillLoad() {
    this.activeTab = this.defaultTab > 0 ? this.defaultTab : 0;
  }
  componentDidLoad() {
    this.init();
  }
  disconnectedCallback() {
    this.dragMove.destroy();
    this.eventManager.clearEventListeners();
  }
  init() {
    this.initTabClickEvents();
    this.initDefaultTab();
    this.dragMove = new DragMove(this.root);
    this.initGoToEventListeners();
  }
  initDefaultTab() {
    this.activeTab = this.validateTargetIndex(this.activeTab);
    if (this.tabs.length > 0) {
      this.indicator.style.width = this.tabs[this.activeTab].getBoundingClientRect().width + 'px';
      this.indicator.style.left = this.tabs[this.activeTab].offsetLeft - this.tabsWrapperPaddingLeft + 'px';
      this.tabs[this.activeTab].classList.add('active');
    }
  }
  initTabClickEvents() {
    this.tabEventManager.clearEventListeners();
    this.tabs = this.tabContainer.assignedElements();
    this.tabs.forEach((element, index) => {
      this.tabEventManager.registerEventListener(element, 'click', () => {
        if (!this.dragMove.dragging) {
          this.goTo(index);
        }
      });
    });
  }
  async goTo(targetIndex) {
    const parsedIndex = this.validateTargetIndex(targetIndex instanceof CustomEvent ? Number.parseInt(targetIndex.detail.next) : targetIndex);
    if (this.activeTab !== targetIndex) {
      this.tabs.forEach(tab => {
        tab.classList.remove(RwcTabs.ACTIVE_TAB_CLASS);
      });
      this.tabs[parsedIndex].scrollIntoView({ behavior: 'smooth', inline: 'center' });
      this.indicator.style.left = this.tabs[parsedIndex].offsetLeft - this.tabsWrapperPaddingLeft + 'px';
      this.indicator.style.width = this.tabs[parsedIndex].getBoundingClientRect().width + 'px';
      const originalEvent = targetIndex instanceof CustomEvent ? targetIndex : null;
      this.setActiveTab(parsedIndex, originalEvent);
      this.cancelTextAnimation();
    }
  }
  setActiveTab(index, originalEvent) {
    var _a;
    this.tabs[index].classList.add(RwcTabs.ACTIVE_TAB_CLASS);
    this.changeEvent.emit((_a = originalEvent === null || originalEvent === void 0 ? void 0 : originalEvent.detail) !== null && _a !== void 0 ? _a : { origin: this.host, next: index, previous: this.activeTab });
    this.activeTab = index;
  }
  cancelTextAnimation() {
    clearInterval(this.textAnimationCoroutine);
  }
  initGoToEventListeners() {
    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey, 'indexChange');
  }
  renderIndicator() {
    return (h("div", { class: "indicator", ref: (element) => this.indicator = element }));
  }
  render() {
    return (h(Host, null, h("div", { class: {
        container: true,
        [`mode-${this.mode}`]: true
      }, ref: (element) => this.root = element }, h("div", { class: "tabs-wrapper", ref: (element) => this.tabsWrapper = element }, h("div", { class: "tabs-container" }, h("div", { class: "tabs-inner-container" }, h("slot", { ref: (element) => this.tabContainer = element, onSlotchange: () => this.initTabClickEvents() })), this.renderIndicator())))));
  }
  static get is() { return "rwc-tabs"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["tabs.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["tabs.css"]
    };
  }
  static get properties() {
    return {
      "rwcKey": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Key used for initializing event listeners."
        },
        "attribute": "rwc-key",
        "reflect": true,
        "defaultValue": "RWCActionHelper.getDefaultComponentKey('tabs')"
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "TabsRenderMode",
          "resolved": "\"segments\" | \"underline\"",
          "references": {
            "TabsRenderMode": {
              "location": "import",
              "path": "../../../interfaces/components/basic/tabs/tabs",
              "id": "src/interfaces/components/basic/tabs/tabs.ts::TabsRenderMode"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Tab indicator render mode."
        },
        "attribute": "mode",
        "reflect": false,
        "defaultValue": "'underline'"
      },
      "defaultTab": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Active tab on component load."
        },
        "attribute": "default-tab",
        "reflect": false,
        "defaultValue": "0"
      }
    };
  }
  static get states() {
    return {
      "activeTab": {}
    };
  }
  static get events() {
    return [{
        "method": "changeEvent",
        "name": "indexChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event fired when active tab change has been completed."
        },
        "complexType": {
          "original": "GoToEventDetail",
          "resolved": "GoToEventDetail",
          "references": {
            "GoToEventDetail": {
              "location": "global",
              "id": "global::GoToEventDetail"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "goTo": {
        "complexType": {
          "signature": "(targetIndex: number | CustomEvent) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            },
            "CustomEvent": {
              "location": "global",
              "id": "global::CustomEvent"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Change active tab to provided index and start indicator animation.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
RwcTabs.ACTIVE_TAB_CLASS = 'active';
//# sourceMappingURL=tabs.js.map
