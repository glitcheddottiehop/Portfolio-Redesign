import { h, Fragment, Host, } from "@stencil/core";
import { RWCActionHelper } from "../../utils/actions/rwcActionHelper";
import CloseIcon from "@material-design-icons/svg/round/close.svg";
import { EventManager } from "../../utils/actions/eventManager";
export class RwcModal {
  constructor() {
    this.hasHeaderContent = false;
    this.hasFooterContent = false;
    this.eventManager = new EventManager();
    this.actions = ["open", "close", "toggle"];
    this.animationTimeout = null;
    this.rwcKey = RWCActionHelper.getDefaultComponentKey("modal");
    this.innerScroll = false;
    this.renderHeaderDivider = true;
    this.renderFooterDivider = true;
    this.renderCloseIcon = true;
    this.animationSpeed = 200;
    this.isOpen = false;
  }
  get currentOpacity() {
    var _a;
    return Number.parseFloat(((_a = this.rootElement) === null || _a === void 0 ? void 0 : _a.style.opacity) ||
      getComputedStyle(this.rootElement).opacity);
  }
  get animationDuration() {
    return Number.parseInt(getComputedStyle(this.host).getPropertyValue("--modal-animation-duration"));
  }
  connectedCallback() {
    this.init();
  }
  disconnectedCallback() {
    this.eventManager.clearEventListeners();
  }
  componentWillRender() {
    this.hasHeaderContent = Boolean(this.host.querySelector('[slot="header"]'));
    this.hasFooterContent = Boolean(this.host.querySelector('[slot="footer"]'));
  }
  async init() {
    this.eventManager.clearEventListeners();
    this.bindToggleActions();
  }
  async toggle() {
    if (this.isOpen) {
      this.close();
    }
    else {
      this.open();
    }
  }
  async open() {
    if (!this.isOpen) {
      if (RwcModal.openModal !== null) {
        await RwcModal.openModal.close();
      }
      clearTimeout(this.animationTimeout);
      this.isOpen = true;
      this.animationTimeout = setTimeout(() => {
        RwcModal.openModal = this;
        document.body.classList.add("modal-open");
        this.openEvent.emit();
      }, this.animationDuration);
    }
  }
  async close() {
    if (this.isOpen) {
      clearTimeout(this.animationTimeout);
      this.isOpen = false;
      setTimeout(() => {
        if (RwcModal.openModal === this) {
          RwcModal.openModal = null;
          document.body.classList.remove("modal-open");
        }
        this.closeEvent.emit();
      }, this.animationDuration);
    }
  }
  bindToggleActions() {
    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey);
  }
  falloffClick(event) {
    if (!this.innerContainer.contains(event.target) &&
      !this.host.contains(event.target)) {
      this.close();
    }
  }
  renderHeaderHtml() {
    if (this.hasHeaderContent) {
      return (h(Fragment, null, h("div", { class: { header: true, flex: this.renderCloseIcon } }, h("div", null, h("slot", { name: "header" })), this.renderCloseIcon ? this.renderCloseIconHtml() : ""), this.renderHeaderDivider ? h("div", { class: "divider" }) : ""));
    }
    else if (this.renderCloseIcon) {
      return h("div", { class: "header empty" }, this.renderCloseIconHtml());
    }
    return "";
  }
  renderFooterHtml() {
    if (this.hasFooterContent) {
      return (h(Fragment, null, this.renderFooterDivider ? h("div", { class: "divider" }) : "", h("div", { class: "footer" }, h("slot", { name: "footer" }))));
    }
    return h(Fragment, null);
  }
  renderCloseIconHtml() {
    if (this.renderCloseIcon) {
      return (h(Fragment, null, h("div", { class: "close-wrapper" }, h("div", { class: "close", onClick: () => this.close(), innerHTML: CloseIcon }))));
    }
    return h(Fragment, null);
  }
  render() {
    return (h(Host, null, h("div", { ref: (element) => (this.rootElement = element), class: {
        container: true,
        open: this.isOpen,
        "inner-scroll": this.innerScroll,
      }, onClick: (event) => this.falloffClick(event) }, h("div", { class: "scroll-wrapper" }, h("div", { class: "inner-container-wrapper" }, h("div", { class: "inner-container", ref: (element) => (this.innerContainer = element) }, this.renderHeaderHtml(), h("div", { class: "content" }, h("slot", null)), this.renderFooterHtml()))))));
  }
  static get is() { return "rwc-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modal.css"]
    };
  }
  static get properties() {
    return {
      "rwcKey": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Key used to bind action elements to the modal."
        },
        "attribute": "rwc-key",
        "reflect": true,
        "defaultValue": "RWCActionHelper.getDefaultComponentKey(\"modal\")"
      },
      "innerScroll": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If content is longer than sidebar then scroll self instead of parent."
        },
        "attribute": "inner-scroll",
        "reflect": true,
        "defaultValue": "false"
      },
      "renderHeaderDivider": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Sets rendering of divider after the header."
        },
        "attribute": "render-header-divider",
        "reflect": true,
        "defaultValue": "true"
      },
      "renderFooterDivider": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Sets rendering of divider before the footer."
        },
        "attribute": "render-footer-divider",
        "reflect": true,
        "defaultValue": "true"
      },
      "renderCloseIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Sets rendering of close icon."
        },
        "attribute": "render-close-icon",
        "reflect": true,
        "defaultValue": "true"
      },
      "animationSpeed": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Speed of the modal fade in/out animation."
        },
        "attribute": "animation-speed",
        "reflect": false,
        "defaultValue": "200"
      }
    };
  }
  static get states() {
    return {
      "isOpen": {}
    };
  }
  static get events() {
    return [{
        "method": "openEvent",
        "name": "modalOpen",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "The event called on completing the opening of the modal."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "closeEvent",
        "name": "modalClose",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "The event called on completing the closing of the modal."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "init": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Initializes toggle / close / open events.",
          "tags": []
        }
      },
      "toggle": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Toggles sidebar's open state.",
          "tags": []
        }
      },
      "open": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Opens sidebar.",
          "tags": []
        }
      },
      "close": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Closes the modal.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
}
RwcModal.openModal = null;
//# sourceMappingURL=modal.js.map
