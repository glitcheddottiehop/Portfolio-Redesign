import { h, Host } from "@stencil/core";
import { DocumentUtils } from "../../../utils/document/document-utils";
export class RwcIconTextSteps {
  constructor() {
    this.columns = 4;
    this.autoUpdateLayout = true;
    this.autoColumnCount = 4;
  }
  onWindowResize() {
    this.updateLayout();
  }
  componentDidLoad() {
    this.updateLayout();
  }
  updateLayout() {
    if (this.autoUpdateLayout) {
      const stepCount = this.host.children.length;
      if (stepCount > 0) {
        const minCardWidth = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-card-width'));
        const gridGapSize = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-grid-column-gap'));
        const minHostSize = stepCount * minCardWidth + (stepCount - 1) * gridGapSize;
        let hostWidth = this.host.offsetWidth;
        if (typeof hostWidth === 'undefined') {
          hostWidth = window.innerWidth;
        }
        if (hostWidth >= minHostSize) {
          this.autoColumnCount = stepCount;
          this.host.classList.remove(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);
        }
        else {
          this.autoColumnCount = 1;
          this.host.classList.add(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);
        }
      }
      else {
        this.autoColumnCount = 4;
      }
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "container" }, h("rwc-grid", { class: "grid", columns: this.autoUpdateLayout ? this.autoColumnCount : this.columns }, h("slot", null)))));
  }
  static get is() { return "rwc-icon-text-steps"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./icon-text-steps.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["icon-text-steps.css"]
    };
  }
  static get properties() {
    return {
      "columns": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "GridColumnCount",
          "resolved": "GridColumnCountsWithBreakpoint | number | string",
          "references": {
            "GridColumnCount": {
              "location": "import",
              "path": "../../../interfaces/components/layout/columns/grid",
              "id": "src/interfaces/components/layout/columns/grid.ts::GridColumnCount"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Number of columns."
        },
        "attribute": "columns",
        "reflect": false,
        "defaultValue": "4"
      },
      "autoUpdateLayout": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Updates the layout automatically if the minimum content width is smaller than the host element."
        },
        "attribute": "auto-update-layout",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "autoColumnCount": {}
    };
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
RwcIconTextSteps.VERTICAL_LAYOUT_CLASS = 'vertical';
//# sourceMappingURL=icon-text-steps.js.map
