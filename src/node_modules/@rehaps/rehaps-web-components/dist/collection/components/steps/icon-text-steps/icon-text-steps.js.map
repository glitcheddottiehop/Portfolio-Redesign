{"version":3,"file":"icon-text-steps.js","sourceRoot":"","sources":["../../../../../src/components/steps/icon-text-steps/icon-text-steps.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAuB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAEtG,OAAO,EAAE,aAAa,EAAE,MAAM,wCAAwC,CAAC;AAOvE,MAAM,OAAO,gBAAgB;;mBAcQ,CAAC;4BAKA,IAAI;2BAKL,CAAC;;EAMpC,cAAc;IACZ,IAAI,CAAC,YAAY,EAAE,CAAC;EACtB,CAAC;EAKD,gBAAgB;IACd,IAAI,CAAC,YAAY,EAAE,CAAC;EACtB,CAAC;EAKO,YAAY;IAClB,IAAI,IAAI,CAAC,gBAAgB,EAAE;MACzB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;MAE5C,IAAI,SAAS,GAAG,CAAC,EAAE;QACjB,MAAM,YAAY,GAAG,aAAa,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,CAAC;QACjI,MAAM,WAAW,GAAG,aAAa,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACrI,MAAM,WAAW,GAAG,SAAS,GAAG,YAAY,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;QAE7E,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAA;QACrC,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;UACpC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC;SAC/B;QAED,IAAI,SAAS,IAAI,WAAW,EAAE;UAC5B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;UACjC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;SACpE;aAAM;UACL,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;UACzB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;SACjE;OACF;WAAM;QACL,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;OAC1B;KACF;EACH,CAAC;EAKD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,WAAW;QACpB,gBACE,KAAK,EAAC,MAAM,EACZ,OAAO,EAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO;UAErE,eAAQ,CACC,CACP,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnFM,sCAAqB,GAAW,UAAU,AAArB,CAAsB","sourcesContent":["import { Component, Element, FunctionalComponent, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { GridColumnCount } from '../../../interfaces/components/layout/columns/grid';\nimport { DocumentUtils } from '../../../utils/document/document-utils';\n\n@Component({\n  tag: 'rwc-icon-text-steps',\n  styleUrl: './icon-text-steps.scss',\n  shadow: true\n})\nexport class RwcIconTextSteps {\n  /**\n   * The class used for vertical layout of the component.\n   */\n  static VERTICAL_LAYOUT_CLASS: string = 'vertical';\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcIconTextStepsElement;\n\n  /**\n   * Number of columns.\n   */\n  @Prop() columns: GridColumnCount = 4;\n\n  /**\n   * Updates the layout automatically if the minimum content width is smaller than the host element.\n   */\n  @Prop() autoUpdateLayout: boolean = true;\n\n  /**\n   * The column count determined by the auto layout.\n   */\n  @State() autoColumnCount: number = 4;\n\n  /**\n   * Parses the data on window resize.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    this.updateLayout();\n  }\n\n  /**\n   * Updates the layout on completing the first load of the component.\n   */\n  componentDidLoad(): void {\n    this.updateLayout();\n  }\n\n  /**\n   * Updates the column count based on the minimum step width and column gap.\n   */\n  private updateLayout(): void {\n    if (this.autoUpdateLayout) {\n      const stepCount = this.host.children.length;\n\n      if (stepCount > 0) {\n        const minCardWidth = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-card-width'));\n        const gridGapSize = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-grid-column-gap'));\n        const minHostSize = stepCount * minCardWidth + (stepCount - 1) * gridGapSize;\n\n        let hostWidth = this.host.offsetWidth\n        if (typeof hostWidth === 'undefined') {\n          hostWidth = window.innerWidth;\n        }\n\n        if (hostWidth >= minHostSize) {\n          this.autoColumnCount = stepCount;\n          this.host.classList.remove(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);\n        } else {\n          this.autoColumnCount = 1;\n          this.host.classList.add(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);\n        }\n      } else {\n        this.autoColumnCount = 4;\n      }\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div class=\"container\">\n          <rwc-grid\n            class=\"grid\"\n            columns={ this.autoUpdateLayout ? this.autoColumnCount : this.columns }\n          >\n            <slot />\n          </rwc-grid>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}