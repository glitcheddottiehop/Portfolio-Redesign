import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcIconTextSteps } from "../icon-text-steps";
describe('rwc-icon-text-steps', () => {
  it('should render the icon-text-steps component', async () => {
    const page = await newSpecPage({
      components: [RwcIconTextSteps],
      template: () => (h("rwc-icon-text-steps", { autoUpdateLayout: false, columns: 4 })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-icon-text-steps>
        <mock:shadow-root>
          <div class="container">
            <rwc-grid class="grid" columns="4">
              <slot></slot>
            </rwc-grid>
          </div>
        </mock:shadow-root>
      </rwc-icon-text-steps>
    `);
  });
  it('should handle the auto layout on load', async () => {
    const page = await newSpecPage({
      components: [RwcIconTextSteps],
      template: () => (h("rwc-icon-text-steps", { autoUpdateLayout: true, columns: 4 })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-icon-text-steps>
        <mock:shadow-root>
          <div class="container">
            <rwc-grid class="grid" columns="4">
              <slot></slot>
            </rwc-grid>
          </div>
        </mock:shadow-root>
      </rwc-icon-text-steps>
    `);
  });
  it('should handle the window resize event', async () => {
    const page = await newSpecPage({
      components: [RwcIconTextSteps],
      template: () => (h("rwc-icon-text-steps", { autoUpdateLayout: true, columns: 4 }, h("div", null, "Step 1"), h("div", null, "Step 2"), h("div", null, "Step 3"), h("div", null, "Step 4"))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-icon-text-steps>
        <mock:shadow-root>
          <div class="container">
            <rwc-grid class="grid" columns="4">
              <slot></slot>
            </rwc-grid>
          </div>
        </mock:shadow-root>
        <div>Step 1</div>
        <div>Step 2</div>
        <div>Step 3</div>
        <div>Step 4</div>
      </rwc-icon-text-steps>
    `);
    global.getComputedStyle = jest.fn().mockImplementationOnce(() => {
      return {
        getPropertyValue() {
          return '172px';
        }
      };
    }).mockImplementationOnce(() => {
      return {
        getPropertyValue() {
          return '16px';
        }
      };
    });
    global.innerWidth = 500;
    global.dispatchEvent(new Event('resize'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-icon-text-steps class="vertical">
        <mock:shadow-root>
          <div class="container">
            <rwc-grid class="grid" columns="1">
              <slot></slot>
            </rwc-grid>
          </div>
        </mock:shadow-root>
        <div>Step 1</div>
        <div>Step 2</div>
        <div>Step 3</div>
        <div>Step 4</div>
      </rwc-icon-text-steps>
    `);
  });
});
//# sourceMappingURL=icon-text-steps.spec.js.map
