{"version":3,"file":"icon-text-steps.spec.js","sourceRoot":"","sources":["../../../../../../src/components/steps/icon-text-steps/tests/icon-text-steps.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;EACnC,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;IAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,gBAAgB,CAAC;MAC9B,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,2BACE,gBAAgB,EAAG,KAAK,EACxB,OAAO,EAAG,CAAC,GAES,CACvB;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;IACrD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,gBAAgB,CAAC;MAC9B,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,2BACE,gBAAgB,EAAG,IAAI,EACvB,OAAO,EAAG,CAAC,GAES,CACvB;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;IACrD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;MAC7B,UAAU,EAAE,CAAC,gBAAgB,CAAC;MAC9B,QAAQ,EAAE,GAAG,EAAE,CAAC,CACd,2BACE,gBAAgB,EAAG,IAAI,EACvB,OAAO,EAAG,CAAC;QAEX,wBAAiB;QACjB,wBAAiB;QACjB,wBAAiB;QACjB,wBAAiB,CACG,CACvB;KACF,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;KAc7B,CAAC,CAAC;IAEH,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,sBAAsB,CAAC,GAAG,EAAE;MAC9D,OAAO;QACL,gBAAgB;UACd,OAAO,OAAO,CAAC;QACjB,CAAC;OACF,CAAA;IACH,CAAC,CAAC,CAAC,sBAAsB,CAAC,GAAG,EAAE;MAC7B,OAAO;QACL,gBAAgB;UACd,OAAO,MAAM,CAAC;QAChB,CAAC;OACF,CAAA;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;IACxB,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;KAc7B,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcIconTextSteps } from '../icon-text-steps';\n\ndescribe('rwc-icon-text-steps', () => {\n  it('should render the icon-text-steps component', async () => {\n    const page = await newSpecPage({\n      components: [RwcIconTextSteps],\n      template: () => (\n        <rwc-icon-text-steps\n          autoUpdateLayout={ false }\n          columns={ 4 }\n        >\n        </rwc-icon-text-steps>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-icon-text-steps>\n        <mock:shadow-root>\n          <div class=\"container\">\n            <rwc-grid class=\"grid\" columns=\"4\">\n              <slot></slot>\n            </rwc-grid>\n          </div>\n        </mock:shadow-root>\n      </rwc-icon-text-steps>\n    `);\n  });\n  \n  it('should handle the auto layout on load', async () => {\n    const page = await newSpecPage({\n      components: [RwcIconTextSteps],\n      template: () => (\n        <rwc-icon-text-steps\n          autoUpdateLayout={ true }\n          columns={ 4 }\n        >\n        </rwc-icon-text-steps>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-icon-text-steps>\n        <mock:shadow-root>\n          <div class=\"container\">\n            <rwc-grid class=\"grid\" columns=\"4\">\n              <slot></slot>\n            </rwc-grid>\n          </div>\n        </mock:shadow-root>\n      </rwc-icon-text-steps>\n    `);\n  });\n\n  it('should handle the window resize event', async () => {\n    const page = await newSpecPage({\n      components: [RwcIconTextSteps],\n      template: () => (\n        <rwc-icon-text-steps\n          autoUpdateLayout={ true }\n          columns={ 4 }\n        >\n          <div>Step 1</div>\n          <div>Step 2</div>\n          <div>Step 3</div>\n          <div>Step 4</div>\n        </rwc-icon-text-steps>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-icon-text-steps>\n        <mock:shadow-root>\n          <div class=\"container\">\n            <rwc-grid class=\"grid\" columns=\"4\">\n              <slot></slot>\n            </rwc-grid>\n          </div>\n        </mock:shadow-root>\n        <div>Step 1</div>\n        <div>Step 2</div>\n        <div>Step 3</div>\n        <div>Step 4</div>\n      </rwc-icon-text-steps>\n    `);\n    \n    global.getComputedStyle = jest.fn().mockImplementationOnce(() => {\n      return {\n        getPropertyValue() {\n          return '172px';\n        }\n      }\n    }).mockImplementationOnce(() => {\n      return {\n        getPropertyValue() {\n          return '16px';\n        }\n      }\n    });\n    \n    global.innerWidth = 500;\n    global.dispatchEvent(new Event('resize'));\n    await page.waitForChanges();\n    \n    expect(page.root).toEqualHtml(`\n      <rwc-icon-text-steps class=\"vertical\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <rwc-grid class=\"grid\" columns=\"1\">\n              <slot></slot>\n            </rwc-grid>\n          </div>\n        </mock:shadow-root>\n        <div>Step 1</div>\n        <div>Step 2</div>\n        <div>Step 3</div>\n        <div>Step 4</div>\n      </rwc-icon-text-steps>\n    `);\n  });\n});\n"]}