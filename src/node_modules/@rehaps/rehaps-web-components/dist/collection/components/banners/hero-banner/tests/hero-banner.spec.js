import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcHeroBanner } from "../hero-banner";
const containerExpectedClassesDefault = ['container', 'auto-height'];
const containerExpectedClassesCustomStructure = ['container', 'auto-height', 'custom'];
describe('rwc-hero-banner', () => {
  it('should render the hero-banner', async () => {
    const page = await newSpecPage({
      components: [RwcHeroBanner],
      template: () => (h("rwc-hero-banner", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-hero-banner
        src="/assets/images/banners/Banner_example.jpg"
        auto-height=""
      >
        <mock:shadow-root>
          <div
            class="${containerExpectedClassesDefault.join(' ')}"
            style="background-image: url(/assets/images/banners/Banner_example.jpg); background-position-x: 50%; background-position-y: 50%;"
          >
            <div class="grid">
              <div class="content">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-hero-banner>
    `);
  });
  it('should render the gradient', async () => {
    const page = await newSpecPage({
      components: [RwcHeroBanner],
      template: () => (h("rwc-hero-banner", { renderGradient: true, gradientDirectionBreakpoint: 768 })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-hero-banner
        src="/assets/images/banners/Banner_example.jpg"
        auto-height=""
      >
        <mock:shadow-root>
          <div
            class="${containerExpectedClassesDefault.join(' ')}"
            style="background-image: url(/assets/images/banners/Banner_example.jpg); background-position-x: 50%; background-position-y: 50%;"
          >
            <div class="gradient"></div>
            <div class="grid">
              <div class="content">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-hero-banner>
    `);
  });
  it('should update the layout on resize', async () => {
    const page = await newSpecPage({
      components: [RwcHeroBanner],
      template: () => (h("rwc-hero-banner", { renderGradient: true, gradientDirectionBreakpoint: 768 })),
    });
    global.innerWidth = 500;
    global.dispatchEvent(new Event('resize'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-hero-banner
        class="vertical"
        src="/assets/images/banners/Banner_example.jpg"
        auto-height=""
      >
        <mock:shadow-root>
          <div
            class="${containerExpectedClassesDefault.join(' ')}"
            style="background-image: url(/assets/images/banners/Banner_example.jpg); background-position-x: 50%; background-position-y: 50%;"
          >
            <div class="gradient"></div>
            <div class="grid">
              <div class="content">
                <slot></slot>
              </div>
            </div>
          </div>
        </mock:shadow-root>
      </rwc-hero-banner>
    `);
  });
  it('should render custom structure', async () => {
    const page = await newSpecPage({
      components: [RwcHeroBanner],
      template: () => (h("rwc-hero-banner", { customStructure: true })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-hero-banner
        src="/assets/images/banners/Banner_example.jpg"
        auto-height=""
      >
        <mock:shadow-root>
          <div
            class="${containerExpectedClassesCustomStructure.join(' ')}"
            style="background-image: url(/assets/images/banners/Banner_example.jpg); background-position-x: 50%; background-position-y: 50%;"
          >
            <div class="content">
              <slot />
            </div>
          </div>
        </mock:shadow-root>
      </rwc-hero-banner>
    `);
  });
});
//# sourceMappingURL=hero-banner.spec.js.map
