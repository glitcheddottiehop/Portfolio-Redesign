{"version":3,"file":"hero-banner.js","sourceRoot":"","sources":["../../../../../src/components/banners/hero-banner/hero-banner.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAuB,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAU9H,MAAM,OAAO,aAAa;;eASe,YAAY,CAAC,0CAA0C,CAAC;4BAM5D,EAAE;0BAMJ,EAAE;0BAKD,KAAK;uCAKO,CAAC;sBAKA,IAAI;2BAKhB,KAAK;oBAKX,KAAK;;EAKlC,IAAY,SAAS;IACnB,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;IACtC,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;MACjC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC;KAC/B;IACD,OAAO,SAAS,CAAC;EACnB,CAAC;EAKD,gBAAgB;IACd,IAAI,CAAC,kBAAkB,EAAE,CAAC;EAC5B,CAAC;EAMD,cAAc;IACZ,IAAI,CAAC,kBAAkB,EAAE,CAAC;EAC5B,CAAC;EAKD,kBAAkB;IAChB,IAAI,IAAI,CAAC,2BAA2B,GAAG,CAAC,EAAE;MACxC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KACrF;EACH,CAAC;EAKD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAG;QACN,QAAQ,EAAE,IAAI,CAAC,QAAQ;OACxB;MAED,WACE,KAAK,EAAG;UACN,SAAS,EAAE,IAAI;UACf,QAAQ,EAAE,IAAI,CAAC,eAAe;UAC9B,aAAa,EAAE,IAAI,CAAC,UAAU;SAC/B,EACD,KAAK,EAAG;UACN,kBAAkB,EAAE,OAAQ,IAAI,CAAC,GAAI,GAAG;UACxC,uBAAuB,EAAE,GAAI,IAAI,CAAC,gBAAiB,GAAG;UACtD,uBAAuB,EAAE,GAAI,IAAI,CAAC,cAAe,GAAG;SACrD;QAEC,IAAI,CAAC,qBAAqB,EAAE;QAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CACtC,CACA,CACT,CAAC;EACJ,CAAC;EAKD,qBAAqB;IACnB,IAAI,IAAI,CAAC,cAAc,EAAE;MACvB,OAAO,CACL,WAAK,KAAK,EAAC,UAAU,GAAO,CAC7B,CAAA;KACF;IAED,OAAO,EAAC,QAAQ,OAAY,CAAA;EAC9B,CAAC;EAKD,aAAa,CAAC,eAAwB;IACpC,IAAI,eAAe,EAAE;MACnB,OAAO,CACL,WAAK,KAAK,EAAC,SAAS;QAClB,eAAQ,CACJ,CACP,CAAA;KACF;IAED,OAAO,CACL,WAAK,KAAK,EAAC,MAAM;MACf,WAAK,KAAK,EAAC,SAAS;QAClB,eAAa,CACT,CACF,CACP,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Fragment, FunctionalComponent, getAssetPath, h, Host, Listen, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'rwc-hero-banner',\n  styleUrl: './hero-banner.scss',\n  shadow: true,\n  assetsDirs: [\n    '../../assets/images/banners'\n  ]\n})\nexport class RwcHeroBanner {\n  /**\n   * Reference to the host element.\n   */\n  @Element() host: HTMLRwcHeroBannerElement;\n\n  /**\n   * The path to the image asset to render.\n   */\n  @Prop({ reflect: true }) src: string = getAssetPath('assets/images/banners/Banner_example.jpg');\n\n  /**\n   * The horizontal position of the center of the image in percentage.\\\n   * 0 - left edge, 100 - right edge, 50 - center (default) \n   */\n  @Prop() horizontalCenter: number = 50;\n\n  /**\n   * The vertical position of the center of the image in percentage.\\\n   * 0 - top edge, 100 - bottom edge, 50 - center (default) \n   */\n  @Prop() verticalCenter: number = 50;\n  \n  /**\n   * Enables the rendering of the gradient.\n   */\n  @Prop() renderGradient: boolean = false;\n\n  /**\n   * Sets the breakpoint in pixels where vertical gradient stops and horizontal starts.\n   */\n  @Prop() gradientDirectionBreakpoint: number = 0;\n\n  /**\n   * Sets the height automatically based on window inner width.\n   */\n  @Prop({ reflect: true }) autoHeight: boolean = true;\n\n  /**\n   * Removes the default content HTML structure.\n   */\n  @Prop() customStructure: boolean = false;\n\n  /**\n   * Determines if the current gradient mode is vertical.\n   */\n  @State() vertical: boolean = false;\n  \n  /**\n   * Gets the width of th host element.\n   */\n  private get hostWidth(): number {\n    let hostWidth = this.host.offsetWidth;\n    if (typeof hostWidth !== \"number\") {\n      hostWidth = window.innerWidth;\n    }\n    return hostWidth;\n  }\n\n  /**\n   * Handles the stencil lifecycle event called after the first load of the component.\n   */\n  componentDidLoad(): void {\n    this.updateGradientMode();\n  }\n\n  /**\n   * Handles the window resize event.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    this.updateGradientMode();\n  }\n\n  /**\n   * Updates the current gradient render mode based on window width.\n   */\n  updateGradientMode(): void {\n    if (this.gradientDirectionBreakpoint > 0) {\n      this.vertical = (this.hostWidth >= this.gradientDirectionBreakpoint ? false : true);\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host\n        class={ {\n          vertical: this.vertical\n        } }\n      >\n        <div\n          class={ {\n            container: true,\n            'custom': this.customStructure,\n            'auto-height': this.autoHeight\n          } }\n          style={ {\n            'background-image': `url(${ this.src })`,\n            'background-position-x': `${ this.horizontalCenter }%`,\n            'background-position-y': `${ this.verticalCenter }%`\n          } }\n        >\n          { this.renderGradientElement() }\n          { this.renderContent(this.customStructure) }\n        </div>\n      </Host >\n    );\n  }\n  \n  /**\n   * Renders the gradient element.\n   */\n  renderGradientElement(): FunctionalComponent {\n    if (this.renderGradient) {\n      return (\n        <div class=\"gradient\"></div>\n      )\n    }\n    \n    return <Fragment></Fragment>\n  }\n\n  /**\n   * Renders the content.\n   */\n  renderContent(customStructure: boolean): FunctionalComponent {\n    if (customStructure) {\n      return (\n        <div class=\"content\">\n          <slot />\n        </div>\n      )\n    }\n\n    return (\n      <div class=\"grid\">\n        <div class=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    )\n  }\n}\n"]}