{"version":3,"file":"sidebar.spec.js","sourceRoot":"","sources":["../../../../../../src/components/layout/sidebar/tests/sidebar.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["// mycmp.spec.tsx\n// Since the 'template' argument to `newSpecPage` is using jsx syntax, this should be in a .tsx file.\nimport { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcSidebar } from '../sidebar';\n\nconst hostExpectedClassesDefault = ['left'];\nconst containerExpectedClassesDefault = ['container', 'left', 'inner-scroll'];\n\ndescribe('rwc-sidebar', () => {\n  it('should render the sidebar', async () => {\n    const page = await newSpecPage({\n      components: [RwcSidebar],\n      template: () => (\n        <rwc-sidebar></rwc-sidebar>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -1366px;\"\n        rwc-key=\"rwc-sidebar-1\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-sidebar>\n    `);\n  });\n\n  const hostExpectedClassesOpen = ['left', 'open'];\n  const containerExpectedClassesOpen = ['container', 'left', 'inner-scroll', 'open'];\n\n  it('automatically binds actions', async () => {\n    const page = await newSpecPage({\n      components: [RwcSidebar],\n      template: () => (\n        <rwc-sidebar rwc-key=\"rwc-sidebar-2\" data-rwc-close=\"rwc-sidebar-2\">\n          <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-2\"></button>\n        </rwc-sidebar>\n      ),\n    });\n\n    // Render the default component with button.\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -1366px;\"\n        rwc-key=\"rwc-sidebar-2\"\n        data-rwc-close=\"rwc-sidebar-2\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-2\"></button>\n      </rwc-sidebar>\n    `);\n\n    // Open the sidebar.\n    const toggleButton: HTMLButtonElement = page.body.querySelector('#toggle-button');\n    toggleButton.dispatchEvent(new Event('click', { bubbles: false }));\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesOpen.join(' ') }\"\n        style=\"left: 0;\"\n        rwc-key=\"rwc-sidebar-2\"\n        data-rwc-close=\"rwc-sidebar-2\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesOpen.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-2\"></button>\n      </rwc-sidebar>\n    `);\n\n    // Disable the event fired with itself as original target.\n    const sidebar = document.querySelector('rwc-sidebar') as HTMLRwcSidebarElement;\n    sidebar.dispatchEvent(new CustomEvent('click', { detail: { origin: sidebar }}));\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesOpen.join(' ') }\"\n        style=\"left: 0;\"\n        rwc-key=\"rwc-sidebar-2\"\n        data-rwc-close=\"rwc-sidebar-2\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesOpen.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-2\"></button>\n      </rwc-sidebar>\n    `);\n\n    // Close the sidebar.\n    toggleButton.click();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -1366px;\"\n        rwc-key=\"rwc-sidebar-2\"\n        data-rwc-close=\"rwc-sidebar-2\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-2\"></button>\n      </rwc-sidebar>\n    `);\n\n    // Checks if auto remove event listeners does not throw breaking exceptions.\n    await page.setContent('');\n  });\n\n  it('should handle the resize event', async () => {\n    const page = await newSpecPage({\n      components: [RwcSidebar],\n      template: () => (\n        <rwc-sidebar rwc-key=\"rwc-sidebar-3\"></rwc-sidebar>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -1366px;\"\n        rwc-key=\"rwc-sidebar-3\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-sidebar>\n    `);\n\n    global.innerWidth = 500;\n    global.dispatchEvent(new Event('resize'));\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -500px;\"\n        rwc-key=\"rwc-sidebar-3\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-sidebar>\n    `);\n  });\n\n  const hostExpectedClassesRight = ['right'];\n  const containerExpectedClassesRight = ['container', 'right', 'inner-scroll'];\n\n  const hostExpectedClassesRightOpen = ['right', 'open'];\n  const containerExpectedClassesRightOpen = ['container', 'right', 'inner-scroll', 'open'];\n\n  it('should render on the right side', async () => {\n    const page = await newSpecPage({\n      components: [RwcSidebar],\n      template: () => (\n        <rwc-sidebar position=\"right\" rwc-key=\"rwc-sidebar-4\">\n          <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-4\"></button>\n        </rwc-sidebar>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesRight.join(' ') }\"\n        style=\"right: -1366px;\"\n        rwc-key=\"rwc-sidebar-4\"\n        position=\"right\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesRight.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-4\"></button>\n      </rwc-sidebar>\n    `);\n\n    // Open the sidebar.\n    const toggleButton = page.body.querySelector('#toggle-button') as HTMLButtonElement;\n    toggleButton.click();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesRightOpen.join(' ') }\"\n        style=\"right: 0;\"\n        rwc-key=\"rwc-sidebar-4\"\n        position=\"right\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesRightOpen.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-4\"></button>\n      </rwc-sidebar>\n    `);\n  });\n\n  it('should re-init and unregister events', async () => {\n    const page = await newSpecPage({\n      components: [RwcSidebar],\n      template: () => (\n        <rwc-sidebar rwc-key=\"rwc-sidebar-5\" data-rwc-close=\"rwc-sidebar-5\">\n          <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-5\"></button>\n        </rwc-sidebar>\n      ),\n    });\n\n    const sidebar: HTMLRwcSidebarElement = page.body.querySelector('rwc-sidebar');\n    sidebar.init();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -1366px;\"\n        rwc-key=\"rwc-sidebar-5\"\n        data-rwc-close=\"rwc-sidebar-5\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-5\"></button>\n      </rwc-sidebar>\n    `);\n\n    sidebar.remove();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-sidebar\n        class=\"${ hostExpectedClassesDefault.join(' ') }\"\n        style=\"left: -1366px;\"\n        rwc-key=\"rwc-sidebar-5\"\n        data-rwc-close=\"rwc-sidebar-5\"\n        position=\"left\"\n        inner-scroll\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <button id=\"toggle-button\" data-rwc-toggle=\"rwc-sidebar-5\"></button>\n      </rwc-sidebar>\n    `);\n  });\n})\n"]}