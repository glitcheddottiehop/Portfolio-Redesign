import { h, Host } from "@stencil/core";
import { EventManager } from "../../../utils/actions/eventManager";
import { RWCActionHelper } from "../../../utils/actions/rwcActionHelper";
export class RwcSidebar {
  constructor() {
    this.eventManager = new EventManager();
    this.actions = ['open', 'close', 'toggle'];
    this.isOpen = false;
    this.defaultState = 'closed';
    this.rwcKey = RWCActionHelper.getDefaultComponentKey('sidebar');
    this.position = 'left';
    this.innerScroll = true;
  }
  onWindowResize() {
    this.updateHostOffset();
  }
  componentWillLoad() {
    this.isOpen = this.defaultState === 'open';
  }
  componentDidLoad() {
    this.init();
  }
  disconnectedCallback() {
    this.eventManager.clearEventListeners();
  }
  async init() {
    this.eventManager.clearEventListeners();
    this.addToggleEventListeners();
    this.updateHostOffset();
  }
  async toggle() {
    if (this.isOpen) {
      this.close();
    }
    else {
      this.open();
    }
  }
  async open() {
    this.isOpen = true;
    this.updateHostOffset();
    this.openEvent.emit();
  }
  async close() {
    this.isOpen = false;
    this.updateHostOffset();
    this.closeEvent.emit();
  }
  updateHostOffset() {
    if (this.isOpen) {
      if (this.position === 'left') {
        this.host.style.right = '';
        this.host.style.left = '0';
      }
      if (this.position === 'right') {
        this.host.style.right = '0';
        this.host.style.left = '';
      }
    }
    else {
      let hostWidth = this.host.offsetWidth;
      if (typeof hostWidth === 'undefined') {
        hostWidth = window.innerWidth;
      }
      if (this.position === 'left') {
        this.host.style.right = '';
        this.host.style.left = `-${hostWidth}px`;
      }
      if (this.position === 'right') {
        this.host.style.right = `-${hostWidth}px`;
        this.host.style.left = '';
      }
    }
  }
  addToggleEventListeners() {
    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey);
  }
  render() {
    return (h(Host, { class: {
        open: this.isOpen,
        [this.position]: true,
      } }, h("div", { class: {
        container: true,
        open: this.isOpen,
        [this.position]: true,
        'inner-scroll': this.innerScroll
      } }, h("slot", null))));
  }
  static get is() { return "rwc-sidebar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["sidebar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["sidebar.css"]
    };
  }
  static get properties() {
    return {
      "defaultState": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "SidebarStates",
          "resolved": "\"closed\" | \"open\"",
          "references": {
            "SidebarStates": {
              "location": "import",
              "path": "../../../interfaces/components/layout/sidebar/sidebar",
              "id": "src/interfaces/components/layout/sidebar/sidebar.ts::SidebarStates"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Default sidebar's state"
        },
        "attribute": "default-state",
        "reflect": false,
        "defaultValue": "'closed'"
      },
      "rwcKey": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Key used for initializing event listeners"
        },
        "attribute": "rwc-key",
        "reflect": true,
        "defaultValue": "RWCActionHelper.getDefaultComponentKey('sidebar')"
      },
      "position": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "SidebarPositions",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "SidebarPositions": {
              "location": "import",
              "path": "../../../interfaces/components/layout/sidebar/sidebar",
              "id": "src/interfaces/components/layout/sidebar/sidebar.ts::SidebarPositions"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Window side to stick to"
        },
        "attribute": "position",
        "reflect": true,
        "defaultValue": "'left'"
      },
      "innerScroll": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If content is longer than sidebar then scroll self instead of parent"
        },
        "attribute": "inner-scroll",
        "reflect": true,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "isOpen": {}
    };
  }
  static get events() {
    return [{
        "method": "openEvent",
        "name": "sidebarOpen",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "The event called on the opening of the sidebar."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "closeEvent",
        "name": "sidebarClose",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "The event called on the closing of the sidebar."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "init": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Initializes toggle / close / open events",
          "tags": []
        }
      },
      "toggle": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Toggles sidebar's open state",
          "tags": []
        }
      },
      "open": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Opens sidebar",
          "tags": []
        }
      },
      "close": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global",
              "id": "global::Promise"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Closes sidebar",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
//# sourceMappingURL=sidebar.js.map
