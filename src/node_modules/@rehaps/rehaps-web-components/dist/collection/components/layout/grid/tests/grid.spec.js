import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcGrid } from "../grid";
const containerExpectedClassesDefault = ['container', 'columns-2', 'center', 'auto'];
describe('rwc-grid', () => {
  it('should render the grid', async () => {
    const page = await newSpecPage({
      components: [RwcGrid],
      template: () => (h("rwc-grid", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-grid
        columns="2"
        mode="auto"
        alignment="center"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-grid>
    `);
  });
  const containerExpectedClassesAfterBreakpoint = ['container', 'columns-3', 'center', 'auto'];
  const breakpointConfig = JSON.stringify({
    "0": 2,
    "48rem": 3
  });
  it('should read the column config as json', async () => {
    const page = await newSpecPage({
      components: [RwcGrid],
      template: () => (h("rwc-grid", { columns: breakpointConfig })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-grid
        columns="${breakpointConfig.replace(/\"/g, '&quot;')}"
        mode="auto"
        alignment="center"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesAfterBreakpoint.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-grid>
    `);
  });
  it('should update the grid count after the prop change', async () => {
    const page = await newSpecPage({
      components: [RwcGrid],
      template: () => (h("rwc-grid", { columns: 2 })),
    });
    page.body.querySelector('rwc-grid').setAttribute('columns', breakpointConfig);
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-grid
        columns="${breakpointConfig.replace(/\"/g, '&quot;')}"
        mode="auto"
        alignment="center"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesAfterBreakpoint.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-grid>
    `);
  });
  it('should update the grid count after resize', async () => {
    global.getComputedStyle = jest.fn().mockImplementationOnce(() => {
      return {
        getPropertyValue() {
          return '16px';
        }
      };
    });
    const page = await newSpecPage({
      components: [RwcGrid],
      template: () => (h("rwc-grid", { columns: breakpointConfig })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-grid
        columns="${breakpointConfig.replace(/\"/g, '&quot;')}"
        mode="auto"
        alignment="center"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesAfterBreakpoint.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-grid>
    `);
    global.innerWidth = 500;
    global.dispatchEvent(new Event('resize'));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-grid
        columns="${breakpointConfig.replace(/\"/g, '&quot;')}"
        mode="auto"
        alignment="center"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-grid>
    `);
  });
  it('should read the width of the host element', async () => {
    const page = await newSpecPage({
      components: [RwcGrid],
      template: () => (h("rwc-grid", { breakOnHostWidth: true, columns: breakpointConfig })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-grid
        columns="${breakpointConfig.replace(/\"/g, '&quot;')}"
        mode="auto"
        alignment="center"
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesAfterBreakpoint.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-grid>
    `);
  });
});
//# sourceMappingURL=grid.spec.js.map
