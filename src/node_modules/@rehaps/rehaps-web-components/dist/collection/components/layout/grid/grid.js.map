{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../../../src/components/layout/grid/grid.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAuB,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE7G,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,MAAM,wCAAwC,CAAC;AAOvE,MAAM,OAAO,OAAO;;mBASkC,CAAC;gBAKL,MAAM;qBAKF,QAAQ;4BAKxB,KAAK;uBAKV,CAAC;;EAQhC,mBAAmB;IACjB,IAAI,CAAC,iBAAiB,EAAE,CAAC;EAC3B,CAAC;EAQD,cAAc;IACZ,IAAI,CAAC,iBAAiB,EAAE,CAAC;EAC3B,CAAC;EAKD,iBAAiB;IACf,IAAI,CAAC,iBAAiB,EAAE,CAAC;EAC3B,CAAC;EAKO,iBAAiB;IACvB,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;IACjC,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,QAAQ,EAAE,EAAE;MACtE,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;KACxC;SAAM;MACL,IAAI,YAAY,GAAG,IAAI,CAAC,OAAkD,CAAC;MAE3E,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QACpC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAmC,CAAC;OAC1E;MAED,IAAI,sBAA8B,CAAC;MACnC,IAAI,8BAA8B,GAAG,CAAC,CAAC;MAEvC,IAAI,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;MAEvF,IAAI,OAAO,cAAc,KAAK,WAAW,EAAE;QACzC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC;OACpC;MAED,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QAClD,MAAM,kBAAkB,GAAG,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QACrE,IAAI,kBAAkB,IAAI,8BAA8B,IAAI,cAAc,IAAI,kBAAkB,EAAE;UAChG,sBAAsB,GAAG,UAAU,CAAC;UACpC,8BAA8B,GAAG,kBAAkB,CAAC;SACrD;OACF;MAED,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,sBAAsB,CAAC,CAAC;KACzD;EACH,CAAC;EAKD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WACE,KAAK,EAAG;UACN,SAAS,EAAE,IAAI;UACf,CAAC,WAAY,IAAI,CAAC,WAAY,EAAE,CAAC,EAAE,IAAI;UACvC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI;UACtB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI;SAClB;QAED,eAAa,CACT,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, h, Watch, FunctionalComponent, Element, Host, Listen, State } from '@stencil/core';\nimport { GridColumnCountsWithBreakpoint, GridAlignment, GridColumnCount, GridLayoutMode } from '../../../interfaces/components/layout/columns/grid';\nimport { parseJSON } from '../../../utils/data/json';\nimport { DocumentUtils } from '../../../utils/document/document-utils';\n\n@Component({\n  tag: 'rwc-grid',\n  styleUrl: 'grid.scss',\n  shadow: true\n})\nexport class RwcGrid {\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcGridElement;\n\n  /**\n   * Number of columns.\n   */\n  @Prop({ reflect: true }) columns: GridColumnCount = 2;\n\n  /**\n   * Content layout mode.\n   */\n  @Prop({ reflect: true }) mode: GridLayoutMode = 'auto';\n\n  /**\n   * column positioning of last row.\n   */\n  @Prop({ reflect: true }) alignment: GridAlignment = 'center';\n\n  /**\n   * If enabled, breakpoints will be based on host size instead of window inner width.\n   */\n  @Prop() breakOnHostWidth: boolean = false;\n\n  /**\n   * The current column count.\n   */\n  @State() columnCount: number = 2;\n\n  //#region Validation\n\n  /**\n   * Updates the current column count on columns property change.\n   */\n  @Watch('columns')\n  validateColumnCount(): void {\n    this.updateColumnCount();\n  }\n\n  //#endregion\n\n  /**\n   * Handles the resize event of the window.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    this.updateColumnCount();\n  }\n\n  /**\n   * Handles the StencilJS lifecycle event called before the first load of the component.\n   */\n  componentWillLoad(): void {\n    this.updateColumnCount();\n  }\n\n  /**\n   * Updates the current column count based on breakpoints configuration.\n   */\n  private updateColumnCount(): void {\n    const columnCount = this.columns;\n    if (this.columns.toString().match(/\\d+/)[0] === columnCount.toString()) {\n      this.columnCount = Number(columnCount);\n    } else {\n      let columnConfig = this.columns as string | GridColumnCountsWithBreakpoint;\n\n      if (typeof columnConfig === 'string') {\n        columnConfig = parseJSON(columnConfig) as GridColumnCountsWithBreakpoint;\n      }\n\n      let highestValidBreakpoint: string;\n      let highestValidBreakpointInPixels = 0;\n\n      let containerWidth = this.breakOnHostWidth ? this.host.offsetWidth : window.innerWidth;\n\n      if (typeof containerWidth === 'undefined') {\n        containerWidth = window.innerWidth;\n      }\n\n      for (const screenSize of Object.keys(columnConfig)) {\n        const screenSizeInPixels = DocumentUtils.convertToPixels(screenSize);\n        if (screenSizeInPixels >= highestValidBreakpointInPixels && containerWidth >= screenSizeInPixels) {\n          highestValidBreakpoint = screenSize;\n          highestValidBreakpointInPixels = screenSizeInPixels;\n        }\n      }\n\n      this.columnCount = columnConfig[highestValidBreakpoint];\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          class={ {\n            container: true,\n            [`columns-${ this.columnCount }`]: true,\n            [this.alignment]: true,\n            [this.mode]: true\n          } }\n        >\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}