import { h } from "@stencil/core";
import { newSpecPage } from "@stencil/core/testing";
import { RwcSidebar } from "../sidebar";
const hostExpectedClassesDefault = ['left'];
const containerExpectedClassesDefault = ['container', 'left', 'inner-scroll'];
describe('rwc-sidebar', () => {
  it('should render the sidebar', async () => {
    const page = await newSpecPage({
      components: [RwcSidebar],
      template: () => (h("rwc-sidebar", null)),
    });
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -1366px;"
        rwc-key="rwc-sidebar-1"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-sidebar>
    `);
  });
  const hostExpectedClassesOpen = ['left', 'open'];
  const containerExpectedClassesOpen = ['container', 'left', 'inner-scroll', 'open'];
  it('automatically binds actions', async () => {
    const page = await newSpecPage({
      components: [RwcSidebar],
      template: () => (h("rwc-sidebar", { "rwc-key": "rwc-sidebar-2", "data-rwc-close": "rwc-sidebar-2" }, h("button", { id: "toggle-button", "data-rwc-toggle": "rwc-sidebar-2" }))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -1366px;"
        rwc-key="rwc-sidebar-2"
        data-rwc-close="rwc-sidebar-2"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-2"></button>
      </rwc-sidebar>
    `);
    const toggleButton = page.body.querySelector('#toggle-button');
    toggleButton.dispatchEvent(new Event('click', { bubbles: false }));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesOpen.join(' ')}"
        style="left: 0;"
        rwc-key="rwc-sidebar-2"
        data-rwc-close="rwc-sidebar-2"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesOpen.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-2"></button>
      </rwc-sidebar>
    `);
    const sidebar = document.querySelector('rwc-sidebar');
    sidebar.dispatchEvent(new CustomEvent('click', { detail: { origin: sidebar } }));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesOpen.join(' ')}"
        style="left: 0;"
        rwc-key="rwc-sidebar-2"
        data-rwc-close="rwc-sidebar-2"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesOpen.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-2"></button>
      </rwc-sidebar>
    `);
    toggleButton.click();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -1366px;"
        rwc-key="rwc-sidebar-2"
        data-rwc-close="rwc-sidebar-2"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-2"></button>
      </rwc-sidebar>
    `);
    await page.setContent('');
  });
  it('should handle the resize event', async () => {
    const page = await newSpecPage({
      components: [RwcSidebar],
      template: () => (h("rwc-sidebar", { "rwc-key": "rwc-sidebar-3" })),
    });
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -1366px;"
        rwc-key="rwc-sidebar-3"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-sidebar>
    `);
    global.innerWidth = 500;
    global.dispatchEvent(new Event('resize'));
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -500px;"
        rwc-key="rwc-sidebar-3"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
      </rwc-sidebar>
    `);
  });
  const hostExpectedClassesRight = ['right'];
  const containerExpectedClassesRight = ['container', 'right', 'inner-scroll'];
  const hostExpectedClassesRightOpen = ['right', 'open'];
  const containerExpectedClassesRightOpen = ['container', 'right', 'inner-scroll', 'open'];
  it('should render on the right side', async () => {
    const page = await newSpecPage({
      components: [RwcSidebar],
      template: () => (h("rwc-sidebar", { position: "right", "rwc-key": "rwc-sidebar-4" }, h("button", { id: "toggle-button", "data-rwc-toggle": "rwc-sidebar-4" }))),
    });
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesRight.join(' ')}"
        style="right: -1366px;"
        rwc-key="rwc-sidebar-4"
        position="right"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesRight.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-4"></button>
      </rwc-sidebar>
    `);
    const toggleButton = page.body.querySelector('#toggle-button');
    toggleButton.click();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesRightOpen.join(' ')}"
        style="right: 0;"
        rwc-key="rwc-sidebar-4"
        position="right"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesRightOpen.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-4"></button>
      </rwc-sidebar>
    `);
  });
  it('should re-init and unregister events', async () => {
    const page = await newSpecPage({
      components: [RwcSidebar],
      template: () => (h("rwc-sidebar", { "rwc-key": "rwc-sidebar-5", "data-rwc-close": "rwc-sidebar-5" }, h("button", { id: "toggle-button", "data-rwc-toggle": "rwc-sidebar-5" }))),
    });
    const sidebar = page.body.querySelector('rwc-sidebar');
    sidebar.init();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -1366px;"
        rwc-key="rwc-sidebar-5"
        data-rwc-close="rwc-sidebar-5"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-5"></button>
      </rwc-sidebar>
    `);
    sidebar.remove();
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-sidebar
        class="${hostExpectedClassesDefault.join(' ')}"
        style="left: -1366px;"
        rwc-key="rwc-sidebar-5"
        data-rwc-close="rwc-sidebar-5"
        position="left"
        inner-scroll
      >
        <mock:shadow-root>
          <div class="${containerExpectedClassesDefault.join(' ')}">
            <slot></slot>
          </div>
        </mock:shadow-root>
        <button id="toggle-button" data-rwc-toggle="rwc-sidebar-5"></button>
      </rwc-sidebar>
    `);
  });
});
//# sourceMappingURL=sidebar.spec.js.map
