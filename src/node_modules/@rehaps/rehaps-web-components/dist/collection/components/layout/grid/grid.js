import { h, Host } from "@stencil/core";
import { parseJSON } from "../../../utils/data/json";
import { DocumentUtils } from "../../../utils/document/document-utils";
export class RwcGrid {
  constructor() {
    this.columns = 2;
    this.mode = 'auto';
    this.alignment = 'center';
    this.breakOnHostWidth = false;
    this.columnCount = 2;
  }
  validateColumnCount() {
    this.updateColumnCount();
  }
  onWindowResize() {
    this.updateColumnCount();
  }
  componentWillLoad() {
    this.updateColumnCount();
  }
  updateColumnCount() {
    const columnCount = this.columns;
    if (this.columns.toString().match(/\d+/)[0] === columnCount.toString()) {
      this.columnCount = Number(columnCount);
    }
    else {
      let columnConfig = this.columns;
      if (typeof columnConfig === 'string') {
        columnConfig = parseJSON(columnConfig);
      }
      let highestValidBreakpoint;
      let highestValidBreakpointInPixels = 0;
      let containerWidth = this.breakOnHostWidth ? this.host.offsetWidth : window.innerWidth;
      if (typeof containerWidth === 'undefined') {
        containerWidth = window.innerWidth;
      }
      for (const screenSize of Object.keys(columnConfig)) {
        const screenSizeInPixels = DocumentUtils.convertToPixels(screenSize);
        if (screenSizeInPixels >= highestValidBreakpointInPixels && containerWidth >= screenSizeInPixels) {
          highestValidBreakpoint = screenSize;
          highestValidBreakpointInPixels = screenSizeInPixels;
        }
      }
      this.columnCount = columnConfig[highestValidBreakpoint];
    }
  }
  render() {
    return (h(Host, null, h("div", { class: {
        container: true,
        [`columns-${this.columnCount}`]: true,
        [this.alignment]: true,
        [this.mode]: true
      } }, h("slot", null))));
  }
  static get is() { return "rwc-grid"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["grid.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["grid.css"]
    };
  }
  static get properties() {
    return {
      "columns": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "GridColumnCount",
          "resolved": "GridColumnCountsWithBreakpoint | number | string",
          "references": {
            "GridColumnCount": {
              "location": "import",
              "path": "../../../interfaces/components/layout/columns/grid",
              "id": "src/interfaces/components/layout/columns/grid.ts::GridColumnCount"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Number of columns."
        },
        "attribute": "columns",
        "reflect": true,
        "defaultValue": "2"
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "GridLayoutMode",
          "resolved": "\"auto\" | \"manual\"",
          "references": {
            "GridLayoutMode": {
              "location": "import",
              "path": "../../../interfaces/components/layout/columns/grid",
              "id": "src/interfaces/components/layout/columns/grid.ts::GridLayoutMode"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Content layout mode."
        },
        "attribute": "mode",
        "reflect": true,
        "defaultValue": "'auto'"
      },
      "alignment": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "GridAlignment",
          "resolved": "\"center\" | \"left\" | \"right\"",
          "references": {
            "GridAlignment": {
              "location": "import",
              "path": "../../../interfaces/components/layout/columns/grid",
              "id": "src/interfaces/components/layout/columns/grid.ts::GridAlignment"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "column positioning of last row."
        },
        "attribute": "alignment",
        "reflect": true,
        "defaultValue": "'center'"
      },
      "breakOnHostWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, breakpoints will be based on host size instead of window inner width."
        },
        "attribute": "break-on-host-width",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "columnCount": {}
    };
  }
  static get elementRef() { return "host"; }
  static get watchers() {
    return [{
        "propName": "columns",
        "methodName": "validateColumnCount"
      }];
  }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
//# sourceMappingURL=grid.js.map
