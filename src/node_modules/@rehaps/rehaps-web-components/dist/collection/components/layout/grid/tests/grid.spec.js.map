{"version":3,"file":"grid.spec.js","sourceRoot":"","sources":["../../../../../../src/components/layout/grid/tests/grid.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { RwcGrid } from '../grid';\n\nconst containerExpectedClassesDefault = ['container', 'columns-2', 'center', 'auto'];\n\ndescribe('rwc-grid', () => {\n  it('should render the grid', async () => {\n    const page = await newSpecPage({\n      components: [RwcGrid],\n      template: () => (\n        <rwc-grid></rwc-grid>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-grid\n        columns=\"2\"\n        mode=\"auto\"\n        alignment=\"center\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-grid>\n    `);\n  });\n\n  const containerExpectedClassesAfterBreakpoint = ['container', 'columns-3', 'center', 'auto'];\n  const breakpointConfig = JSON.stringify({\n    \"0\": 2,\n    \"48rem\": 3\n  });\n\n  it('should read the column config as json', async () => {\n    const page = await newSpecPage({\n      components: [RwcGrid],\n      template: () => (\n        <rwc-grid\n          columns={ breakpointConfig }\n        >\n        </rwc-grid>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-grid\n        columns=\"${ breakpointConfig.replace(/\\\"/g, '&quot;') }\"\n        mode=\"auto\"\n        alignment=\"center\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesAfterBreakpoint.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-grid>\n    `);\n  });\n\n  it('should update the grid count after the prop change', async () => {\n    const page = await newSpecPage({\n      components: [RwcGrid],\n      template: () => (\n        <rwc-grid\n          columns={ 2 }\n        >\n        </rwc-grid>\n      ),\n    });\n\n    page.body.querySelector('rwc-grid').setAttribute('columns', breakpointConfig);\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-grid\n        columns=\"${ breakpointConfig.replace(/\\\"/g, '&quot;') }\"\n        mode=\"auto\"\n        alignment=\"center\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesAfterBreakpoint.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-grid>\n    `);\n  });\n\n  it('should update the grid count after resize', async () => {\n    // Mock the get computed style global method to get the default font size.\n    global.getComputedStyle = jest.fn().mockImplementationOnce(() => {\n      return {\n        getPropertyValue() {\n          return '16px';\n        }\n      }\n    });\n\n    const page = await newSpecPage({\n      components: [RwcGrid],\n      template: () => (\n        <rwc-grid\n          columns={ breakpointConfig }\n        >\n        </rwc-grid>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-grid\n        columns=\"${ breakpointConfig.replace(/\\\"/g, '&quot;') }\"\n        mode=\"auto\"\n        alignment=\"center\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesAfterBreakpoint.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-grid>\n    `);\n\n    global.innerWidth = 500;\n    global.dispatchEvent(new Event('resize'));\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-grid\n        columns=\"${ breakpointConfig.replace(/\\\"/g, '&quot;') }\"\n        mode=\"auto\"\n        alignment=\"center\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesDefault.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-grid>\n    `);\n  });\n\n  it('should read the width of the host element', async () => {\n    const page = await newSpecPage({\n      components: [RwcGrid],\n      template: () => (\n        <rwc-grid\n          breakOnHostWidth={ true }\n          columns={ breakpointConfig }\n        >\n        </rwc-grid>\n      ),\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-grid\n        columns=\"${ breakpointConfig.replace(/\\\"/g, '&quot;') }\"\n        mode=\"auto\"\n        alignment=\"center\"\n      >\n        <mock:shadow-root>\n          <div class=\"${ containerExpectedClassesAfterBreakpoint.join(' ') }\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </rwc-grid>\n    `);\n  });\n})\n"]}