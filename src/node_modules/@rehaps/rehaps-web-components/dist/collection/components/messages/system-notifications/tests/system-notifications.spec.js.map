{"version":3,"file":"system-notifications.spec.js","sourceRoot":"","sources":["../../../../../../src/components/messages/system-notifications/tests/system-notifications.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from \"@stencil/core/testing\";\nimport { simulateAllOffsets } from \"../../../../../jest/polyfill/offset\";\nimport { simulateAssignedElements } from \"../../../../../jest/polyfill/slot\";\nimport { RwcSystemNotification } from \"../system-notifications\";\nimport { h } from \"@stencil/core\";\n\ndescribe(\"RwcSystemNotification\", () => {\n  simulateAllOffsets();\n  simulateAssignedElements();\n\n  it(\"should render rwc-system-notifications component\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n          <div class=\"container\"></div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should allow pushing notifications\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n    \n    await page.waitForChanges();\n\n    const key = await page.body\n      .querySelector(\"rwc-system-notifications\")\n      .pushNotification({\n        title: \"Title\",\n        message: \"Message\",\n        duration: 1,\n        closable: true,\n        type: \"info\",\n      });\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\">\n          <div class=\"notification-wrapper\" data-key=\"${key}\">\n            <div class=\"info notification\">\n              <div class=\"close-icon\"></div>\n              <p class=\"title\">\n                Title\n              </p>\n              <p class=\"message\">\n                Message\n              </p>\n            </div>\n          </div>\n        </div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should allow setting list of notifications\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    const keys: string[] = await page.body\n      .querySelector(\"rwc-system-notifications\")\n      .setNotifications([\n        {\n          title: \"Title\",\n          message: \"Message\",\n          duration: 5,\n          closable: true,\n          type: \"info\",\n        },\n        {\n          title: \"Title\",\n          message: \"Message\",\n          duration: 5,\n          closable: true,\n          type: \"info\",\n        },\n      ]);\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\">\n          <div class=\"notification-wrapper\" data-key=\"${keys[0]}\">\n            <div class=\"info notification\">\n              <div class=\"close-icon\"></div>\n              <p class=\"title\">\n                Title\n              </p>\n              <p class=\"message\">\n                Message\n              </p>\n            </div>\n          </div>\n          <div class=\"notification-wrapper\" data-key=\"${keys[1]}\">\n            <div class=\"info notification\">\n              <div class=\"close-icon\"></div>\n              <p class=\"title\">\n                Title\n              </p>\n              <p class=\"message\">\n                Message\n              </p>\n            </div>\n          </div>\n        </div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should allow removing notifications by clicking close icon\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    await page.waitForChanges();\n\n    const component = page.body.querySelector(\"rwc-system-notifications\");\n\n    await component.pushNotification({\n      title: \"Title\",\n      message: \"Message\",\n      duration: 1,\n      closable: true,\n      type: \"info\",\n    });\n\n    await page.waitForChanges();\n\n    (component.shadowRoot.querySelector(\n      \".close-icon\"\n    ) as HTMLDivElement).click();\n\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 500);\n    });\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\"></div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should allow removing notifications by index\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    await page.waitForChanges();\n\n    const component = page.body.querySelector(\"rwc-system-notifications\");\n\n    await component.pushNotification({\n      title: \"Title\",\n      message: \"Message\",\n      duration: 1,\n      closable: true,\n      type: \"info\",\n    });\n\n    await page.waitForChanges();\n\n    component.removeNotification(0);\n\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 500);\n    });\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\"></div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should allow pushing unclosable notifications\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    await page.waitForChanges();\n\n    const key = await page.body\n      .querySelector(\"rwc-system-notifications\")\n      .pushNotification({\n        title: \"Title\",\n        message: \"Message\",\n        duration: 0,\n        closable: false,\n        type: \"info\",\n      });\n\n    await page.waitForChanges();\n\n    // Wait for closing timeout after which the notification shoud not be removed.\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 500);\n    });\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\">\n          <div class=\"notification-wrapper\" data-key=\"${key}\" style=\"max-height: 0px;\">\n            <div class=\"info notification\">\n              <p class=\"title\">\n                Title\n              </p>\n              <p class=\"message\">\n                Message\n              </p>\n            </div>\n          </div>\n        </div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should prevent auto remove of the notification on mouse enter\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    const component = page.body.querySelector(\"rwc-system-notifications\");\n\n    const key = await component.pushNotification({\n      title: \"Title\",\n      message: \"Message\",\n      duration: 3,\n      closable: false,\n    });\n\n    await page.waitForChanges();\n\n    const notificationWrapper = component.shadowRoot.querySelector(\".notification-wrapper\");\n\n    notificationWrapper.dispatchEvent(new Event(\"mouseenter\"));\n\n    // Wait for closing timeout after which the notification shoud not be removed.\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 505);\n    });\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\">\n          <div class=\"notification-wrapper\" data-key=\"${key}\" style=\"max-height: 0px;\">\n            <div class=\"info notification\">\n              <p class=\"title\">\n                Title\n              </p>\n              <p class=\"message\">\n                Message\n              </p>\n            </div>\n          </div>\n        </div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n\n    notificationWrapper.dispatchEvent(new Event(\"mouseleave\"));\n\n    // Wait for closing timeout after which the notification shoud be removed.\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 505);\n    });\n\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\"></div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n\n  it(\"should handle resize\", async () => {\n    const page = await newSpecPage({\n      components: [RwcSystemNotification],\n      template: () => <rwc-system-notifications></rwc-system-notifications>,\n    });\n\n    await page.waitForChanges();\n\n    const component = page.body.querySelector(\"rwc-system-notifications\");\n\n    const key = await component.pushNotification({\n      title: \"Title\",\n      message: \"Message\",\n      duration: 1,\n      closable: false,\n    });\n\n    await page.waitForChanges();\n\n    global.innerWidth = 500;\n    global.dispatchEvent(new Event(\"resize\"));\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <rwc-system-notifications>\n        <mock:shadow-root>\n        <div class=\"container\">\n          <div class=\"notification-wrapper\" data-key=\"${key}\" style=\"max-height: 0px;\">\n            <div class=\"info notification\">\n              <p class=\"title\">\n                Title\n              </p>\n              <p class=\"message\">\n                Message\n              </p>\n            </div>\n          </div>\n        </div>\n        </mock:shadow-root>\n      </rwc-input>\n    `);\n  });\n});\n"]}