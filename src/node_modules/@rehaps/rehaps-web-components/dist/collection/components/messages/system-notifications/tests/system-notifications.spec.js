import { newSpecPage } from "@stencil/core/testing";
import { simulateAllOffsets } from "../../../../../jest/polyfill/offset";
import { simulateAssignedElements } from "../../../../../jest/polyfill/slot";
import { RwcSystemNotification } from "../system-notifications";
import { h } from "@stencil/core";
describe("RwcSystemNotification", () => {
  simulateAllOffsets();
  simulateAssignedElements();
  it("should render rwc-system-notifications component", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
          <div class="container"></div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should allow pushing notifications", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    await page.waitForChanges();
    const key = await page.body
      .querySelector("rwc-system-notifications")
      .pushNotification({
      title: "Title",
      message: "Message",
      duration: 1,
      closable: true,
      type: "info",
    });
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container">
          <div class="notification-wrapper" data-key="${key}">
            <div class="info notification">
              <div class="close-icon"></div>
              <p class="title">
                Title
              </p>
              <p class="message">
                Message
              </p>
            </div>
          </div>
        </div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should allow setting list of notifications", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    const keys = await page.body
      .querySelector("rwc-system-notifications")
      .setNotifications([
      {
        title: "Title",
        message: "Message",
        duration: 5,
        closable: true,
        type: "info",
      },
      {
        title: "Title",
        message: "Message",
        duration: 5,
        closable: true,
        type: "info",
      },
    ]);
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container">
          <div class="notification-wrapper" data-key="${keys[0]}">
            <div class="info notification">
              <div class="close-icon"></div>
              <p class="title">
                Title
              </p>
              <p class="message">
                Message
              </p>
            </div>
          </div>
          <div class="notification-wrapper" data-key="${keys[1]}">
            <div class="info notification">
              <div class="close-icon"></div>
              <p class="title">
                Title
              </p>
              <p class="message">
                Message
              </p>
            </div>
          </div>
        </div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should allow removing notifications by clicking close icon", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    await page.waitForChanges();
    const component = page.body.querySelector("rwc-system-notifications");
    await component.pushNotification({
      title: "Title",
      message: "Message",
      duration: 1,
      closable: true,
      type: "info",
    });
    await page.waitForChanges();
    component.shadowRoot.querySelector(".close-icon").click();
    await new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 500);
    });
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container"></div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should allow removing notifications by index", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    await page.waitForChanges();
    const component = page.body.querySelector("rwc-system-notifications");
    await component.pushNotification({
      title: "Title",
      message: "Message",
      duration: 1,
      closable: true,
      type: "info",
    });
    await page.waitForChanges();
    component.removeNotification(0);
    await new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 500);
    });
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container"></div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should allow pushing unclosable notifications", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    await page.waitForChanges();
    const key = await page.body
      .querySelector("rwc-system-notifications")
      .pushNotification({
      title: "Title",
      message: "Message",
      duration: 0,
      closable: false,
      type: "info",
    });
    await page.waitForChanges();
    await new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 500);
    });
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container">
          <div class="notification-wrapper" data-key="${key}" style="max-height: 0px;">
            <div class="info notification">
              <p class="title">
                Title
              </p>
              <p class="message">
                Message
              </p>
            </div>
          </div>
        </div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should prevent auto remove of the notification on mouse enter", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    const component = page.body.querySelector("rwc-system-notifications");
    const key = await component.pushNotification({
      title: "Title",
      message: "Message",
      duration: 3,
      closable: false,
    });
    await page.waitForChanges();
    const notificationWrapper = component.shadowRoot.querySelector(".notification-wrapper");
    notificationWrapper.dispatchEvent(new Event("mouseenter"));
    await new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 505);
    });
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container">
          <div class="notification-wrapper" data-key="${key}" style="max-height: 0px;">
            <div class="info notification">
              <p class="title">
                Title
              </p>
              <p class="message">
                Message
              </p>
            </div>
          </div>
        </div>
        </mock:shadow-root>
      </rwc-input>
    `);
    notificationWrapper.dispatchEvent(new Event("mouseleave"));
    await new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, 505);
    });
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container"></div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
  it("should handle resize", async () => {
    const page = await newSpecPage({
      components: [RwcSystemNotification],
      template: () => h("rwc-system-notifications", null),
    });
    await page.waitForChanges();
    const component = page.body.querySelector("rwc-system-notifications");
    const key = await component.pushNotification({
      title: "Title",
      message: "Message",
      duration: 1,
      closable: false,
    });
    await page.waitForChanges();
    global.innerWidth = 500;
    global.dispatchEvent(new Event("resize"));
    await page.waitForChanges();
    expect(page.root).toEqualHtml(`
      <rwc-system-notifications>
        <mock:shadow-root>
        <div class="container">
          <div class="notification-wrapper" data-key="${key}" style="max-height: 0px;">
            <div class="info notification">
              <p class="title">
                Title
              </p>
              <p class="message">
                Message
              </p>
            </div>
          </div>
        </div>
        </mock:shadow-root>
      </rwc-input>
    `);
  });
});
//# sourceMappingURL=system-notifications.spec.js.map
