{"version":3,"file":"offset.js","sourceRoot":"","sources":["../../../jest/polyfill/offset.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAKrD,MAAM,UAAU,kBAAkB;EAChC,eAAe,EAAE,CAAC;EAClB,qBAAqB,EAAE,CAAC;EACxB,mBAAmB,EAAE,CAAC;AACxB,CAAC;AAKD,MAAM,UAAU,eAAe;EAC7B,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,SAAS,EAAE;IAC7C,UAAU,EAAE;MACV,GAAG,EAAE,cAAc,OAAO,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC/E,YAAY,EAAE,IAAI;KACnB;GACF,CAAC,CAAC;AACL,CAAC;AAKD,MAAM,UAAU,mBAAmB,CAAC,eAAuB,CAAC;EAC1D,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,SAAS,EAAE;IAC7C,WAAW,EAAE;MACX,GAAG,EAAE,cAAc,OAAO,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;MACrF,YAAY,EAAE,IAAI;KACnB;IACD,YAAY,EAAE;MACZ,GAAG,EAAE,cAAc,OAAO,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;MACtF,YAAY,EAAE,IAAI;KACnB;IACD,YAAY,EAAE;MACZ,GAAG,EAAE,cAAc,OAAO,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;MACtF,YAAY,EAAE,IAAI;KACnB;GACF,CAAC,CAAC;AACL,CAAC;AAKD,MAAM,UAAU,qBAAqB;EACnC,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,SAAS,EAAE;IAC7C,UAAU,EAAE;MACV,GAAG,EAAE,sBAAc,OAAO,MAAA,IAAI,CAAC,WAAW,mCAAI,CAAC,CAAA,CAAC,CAAC;MACjD,GAAG,EAAE,UAAU,KAAa;QAC1B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;MAC3B,CAAC;MACD,YAAY,EAAE,IAAI;KACnB;IACD,SAAS,EAAE;MACT,GAAG,EAAE,sBAAc,OAAO,MAAA,IAAI,CAAC,UAAU,mCAAI,CAAC,CAAA,CAAC,CAAC;MAChD,GAAG,EAAE,UAAU,KAAa;QAC1B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;MAC1B,CAAC;MACD,YAAY,EAAE,IAAI;KACnB;GACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { MockElement } from '@stencil/core/mock-doc';\n\n/**\n * Shorthand simulation call for all offsets.\n */\nexport function simulateAllOffsets() {\n  simulateOffsets();\n  simulateScrollOffsets();\n  simulateOffsetSizes();\n}\n\n/**\n * Simulates the functionality of the offset properties of the mocked HTML elements.\n */\nexport function simulateOffsets() {\n  Object.defineProperties(MockElement.prototype, {\n    offsetLeft: {\n      get: function () { return parseFloat(getComputedStyle(this).marginLeft) || 0; },\n      configurable: true\n    },\n  });\n}\n\n/**\n * Simulates the functionality of the offset size properties of the mocked HTML elements.\n */\nexport function simulateOffsetSizes(defaultValue: number = 0) {\n  Object.defineProperties(MockElement.prototype, {\n    offsetWidth: {\n      get: function () { return parseFloat(getComputedStyle(this).width) || defaultValue; },\n      configurable: true\n    },\n    offsetHeight: {\n      get: function () { return parseFloat(getComputedStyle(this).height) || defaultValue; },\n      configurable: true\n    },\n    scrollHeight: {\n      get: function () { return parseFloat(getComputedStyle(this).height) || defaultValue; },\n      configurable: true\n    }\n  });\n}\n\n/**\n * Simulates the functionality of the scroll offset properties of the mocked HTML elements.\n */\nexport function simulateScrollOffsets() {\n  Object.defineProperties(MockElement.prototype, {\n    scrollLeft: {\n      get: function () { return this._scrollLeft ?? 0 },\n      set: function (value: number) {\n        this._scrollLeft = value;\n      },\n      configurable: true\n    },\n    scrollTop: {\n      get: function () { return this._scrollTop ?? 0 },\n      set: function (value: number) {\n        this._scrollTop = value;\n      },\n      configurable: true\n    }\n  });\n}\n"]}