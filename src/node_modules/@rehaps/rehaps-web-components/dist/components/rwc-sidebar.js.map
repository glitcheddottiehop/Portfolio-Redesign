{"file":"rwc-sidebar.js","mappings":"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","names":["RwcSidebar"],"sources":["src/components/layout/sidebar/sidebar.scss?tag=rwc-sidebar&encapsulation=shadow","src/components/layout/sidebar/sidebar.tsx"],"sourcesContent":["@import \"global.scss\";\n\n:host {\n  /**\n  * @prop --sidebar-inner-padding: The padding between the sidebar container and the content.\n  * @prop --sidebar-container-box-shadow: The box shadow of the sidebar container.\n  * @prop --sidebar-container-border-color: The color of the border of the sidebar container.\n  * @prop --sidebar-container-border: The border of the sidebar container.\n  * @prop --sidebar-container-background-color: The background color of the sidebar container.\n  * @prop --sidebar-container-width: The preferred width of the sidebar container.\n  * @prop --sidebar-container-transition: The transition settings of the sidebar container.\n  \n  * @prop display: The display mode of the sidebar.\n  * @prop top: The position of the sidebar from top. By default calculated from the top of the window.\n  * @prop height: The height of the sidebar.\n  * @prop max-width: The max width of the sidebar.\n  * @prop position: The position of the sidebar. By default, overlays the content below (absolute).\n  * @prop transition: The sidebar transition settings.\n  * @prop z-index: The z-index of the sidebar. Default: 10.\n  */\n  \n  --sidebar-inner-padding: #{$rwc-spacing--md} #{$rwc-spacing--xs};\n  \n  --sidebar-container-box-shadow: #{$rwc-box-shadow-2xl};\n  --sidebar-container-border-color: #{$rwc-color-border-primary};\n  --sidebar-container-border: 1px solid var(--sidebar-container-border-color);\n  --sidebar-container-background-color: #{$rwc-color-foundation-white};\n  --sidebar-container-width: auto;\n  --sidebar-container-max-width: 20rem;\n  --sidebar-container-transition: box-shadow 400ms ease-in-out;\n\n  display: block;\n  top: 0;\n  height: 100%;\n  max-width: var(--sidebar-container-max-width);\n  position: fixed;\n  transition: left 400ms ease-in-out, right 400ms ease-in-out;\n  z-index: 10;\n}\n\n.container {\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  background-color: var(--sidebar-container-background-color);\n  box-shadow: 0 0 0 0px rgb(0 0 0 / 0);\n  box-sizing: border-box;\n  min-height: unset;\n  width: var(--sidebar-container-width);\n  padding: var(--sidebar-inner-padding);\n  transition: var(--sidebar-container-transition);\n\n  &.inner-scroll {\n    height: 100%;\n    min-height: unset;\n  }\n\n  &.open {\n    box-shadow: var(--sidebar-container-box-shadow);\n  }\n\n  &.left {\n    border-right: var(--sidebar-container-border);\n  }\n\n  &.right {\n    border-left: var(--sidebar-container-border);\n  }\n}\n","import { Component, h, Element, State, Prop, Event, EventEmitter, Method, Host, FunctionalComponent, Listen } from '@stencil/core';\nimport { IClosable } from '../../../interfaces/actions/IClosable';\nimport { IOpenable } from '../../../interfaces/actions/IOpenable';\nimport { IToggleable } from '../../../interfaces/actions/IToggleable';\nimport { SidebarPositions, SidebarStates } from '../../../interfaces/components/layout/sidebar/sidebar';\nimport { EventManager } from '../../../utils/actions/eventManager';\nimport { RWCActionHelper } from '../../../utils/actions/rwcActionHelper';\n\n@Component({\n  tag: 'rwc-sidebar',\n  styleUrl: 'sidebar.scss',\n  shadow: true\n})\nexport class RwcSidebar implements IOpenable, IClosable, IToggleable {\n  /**\n   * The reference to the host element.\n   */\n  @Element() host: HTMLRwcSidebarElement;\n  \n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  public eventManager: EventManager = new EventManager();\n\n  /**\n   * List of the actions available for the Sidebar.\n   */\n  public actions: ('open' | 'close' | 'toggle')[] = ['open', 'close', 'toggle'];\n\n  /**\n   * The event called on the opening of the sidebar.\n   */\n  @Event({ eventName: 'sidebarOpen' }) openEvent: EventEmitter<void>;\n  \n  /**\n   * The event called on the closing of the sidebar.\n   */\n  @Event({ eventName: 'sidebarClose' }) closeEvent: EventEmitter<void>;\n\n  /**\n   * The current open state of the sidebar.\n   */\n  @State() isOpen: boolean = false;\n\n  //#region Validation\n\n  /**\n   * Default sidebar's state\n   */\n  @Prop() defaultState: SidebarStates = 'closed';\n\n  /**\n   * Key used for initializing event listeners\n   */\n  @Prop({ reflect: true }) rwcKey = RWCActionHelper.getDefaultComponentKey('sidebar');\n\n  /**\n   * Window side to stick to\n   */\n  @Prop({ reflect: true }) position: SidebarPositions = 'left';\n\n  /**\n   * If content is longer than sidebar then scroll self instead of parent\n   */\n  @Prop({ reflect: true }) innerScroll: boolean = true;\n\n  //#endregion\n\n  /**\n   * Handles the resize event of the window.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    this.updateHostOffset();\n  }\n\n  /**\n   * Initializes default state\n   */\n  componentWillLoad(): void {\n    this.isOpen = this.defaultState === 'open';\n  }\n\n  /**\n   * Initializes event listeners on insert into DOM\n   */\n  componentDidLoad(): void {\n    this.init();\n  }\n\n  /**\n   * Removes registered event listeners before removing from DOM\n   */\n  disconnectedCallback(): void {\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Initializes toggle / close / open events\n   */\n  @Method()\n  async init(): Promise<void> {\n    this.eventManager.clearEventListeners();\n    this.addToggleEventListeners();\n    this.updateHostOffset();\n  }\n\n  /**\n   * Toggles sidebar's open state\n   */\n  @Method()\n  async toggle(): Promise<void> {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens sidebar\n   */\n  @Method()\n  async open(): Promise<void> {\n    this.isOpen = true;\n    this.updateHostOffset();\n    this.openEvent.emit();\n  }\n\n  /**\n   * Closes sidebar\n   */\n  @Method()\n  async close(): Promise<void> {\n    this.isOpen = false;\n    this.updateHostOffset();\n    this.closeEvent.emit();\n  }\n\n  /**\n   * Updates the left or right offset of the host element based on current state.\n   */\n  private updateHostOffset(): void {\n    if (this.isOpen) {\n      if (this.position === 'left') {\n        this.host.style.right = '';\n        this.host.style.left = '0';\n      }\n\n      if (this.position === 'right') {\n        this.host.style.right = '0';\n        this.host.style.left = '';\n      }\n    } else {\n      let hostWidth = this.host.offsetWidth;\n      if (typeof hostWidth === 'undefined') {\n        hostWidth = window.innerWidth; \n      }\n      \n      if (this.position === 'left') {\n        this.host.style.right = '';\n        this.host.style.left = `-${ hostWidth }px`;\n      }\n\n      if (this.position === 'right') {\n        this.host.style.right = `-${ hostWidth }px`;\n        this.host.style.left = '';\n      }\n    }\n  }\n\n  /**\n   * Find elements by attribute name and component's key and add event listeners on click\n   */\n  addToggleEventListeners(): void {\n    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey)\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host\n        class={ {\n          open: this.isOpen,\n          [this.position]: true,\n        } }\n      >\n        <div\n          class={ {\n            container: true,\n            open: this.isOpen,\n            [this.position]: true,\n            'inner-scroll': this.innerScroll\n          } }\n        >\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}