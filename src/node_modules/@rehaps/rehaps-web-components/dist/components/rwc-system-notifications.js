import { proxyCustomElement, HTMLElement, h, Host, Fragment } from '@stencil/core/internal/client';
import { C as Close } from './close.js';

const systemNotificationsCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--system-notifications-info-title-color:rgb(33, 33, 33);--system-notifications-info-message-color:rgb(33, 33, 33);--system-notifications-info-background-color:rgb(176, 224, 230);--system-notifications-info-border-color:rgb(70, 130, 180);--system-notifications-info-close-icon-color:rgb(33, 33, 33);--system-notifications-info-close-icon-hover-color:rgb(33, 33, 33);--system-notifications-success-title-color:rgb(33, 33, 33);--system-notifications-success-message-color:rgb(33, 33, 33);--system-notifications-success-background-color:rgb(144, 238, 144);--system-notifications-success-border-color:rgb(50, 205, 50);--system-notifications-success-close-icon-color:rgb(33, 33, 33);--system-notifications-success-close-icon-hover-color:rgb(33, 33, 33);--system-notifications-warning-title-color:rgb(33, 33, 33);--system-notifications-warning-message-color:rgb(33, 33, 33);--system-notifications-warning-background-color:rgb(255, 248, 220);--system-notifications-warning-border-color:rgb(255, 165, 0);--system-notifications-warning-close-icon-color:rgb(33, 33, 33);--system-notifications-warning-close-icon-hover-color:rgb(33, 33, 33);--system-notifications-error-title-color:rgb(33, 33, 33);--system-notifications-error-message-color:rgb(33, 33, 33);--system-notifications-error-background-color:rgb(255, 160, 122);--system-notifications-error-border-color:rgb(205, 92, 92);--system-notifications-error-close-icon-color:rgb(33, 33, 33);--system-notifications-error-close-icon-hover-color:rgb(33, 33, 33);--system-notifications-border-width:2px;--system-notifications-border-style:solid;--system-notifications-border-radius:0.5rem;--system-notifications-item-padding:0.5rem 2.5rem\n    0.5rem 0.5rem;--system-notifications-item-gap:0.125rem;--system-notifications-close-icon-size:1.5rem;--system-notifications-close-icon-spacing-right:0.5rem;--system-notifications-title-font-size:0.875rem;--system-notifications-title-font-weight:600;--system-notifications-message-font-size:0.75rem;--system-notifications-message-font-weight:500;--system-notifications-fade-animation-duration:500ms;--system-notifications-height-animation-duration:200ms;display:block}p{margin:0}.container{display:flex;flex-direction:column;gap:var(--system-notifications-item-gap);position:relative}.notification-wrapper{box-sizing:border-box;width:100%;overflow:hidden;max-height:0;transition:opacity var(--system-notifications-fade-animation-duration), max-height calc(var(--system-notifications-height-animation-duration) / 2) linear}.notification-wrapper.closing{max-height:0 !important;opacity:0;transition:opacity var(--system-notifications-fade-animation-duration), max-height var(--system-notifications-height-animation-duration) linear calc(var(--system-notifications-fade-animation-duration) - var(--system-notifications-height-animation-duration))}.notification{--system-notifications-background-color:var(\n    --system-notifications-info-background-color\n  );--system-notifications-border-color:var(\n    --system-notifications-info-border-color\n  );--system-notifications-title-color:var(\n    --system-notifications-info-title-color\n  );--system-notifications-message-color:var(\n    --system-notifications-info-message-color\n  );--system-notifications-close-icon-color:var(\n    --system-notifications-info-close-icon-color\n  );--system-notifications-close-icon-hover-color:var(\n    --system-notifications-info-close-icon-hover-color\n  );background-color:var(--system-notifications-background-color);border:var(--system-notifications-border-width) var(--system-notifications-border-style) var(--system-notifications-border-color);border-radius:var(--system-notifications-border-radius);opacity:1;padding:var(--system-notifications-item-padding);position:relative}.notification.success{--system-notifications-background-color:var(\n    --system-notifications-success-background-color\n  );--system-notifications-border-color:var(\n    --system-notifications-success-border-color\n  );--system-notifications-title-color:var(\n    --system-notifications-success-title-color\n  );--system-notifications-message-color:var(\n    --system-notifications-success-message-color\n  );--system-notifications-close-icon-color:var(\n    --system-notifications-success-close-icon-color\n  );--system-notifications-close-icon-hover-color:var(\n    --system-notifications-success-close-icon-hover-color\n  )}.notification.warning{--system-notifications-background-color:var(\n    --system-notifications-warning-background-color\n  );--system-notifications-border-color:var(\n    --system-notifications-warning-border-color\n  );--system-notifications-title-color:var(\n    --system-notifications-warning-title-color\n  );--system-notifications-message-color:var(\n    --system-notifications-warning-message-color\n  );--system-notifications-close-icon-color:var(\n    --system-notifications-warning-close-icon-color\n  );--system-notifications-close-icon-hover-color:var(\n    --system-notifications-warning-close-icon-hover-color\n  )}.notification.error{--system-notifications-background-color:var(\n    --system-notifications-error-background-color\n  );--system-notifications-border-color:var(\n    --system-notifications-error-border-color\n  );--system-notifications-title-color:var(\n    --system-notifications-error-title-color\n  );--system-notifications-message-color:var(\n    --system-notifications-error-message-color\n  );--system-notifications-close-icon-color:var(\n    --system-notifications-error-close-icon-color\n  );--system-notifications-close-icon-hover-color:var(\n    --system-notifications-error-close-icon-hover-color\n  )}.close-icon{bottom:0;top:0;cursor:pointer;display:flex;flex-direction:column;justify-content:center;position:absolute;right:var(--system-notifications-close-icon-spacing-right)}.close-icon>svg{fill:var(--system-notifications-close-icon-color);height:var(--system-notifications-close-icon-size)}.close-icon:hover>svg{fill:var(--system-notifications-close-icon-hover-color)}.title{color:var(--system-notifications-title-color);font-size:var(--system-notifications-title-font-size);font-weight:var(--system-notifications-title-font-weight)}.message{color:var(--system-notifications-message-color);font-size:var(--system-notifications-message-font-size);font-weight:var(--system-notifications-message-font-weight)}";

const RwcSystemNotification = proxyCustomElement(class RwcSystemNotification extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.notifications = new Map();
    this.stateChangeTrigger = false;
  }
  get animationDuration() {
    return Number.parseInt(getComputedStyle(this.host).getPropertyValue("--system-notifications-fade-animation-duration"));
  }
  get heightAnimationDuration() {
    return Number.parseInt(getComputedStyle(this.host).getPropertyValue("--system-notifications-height-animation-duration"));
  }
  onWindowResize() {
    this.notificationContainerElement
      .querySelectorAll(".notification-wrapper")
      .forEach((wrapper) => {
      wrapper.style.maxHeight = `${wrapper.scrollHeight}px`;
    });
  }
  connectedCallback() {
    this.notifications.clear();
  }
  disconnectedCallback() {
    this.notifications.forEach((timeout) => {
      clearTimeout(timeout);
    });
  }
  async pushNotification(notification) {
    if (!notification.key) {
      notification.key = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString();
    }
    this.notifications.set(notification, this.initAutoRemove(notification));
    if (this.forceStateChange()) {
      await new Promise(requestAnimationFrame);
      setTimeout(() => {
        this.updateNotificationMaxHeight(notification);
      }, 0);
    }
    return notification.key;
  }
  async setNotifications(notifications) {
    this.clearNotifications();
    const keys = [];
    for (const notification of notifications) {
      keys.push(await this.pushNotification(notification));
    }
    return keys;
  }
  async removeNotification(index) {
    const key = Array.from(this.notifications.keys())[index];
    this.removeNotificationByReference(key);
  }
  async clearNotifications() {
    this.notifications.clear();
    this.forceStateChange();
  }
  initAutoRemove(notification) {
    this.unsetAutoRemoveByReference(notification);
    if (notification.duration > 0) {
      return setTimeout(() => {
        this.removeNotificationByReference(notification);
      }, notification.duration);
    }
    return null;
  }
  unsetAutoRemoveByReference(notification) {
    const timeout = this.notifications.get(notification);
    if (timeout !== null) {
      clearTimeout(timeout);
    }
  }
  async removeNotificationByReference(notification) {
    setTimeout(() => {
      notification.closing = true;
      if (this.forceStateChange()) {
        setTimeout(() => {
          this.handleNotificationRemove(notification);
        }, Math.max(0, this.animationDuration - this.heightAnimationDuration));
      }
    }, 0);
  }
  async handleNotificationRemove(notification) {
    setTimeout(() => {
      this.notifications.delete(notification);
      this.forceStateChange();
    }, Math.max(0, this.heightAnimationDuration));
  }
  updateNotificationMaxHeight(notification) {
    const notificationElement = this.notificationContainerElement.querySelector(`[data-key="${notification.key}"]`);
    if (notificationElement) {
      notificationElement.style.maxHeight = `${notificationElement.scrollHeight}px`;
    }
    return notificationElement;
  }
  forceStateChange() {
    try {
      this.stateChangeTrigger = !this.stateChangeTrigger;
      return true;
    }
    catch (e) {
      return false;
    }
  }
  render() {
    return (h(Host, null, h("div", { ref: (element) => (this.notificationContainerElement = element), class: "container" }, this.renderNotifications())));
  }
  renderNotifications() {
    var _a;
    const notificationElements = [];
    for (const [notification, _timeout] of this.notifications) {
      notificationElements.push(h("div", { class: {
          ["notification-wrapper"]: true,
          closing: notification.closing,
        }, key: notification.key, "data-key": notification.key, onMouseEnter: () => this.unsetAutoRemoveByReference(notification), onMouseLeave: () => this.initAutoRemove(notification) }, h("div", { class: {
          notification: true,
          [(_a = notification.type) !== null && _a !== void 0 ? _a : "info"]: true,
        } }, this.renderCloseIcon(notification), notification.title && h("p", { class: "title" }, notification.title), notification.message && (h("p", { class: "message" }, notification.message)))));
    }
    return notificationElements;
  }
  renderCloseIcon(notification) {
    if (notification.closable) {
      return (h("div", { class: "close-icon", innerHTML: Close, onClick: () => this.removeNotificationByReference(notification) }));
    }
    return h(Fragment, null);
  }
  get host() { return this; }
  static get style() { return systemNotificationsCss; }
}, [1, "rwc-system-notifications", {
    "notifications": [32],
    "stateChangeTrigger": [32],
    "pushNotification": [64],
    "setNotifications": [64],
    "removeNotification": [64],
    "clearNotifications": [64]
  }, [[9, "resize", "onWindowResize"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["rwc-system-notifications"];
  components.forEach(tagName => { switch (tagName) {
    case "rwc-system-notifications":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, RwcSystemNotification);
      }
      break;
  } });
}

const RwcSystemNotifications = RwcSystemNotification;
const defineCustomElement = defineCustomElement$1;

export { RwcSystemNotifications, defineCustomElement };

//# sourceMappingURL=rwc-system-notifications.js.map