{"file":"dropdown.js","mappings":"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","names":[],"sources":["src/components/basic/dropdown/dropdown.scss?tag=rwc-dropdown&encapsulation=shadow","src/components/basic/dropdown/dropdown.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n   * @prop --dropdown-background-color: The background color of the dropdown.\n   * @prop --dropdown-border: The border style of the dropdown.\n   * @prop --dropdown-border-radius: The border radius of the dropdown.\n   * @prop --dropdown-box-shadow: The box shadow of the dropdown.\n   * @prop --dropdown-max-width: The maximum width of the dropdown wrapper.\n   * @prop --dropdown-container-padding: The padding of the dropdown inner container.\n   * \n   * @prop --dropdown-wrapper-transition: The transition of the dropdown wrapper.\n   * \n   * @prop --dropdown-container-margin: The margin of the outer container of the dropdown.\n   * @prop --dropdown-container-padding: The padding of the inner container of the dropdown.\n   *\n   * @prop --dropdown-item-padding: The padding of the item inside the unnamed slot of the dropdown.\n   * @prop --dropdown-item-background-color: The background color of the item inside the unnamed slot of the dropdown.\n   * @prop --dropdown-item-hover-background-color: The background color of the item inside the unnamed slot of the dropdown on hover.\n   *\n   * @prop --dropdown-animation-duration: The duration of the opening and closing animations of the dropdown.\n   *\n   * @prop display: The display mode of the host element.\n   * @prop position: The position of the host element.\n   */\n  --dropdown-background-color: #{$rwc-color-foundation-white};\n  --dropdown-border: 1px solid #{$rwc-color-border-primary};\n  --dropdown-border-radius: #{$rwc-border-radius--md};\n  --dropdown-box-shadow: #{$rwc-box-shadow-lg};\n  --dropdown-max-width: 100%;\n\n  --dropdown-wrapper-transition: height var(--dropdown-animation-duration) ease-in-out;\n  \n  --dropdown-container-margin: #{$rwc-spacing--3xs} 0 0 0;\n  --dropdown-container-padding: #{$rwc-spacing--xs} 0;\n  \n  --dropdown-item-padding: #{$rwc-spacing--3xs} #{$rwc-spacing--xs};\n  --dropdown-item-background-color: transparent;\n  --dropdown-item-hover-background-color: #{$rwc-color-grey-200};\n  \n  --dropdown-animation-duration: 200ms;\n\n  display: block;\n  position: relative;\n}\n\n.wrapper {\n  background-color: var(--dropdown-background-color);\n  border: var(--dropdown-border);\n  border-radius: var(--dropdown-border-radius);\n  box-shadow: var(--dropdown-box-shadow);\n  height: 0;\n  left: #{$off-screen};\n  margin: var(--dropdown-container-margin);\n  max-width: var(--dropdown-wrapper-max-width);\n  overflow: hidden;\n  position: absolute;\n  transition: visibility 0ms var(--dropdown-animation-duration), left 0ms var(--dropdown-animation-duration), var(--dropdown-wrapper-transition);\n  \n  &.open {\n    left: 0;\n    visibility: visible;\n    height: auto;\n    transition: var(--dropdown-wrapper-transition);\n  }\n  \n  &.mode-fixed {\n    position: fixed;\n  }\n  \n  &.size-auto {\n    .container {\n      display: inline-block;\n    }\n  }\n}\n\n.container {\n  padding: var(--dropdown-container-padding);\n}\n\n::slotted(*) {\n  background-color: var(--dropdown-item-background-color);\n  padding: var(--dropdown-item-padding);\n}\n\n::slotted(*:hover) {\n  background-color: var(--dropdown-item-hover-background-color);\n}\n","import { Component, Element, Event, EventEmitter, FunctionalComponent, h, Host, Listen, Method, Prop, State } from '@stencil/core';\nimport { DropdownMode, DropdownOpenMode, DropdownPosition, DropdownSize } from '../../../interfaces/components/basic/dropdown/dropdown';\nimport { IPosition } from '../../../interfaces/data/position';\nimport { EventManager } from '../../../utils/actions/eventManager';\n\n@Component({\n  tag: 'rwc-dropdown',\n  styleUrl: './dropdown.scss',\n  shadow: true\n})\nexport class RwcDropdown {\n  /**\n   * Event manager used to manage component's event subscriptions.\n   */\n  private eventManager: EventManager = new EventManager();\n\n  /**\n   * Reference to the parent of the dropdown.\n   */\n  private parent: HTMLElement;\n\n  /**\n   * Reference to the wrapper of the dropdown.\n   */\n  private wrapperElement: HTMLDivElement;\n\n  /**\n   * Reference to the container of the dropdown.\n   */\n  private containerElement: HTMLDivElement;\n\n  /**\n   * Reference to the host element of the component.\n   */\n  @Element() host: HTMLRwcDropdownElement;\n\n  /**\n   * The open mode of the dropdown.\n   */\n  @Prop({ reflect: true }) openMode: DropdownOpenMode = 'manual';\n\n  /**\n   * The position of the dropdown from the parent.\n   */\n  @Prop({ reflect: true }) position: DropdownPosition = 'bottom';\n\n  /**\n   * The sizing of the dropdown.\n   */\n  @Prop({ reflect: true }) size: DropdownSize = 'parent';\n\n  /**\n   * Determines the rendering behaviour of the dropdown.\n   */\n  @Prop({ reflect: true }) mode: DropdownMode = 'fixed';\n\n  /**\n   * Determines if the dropdown is open.\n   */\n  @State() isOpen: boolean = false;\n\n  /**\n   * Event fired when the dropdown opening is triggered.\n   */\n  @Event({ eventName: 'dropdownOpen' }) dropdownOpenEvent: EventEmitter<void>;\n  \n  /**\n   * Event fired when the dropdown closing is triggered\n   */\n  @Event({ eventName: 'dropdownClose' }) dropdownCloseEvent: EventEmitter<void>;\n\n  /**\n   * Stencil event called the first time the component is to be initialized.\n   */\n  componentWillLoad(): void {\n    this.parent = this.host.parentElement;\n    this.init();\n  }\n\n  /**\n   * Stencil event called when the component is fully loaded for the first time.\n   */\n  componentDidLoad(): void {\n    this.wrapperElement.style.height = `0px`;\n  }\n\n  /**\n   * Fires when the component is about to be destroyed.\n   */\n  disconnectedCallback(): void {\n    this.eventManager.clearEventListeners();\n  }\n\n  /**\n   * Initialize the component.\n   */\n  @Method()\n  async init(): Promise<void> {\n    this.eventManager.clearEventListeners();\n    this.initHoverEvents();\n    this.initClickEvents();\n  }\n\n  /**\n   * Handles the scroll event.\n   */\n  @Listen('scroll', { target: 'window' })\n  onWindowScroll(): void {\n    if (this.mode === 'fixed') {\n      this.calculateDropdownOffset();\n    }\n  }\n\n  /**\n   * Handles the window resize event.\n   */\n  @Listen('resize', { target: 'window' })\n  onWindowResize(): void {\n    if (this.isOpen) {\n      this.setState(false);\n    }\n  }\n\n  /**\n   * Closes the dropdown on click outside the dropdown wrapper.\n   */\n  @Listen('click', { target: 'document' })\n  async onDocumentClick(event: MouseEvent): Promise<void> {\n    if (this.isOpen && !event.composedPath().includes(this.wrapperElement)) {\n      await new Promise(requestAnimationFrame);\n      this.setState(false);\n    }\n  }\n\n  /**\n   * Initialize the hover event listeners.\n   */\n  private initHoverEvents(): void {\n    if (this.openMode === 'hover') {\n      this.eventManager.registerEventListener(this.parent, 'mouseenter', () => this.setState(true));\n      this.eventManager.registerEventListener(this.parent, 'mouseleave', () => this.setState(false));\n    }\n  }\n\n  /**\n   * Initialize the click event listeners.\n   */\n  private initClickEvents(): void {\n    if (this.openMode === 'toggle') {\n      this.eventManager.registerEventListener(this.parent, 'click', async () => {\n        if (!this.isOpen) {\n          await new Promise(requestAnimationFrame);\n          this.setState(true);\n        }\n      });\n    }\n  }\n\n  /**\n   * Set state of the dropdown.\n   */\n  @Method()\n  async setState(value: boolean): Promise<void> {\n    this.handleStateChange(value);\n  }\n\n  /**\n   * Handle the state change of the dropdown.\n   */\n  async handleStateChange(value: boolean): Promise<void> {\n    this.isOpen = value;\n    \n    if (this.isOpen) {\n      this.dropdownOpenEvent.emit();\n    } else {\n      this.dropdownCloseEvent.emit();\n    }\n    \n    await new Promise(requestAnimationFrame);\n    this.calculateDropdownSize();\n    this.calculateDropdownOffset();\n  }\n\n  /**\n   * Calculate the position of the dropdown.\n   */\n  async calculateDropdownOffset(): Promise<void> {\n    if (this.wrapperElement && this.parent) {\n      let offset = this.getStartingOffset();\n      offset = this.calculateSideOffset(offset);\n      offset = this.fixOverflow(offset);\n      \n      this.wrapperElement.style.left = this.isOpen ? `${ offset.x }px` : '';\n      this.wrapperElement.style.top = `${ offset.y }px`;\n    }\n  }\n\n  /**\n   * Get the starting offset of the dropdown.\\\n   * Returns zero for non fixed modes.\n   */\n  private getStartingOffset(): IPosition {\n    if (this.mode === 'fixed') {\n      return {\n        x: this.parent.getBoundingClientRect().left,\n        y: this.parent.getBoundingClientRect().top\n      }\n    } else {\n      return {\n        x: 0,\n        y: 0\n      }\n    }\n  }\n\n  /**\n   * Get the offset for the side position of the dropdown.\n   */\n  private calculateSideOffset({ x, y }: IPosition): IPosition {\n    if (this.position === 'side') {\n      x += this.parent.offsetWidth;\n      if (this.mode === 'absolute') {\n        y = - this.parent.offsetHeight;\n      }\n    } else if (this.mode === 'fixed') {\n      y += this.parent.offsetHeight;\n    }\n\n    return {\n      x: x,\n      y: y\n    }\n  }\n\n  /**\n   * Calculate the right overflow and position the dropdown to fit the screen.\n   */\n  private fixOverflow({ x, y }: IPosition): IPosition {\n    const rightEdgePosition = this.mode === 'absolute' ?\n      this.parent.getBoundingClientRect().left + x + this.wrapperElement.offsetWidth :\n      x + this.wrapperElement.offsetWidth;\n\n    if (rightEdgePosition > window.innerWidth) {\n      x -= rightEdgePosition - window.innerWidth;\n    }\n\n    return {\n      x: x,\n      y: y\n    }\n  }\n\n  /**\n   * Calculate the size of the dropdown if set to parent size.\n   */\n  private async calculateDropdownSize(): Promise<void> {\n    this.wrapperElement.style.height = `${this.isOpen ? this.containerElement.offsetHeight : 0}px`;\n    if (this.mode === 'fixed' && this.size === 'parent') {\n      this.wrapperElement.style.width = `${ this.parent.offsetWidth }px`;\n    } else {\n      this.wrapperElement.style.width = '';\n    }\n  }\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <div\n          ref={ (element: HTMLDivElement) => this.wrapperElement = element }\n          class={ {\n            wrapper: true,\n            open: this.isOpen,\n            [`mode-${ this.mode }`]: true,\n            [`size-${ this.size }`]: true\n          } }>\n          <div\n            ref={ (element: HTMLDivElement) => this.containerElement = element }\n            class=\"container\"\n          >\n            <div class=\"content\">\n              <slot></slot>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}