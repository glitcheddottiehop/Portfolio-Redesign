import { proxyCustomElement, HTMLElement, createEvent, h, Fragment, Host } from '@stencil/core/internal/client';
import { R as RWCActionHelper } from './rwcActionHelper.js';
import { C as Close } from './close.js';
import { E as EventManager } from './eventManager.js';

const modalCss = ":host{--falloff-color:var(--rwc-falloff-color);--container-spacing:var(--rwc-spacing--sm);--header-spacing:var(--rwc-spacing--lo) var(--rwc-spacing--md);--content-spacing:var(--rwc-spacing--md);--footer-spacing:var(--rwc-spacing--lo) var(--rwc-spacing--md);--max-container-width:42.5rem;--min-container-width:20rem;--background-color:var(--rwc-background-color-main);--border-radius:var(--rwc-border-radius--md);--divider-color:var(--rwc-divider-color--light);--divider-width:var(--rwc-divider-width--default);--icon-size:var(--rwc-icon-size--md);--icon-padding:var(--rwc-spacing--sm);--icon-color:var(--rwc-color-neutral);--icon-color--hover:var(--rwc-color-neutral--hover);--modal-animation-duration:200ms}@media all and (min-width: 30rem){:host{--container-spacing:var(--rwc-spacing--md)}}@media all and (min-width: 64rem){:host{--container-spacing:var(--rwc-spacing--xl)}}.container{background-color:var(--falloff-color);display:none;flex-direction:column;justify-content:center;height:100%;width:100%;left:0;top:0;position:fixed;opacity:0}.container.open{display:flex}.container.inner-scroll .scroll-wrapper{overflow-y:hidden}.container.inner-scroll .content{overflow-y:auto}.container.inner-scroll .inner-container-wrapper{max-height:100vh;position:relative;height:100%}.container.inner-scroll .inner-container{max-height:100%;display:flex;flex-direction:column}.scroll-wrapper{overflow-y:auto}.inner-container-wrapper{box-sizing:border-box;padding:var(--container-spacing);margin-left:auto;margin-right:auto;max-width:calc(var(--max-container-width) + 2 * var(--container-spacing));min-width:var(--min-container-width);width:100%}.inner-container{background-color:var(--background-color);border-radius:var(--border-radius);position:relative}.header{padding:var(--header-spacing);position:relative}.header.flex{display:flex;flex-direction:row;justify-content:space-between}.header.flex .close{flex-shrink:0}.header.empty{padding-top:calc(var(--icon-size) - var(--content-spacing))}.content{padding:var(--content-spacing);overflow-y:hidden}.footer{padding:var(--footer-spacing)}.divider{background-color:var(--divider-color);height:var(--divider-width);width:100%}.close-wrapper{position:absolute;height:100%;right:0;top:0}.close{box-sizing:content-box;cursor:pointer;color:var(--icon-color);display:flex;flex-direction:column;height:var(--icon-size);width:var(--icon-size);justify-content:center;padding:var(--icon-padding);transition:color 0.2s ease-in-out}.close:hover{color:var(--icon-color--hover)}.close img{height:100%;max-width:100%;max-height:100%}";

const RwcModal$1 = proxyCustomElement(class RwcModal extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.openEvent = createEvent(this, "modalOpen", 7);
    this.closeEvent = createEvent(this, "modalClose", 7);
    this.hasHeaderContent = false;
    this.hasFooterContent = false;
    this.eventManager = new EventManager();
    this.actions = ["open", "close", "toggle"];
    this.animationTimeout = null;
    this.rwcKey = RWCActionHelper.getDefaultComponentKey("modal");
    this.innerScroll = false;
    this.renderHeaderDivider = true;
    this.renderFooterDivider = true;
    this.renderCloseIcon = true;
    this.animationSpeed = 200;
    this.isOpen = false;
  }
  get currentOpacity() {
    var _a;
    return Number.parseFloat(((_a = this.rootElement) === null || _a === void 0 ? void 0 : _a.style.opacity) ||
      getComputedStyle(this.rootElement).opacity);
  }
  get animationDuration() {
    return Number.parseInt(getComputedStyle(this.host).getPropertyValue("--modal-animation-duration"));
  }
  connectedCallback() {
    this.init();
  }
  disconnectedCallback() {
    this.eventManager.clearEventListeners();
  }
  componentWillRender() {
    this.hasHeaderContent = Boolean(this.host.querySelector('[slot="header"]'));
    this.hasFooterContent = Boolean(this.host.querySelector('[slot="footer"]'));
  }
  async init() {
    this.eventManager.clearEventListeners();
    this.bindToggleActions();
  }
  async toggle() {
    if (this.isOpen) {
      this.close();
    }
    else {
      this.open();
    }
  }
  async open() {
    if (!this.isOpen) {
      if (RwcModal.openModal !== null) {
        await RwcModal.openModal.close();
      }
      clearTimeout(this.animationTimeout);
      this.isOpen = true;
      this.animationTimeout = setTimeout(() => {
        RwcModal.openModal = this;
        document.body.classList.add("modal-open");
        this.openEvent.emit();
      }, this.animationDuration);
    }
  }
  async close() {
    if (this.isOpen) {
      clearTimeout(this.animationTimeout);
      this.isOpen = false;
      setTimeout(() => {
        if (RwcModal.openModal === this) {
          RwcModal.openModal = null;
          document.body.classList.remove("modal-open");
        }
        this.closeEvent.emit();
      }, this.animationDuration);
    }
  }
  bindToggleActions() {
    RWCActionHelper.bindRWCActions(this, this.host, this.actions, this.rwcKey);
  }
  falloffClick(event) {
    if (!this.innerContainer.contains(event.target) &&
      !this.host.contains(event.target)) {
      this.close();
    }
  }
  renderHeaderHtml() {
    if (this.hasHeaderContent) {
      return (h(Fragment, null, h("div", { class: { header: true, flex: this.renderCloseIcon } }, h("div", null, h("slot", { name: "header" })), this.renderCloseIcon ? this.renderCloseIconHtml() : ""), this.renderHeaderDivider ? h("div", { class: "divider" }) : ""));
    }
    else if (this.renderCloseIcon) {
      return h("div", { class: "header empty" }, this.renderCloseIconHtml());
    }
    return "";
  }
  renderFooterHtml() {
    if (this.hasFooterContent) {
      return (h(Fragment, null, this.renderFooterDivider ? h("div", { class: "divider" }) : "", h("div", { class: "footer" }, h("slot", { name: "footer" }))));
    }
    return h(Fragment, null);
  }
  renderCloseIconHtml() {
    if (this.renderCloseIcon) {
      return (h(Fragment, null, h("div", { class: "close-wrapper" }, h("div", { class: "close", onClick: () => this.close(), innerHTML: Close }))));
    }
    return h(Fragment, null);
  }
  render() {
    return (h(Host, null, h("div", { ref: (element) => (this.rootElement = element), class: {
        container: true,
        open: this.isOpen,
        "inner-scroll": this.innerScroll,
      }, onClick: (event) => this.falloffClick(event) }, h("div", { class: "scroll-wrapper" }, h("div", { class: "inner-container-wrapper" }, h("div", { class: "inner-container", ref: (element) => (this.innerContainer = element) }, this.renderHeaderHtml(), h("div", { class: "content" }, h("slot", null)), this.renderFooterHtml()))))));
  }
  get host() { return this; }
  static get style() { return modalCss; }
}, [1, "rwc-modal", {
    "rwcKey": [513, "rwc-key"],
    "innerScroll": [516, "inner-scroll"],
    "renderHeaderDivider": [516, "render-header-divider"],
    "renderFooterDivider": [516, "render-footer-divider"],
    "renderCloseIcon": [516, "render-close-icon"],
    "animationSpeed": [2, "animation-speed"],
    "isOpen": [32],
    "init": [64],
    "toggle": [64],
    "open": [64],
    "close": [64]
  }]);
RwcModal$1.openModal = null;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["rwc-modal"];
  components.forEach(tagName => { switch (tagName) {
    case "rwc-modal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, RwcModal$1);
      }
      break;
  } });
}

const RwcModal = RwcModal$1;
const defineCustomElement = defineCustomElement$1;

export { RwcModal, defineCustomElement };

//# sourceMappingURL=rwc-modal.js.map