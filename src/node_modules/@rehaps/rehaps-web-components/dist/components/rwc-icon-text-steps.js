import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { D as DocumentUtils, d as defineCustomElement$2 } from './grid.js';

const iconTextStepsCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--icon-text-steps-grid-column-gap:1.5rem;--icon-text-steps-grid-columns-row-gap:1.5rem;--icon-text-steps-card-width:10.75rem;display:block}.container{position:relative}.grid{--grid-column-gap:var(--icon-text-steps-grid-column-gap);--grid-row-gap:var(--icon-text-steps-grid-columns-row-gap)}::slotted(*){width:var(--icon-text-steps-card-width);margin-left:auto;margin-right:auto}";

const RwcIconTextSteps$1 = proxyCustomElement(class RwcIconTextSteps extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.columns = 4;
    this.autoUpdateLayout = true;
    this.autoColumnCount = 4;
  }
  onWindowResize() {
    this.updateLayout();
  }
  componentDidLoad() {
    this.updateLayout();
  }
  updateLayout() {
    if (this.autoUpdateLayout) {
      const stepCount = this.host.children.length;
      if (stepCount > 0) {
        const minCardWidth = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-card-width'));
        const gridGapSize = DocumentUtils.convertToPixels(getComputedStyle(this.host).getPropertyValue('--icon-text-steps-grid-column-gap'));
        const minHostSize = stepCount * minCardWidth + (stepCount - 1) * gridGapSize;
        let hostWidth = this.host.offsetWidth;
        if (typeof hostWidth === 'undefined') {
          hostWidth = window.innerWidth;
        }
        if (hostWidth >= minHostSize) {
          this.autoColumnCount = stepCount;
          this.host.classList.remove(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);
        }
        else {
          this.autoColumnCount = 1;
          this.host.classList.add(RwcIconTextSteps.VERTICAL_LAYOUT_CLASS);
        }
      }
      else {
        this.autoColumnCount = 4;
      }
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "container" }, h("rwc-grid", { class: "grid", columns: this.autoUpdateLayout ? this.autoColumnCount : this.columns }, h("slot", null)))));
  }
  get host() { return this; }
  static get style() { return iconTextStepsCss; }
}, [1, "rwc-icon-text-steps", {
    "columns": [8],
    "autoUpdateLayout": [4, "auto-update-layout"],
    "autoColumnCount": [32]
  }, [[9, "resize", "onWindowResize"]]]);
RwcIconTextSteps$1.VERTICAL_LAYOUT_CLASS = 'vertical';
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["rwc-icon-text-steps", "rwc-grid"];
  components.forEach(tagName => { switch (tagName) {
    case "rwc-icon-text-steps":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, RwcIconTextSteps$1);
      }
      break;
    case "rwc-grid":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const RwcIconTextSteps = RwcIconTextSteps$1;
const defineCustomElement = defineCustomElement$1;

export { RwcIconTextSteps, defineCustomElement };

//# sourceMappingURL=rwc-icon-text-steps.js.map