{"file":"rwc-info-card.js","mappings":";;;;;AAAA,MAAM,WAAW,GAAG,+pFAA+pF;;MCStqFA,aAAW;;;;;gBAIkB,EAAE;wBAKO,IAAI;wBAKJ,KAAK;yBAKJ,KAAK;mBAK5B,KAAK;gBAKG,YAAY;;EAK/C,MAAM;IACJ,QACE,EAAC,IAAI,QACH,gBACE,KAAK,EAAC,MAAM,EACZ,YAAY,EAAG,IAAI,CAAC,YAAY,EAChC,YAAY,EAAG,IAAI,CAAC,YAAY,EAChC,aAAa,EAAG,IAAI,CAAC,aAAa,EAClC,OAAO,EAAG,IAAI,CAAC,OAAO,IAEtB,WACE,KAAK,EAAG;QACN,SAAS,EAAE,IAAI;QACf,CAAC,QAAS,IAAI,CAAC,IAAK,EAAE,GAAG,IAAI;OAC9B,IAED,WAAK,KAAK,EAAC,MAAM,IACf,YAAM,IAAI,EAAC,MAAM,IACb,IAAI,CAAC,UAAU,EAAE,CACd,CACH,EACN,WAAK,KAAK,EAAC,MAAM,IACf,eAAa,CACT,CACF,CACG,CACN,EACP;GACH;EAKD,UAAU;IACR,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,QACE,WAAK,GAAG,EAAG,IAAI,CAAC,IAAI,EAAG,GAAG,EAAC,MAAM,GAAO,EACzC;KACF;IACD,QACE,WAAK,SAAS,EAAG,QAAQ,EAAG,KAAK,EAAC,UAAU,GAAO,EACpD;GACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["RwcInfoCard"],"sources":["src/components/basic/cards/info-card/info-card.scss?tag=rwc-info-card&encapsulation=shadow","src/components/basic/cards/info-card/info-card.tsx"],"sourcesContent":["@import 'global.scss';\n\n:host {\n  /**\n  * @prop --info-card-border-width: The border width of the info card.\n  * @prop --info-card-border-style: The style of the border of the info card.\n  * @prop --info-card-border-color: The color of the border of the info card.\n  * @prop --info-card-hover-border-color: The color of the border of the card on hover.\n  * @prop --info-card-border-radius: The border radius of the info card.\n  * @prop --info-card-border-transition: The transition of the border of the info card.\n  * @prop --info-card-box-shadow: The shadow of the info card.\n  * @prop --info-card-box-shadow-animated-hover: The animation of the box shadow of the info card on hover.\n  * @prop --info-card-container-transition: The transition of the container of the info card.\n  * @prop --info-card-inner-padding: The inner padding of the info card.\n  * @prop --info-card-icon-size: The size of the icon of the info card.\n  * @prop --info-card-icon-margin-right: The margin size from right of the icon of the info card.\n  * @prop --info-card-icon-color: The color of the icon of the info card.\n  */\n  --info-card-border-width: 2px;\n  --info-card-border-style: solid;\n  --info-card-border-color: #{$rwc-color-border-primary};\n  --info-card-hover-border-color: #{$rwc-color-border-active};\n  --info-card-border-radius: #{$rwc-spacing--sm};\n  --info-card-border-transition: border-bottom-color 0.4s, border-left-color 0.4s, border-right-color 0.4s, border-top-color 0.4s, width 0.4s ease-in-out, height 0.4s ease-in-out;\n  --info-card-box-shadow: #{$rwc-box-shadow-lg};\n  --info-card-box-shadow-animated-hover: #{$rwc-box-shadow-xl};\n  --info-card-container-transition: box-shadow 0.4s ease-in-out;\n  --info-card-inner-padding: #{$rwc-spacing--md};\n\n  --info-card-icon-size: 2.5rem;\n  --info-card-icon-margin-after: 1rem;\n  --info-card-icon-color: #{$rwc-color-grey-600};\n\n  display: block;\n}\n\n.card {\n  --card-border-width: var(--info-card-border-width);\n  --card-border-style: var(--info-card-border-style);\n  --card-border-color: var(--info-card-border-color);\n  --card-hover-border-color: var(--info-card-hover-border-color);\n  --card-border-radius: var(--info-card-border-radius);\n  --card-border-transition: var(--info-card-border-transition);\n  --card-box-shadow-animated-hover: var(--info-card-box-shadow-animated-hover);\n  --card-container-transition: var(--info-card-container-transition);\n  --card-inner-padding: var(--info-card-inner-padding);\n  --card-box-shadow: var(--info-card-box-shadow);\n}\n\n.container {\n  display: flex;\n}\n\n.icon {\n  align-self: center;\n  flex-shrink: 0;\n  height: var(--info-card-icon-size);\n  width: var(--info-card-icon-size);\n  margin-right: var(--info-card-icon-margin-after);\n\n  svg {\n    height: 100%;\n    width: 100%;\n  }\n\n  path {\n    fill: var(--info-card-icon-color);\n  }\n}\n\n.text {\n  align-self: center;\n  flex-grow: 1;\n  margin-left: calc(0px - (var(--info-card-icon-margin-after) + var(--info-card-icon-size)));\n  padding-left: calc(var(--info-card-icon-margin-after) + var(--info-card-icon-size));\n  text-align: center;\n}\n\n.mode-vertical {\n  flex-direction: column;\n  \n  .icon {\n    margin-right: unset;\n    margin-bottom: var(--info-card-icon-margin-after);\n  }\n  \n  .text {\n    margin-left: unset;\n    padding-left: unset;\n  }\n}\n","import { Component, h, Prop, Host, FunctionalComponent } from '@stencil/core';\nimport InfoIcon from '@material-design-icons/svg/outlined/info.svg';\nimport { InfoCardLayoutMode } from '../../../../interfaces/components/basic/cards/info-card/info-card';\n\n@Component({\n  tag: 'rwc-info-card',\n  styleUrl: 'info-card.scss',\n  shadow: true\n})\nexport class RwcInfoCard {\n  /**\n   * Path to the icon.\n   */\n  @Prop({ reflect: true }) icon: string = '';\n\n  /**\n   * Set rendering of box-shadow.\n   */\n  @Prop({ reflect: true }) renderShadow: boolean = true;\n\n  /**\n   * Set rendering of border.\n   */\n  @Prop({ reflect: true }) renderBorder: boolean = false;\n\n  /**\n   * Animate border on hover.\n   */\n  @Prop({ reflect: true }) animateBorder: boolean = false;\n\n  /**\n   * Change cursor to pointer on hover.\n   */\n  @Prop() pointer: boolean = false;\n\n  /**\n   * The layout mode of the info card.\n   */\n  @Prop() mode: InfoCardLayoutMode = 'horizontal';\n\n  /**\n   * Renders the component.\n   */\n  render(): FunctionalComponent {\n    return (\n      <Host>\n        <rwc-card\n          class=\"card\"\n          renderShadow={ this.renderShadow }\n          renderBorder={ this.renderBorder }\n          animateBorder={ this.animateBorder }\n          pointer={ this.pointer }\n        >\n          <div\n            class={ {\n              container: true,\n              [`mode-${ this.mode }`]: true\n            } }\n          >\n            <div class=\"icon\">\n              <slot name=\"icon\">\n                { this.renderIcon() }\n              </slot>\n            </div>\n            <div class=\"text\">\n              <slot></slot>\n            </div>\n          </div>\n        </rwc-card>\n      </Host>\n    );\n  }\n\n  /**\n   * Renders the icon element.\n   */\n  renderIcon(): FunctionalComponent {\n    if (this.icon) {\n      return (\n        <img src={ this.icon } alt=\"icon\"></img>\n      )\n    }\n    return (\n      <div innerHTML={ InfoIcon } class=\"svg-icon\"></div>\n    )\n  }\n}\n"],"version":3}