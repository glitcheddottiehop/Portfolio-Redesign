import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { C as Close } from './close.js';
import { F as FileUtils } from './file.js';

const tagCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--tag-border:2px solid rgb(173, 255, 47);--tag-border-radius:2rem;--tag-box-shadow:0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);--tag-background-color:rgb(173, 255, 47);--tag-clickable-background-color:#fff;--tag-clickable-hover-background-color:rgba(173, 255, 47, 0.06);--tag-clickable-active-background-color:rgba(173, 255, 47, 0.1);--tag-font-size:0.875rem;--tag-icon-size:1rem;--tag-icon-margin:0 0 0 0.25rem;--tag-hover-text-color:rgb(173, 255, 47);--tag-text-color:rgb(33, 33, 33);--tag-padding:0.25rem 0.5rem;--tag-width:fit-content;--tag-transition-duration:200ms;display:block}.container{border:var(--tag-border);align-items:center;border-radius:var(--tag-border-radius);display:flex;width:var(--tag-width);padding:var(--tag-padding);background-color:var(--tag-background-color);color:var(--tag-text-color);font-size:var(--tag-font-size)}.clickable{color:var(--tag-border);transition:box-shadow var(--tag-transition-duration) ease;background-color:var(--tag-clickable-background-color)}.clickable:hover{background-color:var(--tag-clickable-hover-background-color);box-shadow:var(--tag-box-shadow);color:var(--tag-hover-text-color);cursor:pointer}.clickable:hover .icon-wrapper svg path{fill:var(--tag-hover-text-color)}.clickable:active{background-color:var(--tag-clickable-active-background-color)}.clickable.selected{background-color:var(--tag-background-color);color:var(--tag-text-color);cursor:pointer}.clickable.selected .icon-wrapper svg path{fill:var(--tag-text-color)}.clickable .icon-wrapper svg path{fill:var(--tag-text-color)}.icon-wrapper{align-self:center;flex-shrink:0;display:flex;cursor:pointer;margin:var(--tag-icon-margin)}.icon-wrapper svg{height:100%;width:100%}.icon-wrapper svg path{fill:var(--tag-text-color)}.icon{height:var(--tag-icon-size);width:var(--tag-icon-size)}";

const RwcTag$1 = proxyCustomElement(class RwcTag extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.deleteTagEvent = createEvent(this, "deleteTag", 7);
    this.icon = '';
    this.renderIcon = false;
    this.selected = false;
    this.clickable = false;
  }
  render() {
    return (h(Host, null, h("div", { class: {
        container: true,
        clickable: this.clickable,
        selected: this.selected
      } }, h("div", { class: "text" }, h("slot", null)), this.renderIconWrapper())));
  }
  deleteTag() {
    this.deleteTagEvent.emit();
  }
  renderIconWrapper() {
    if (this.renderIcon) {
      return (h("div", { class: "icon-wrapper", onClick: () => this.deleteTag() }, h("slot", { name: "icon" }, this.renderIconElement())));
    }
  }
  renderIconElement() {
    if (this.icon) {
      return (h("img", { class: "icon", src: this.icon, alt: FileUtils.getCleanFileName(this.icon) }));
    }
    return (h("div", { innerHTML: Close, class: "icon svg-icon" }));
  }
  static get style() { return tagCss; }
}, [1, "rwc-tag", {
    "icon": [1],
    "renderIcon": [4, "render-icon"],
    "selected": [4],
    "clickable": [4]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["rwc-tag"];
  components.forEach(tagName => { switch (tagName) {
    case "rwc-tag":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, RwcTag$1);
      }
      break;
  } });
}

const RwcTag = RwcTag$1;
const defineCustomElement = defineCustomElement$1;

export { RwcTag, defineCustomElement };

//# sourceMappingURL=rwc-tag.js.map