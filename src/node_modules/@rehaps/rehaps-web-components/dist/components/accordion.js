import { proxyCustomElement, HTMLElement, h, Host, Fragment } from '@stencil/core/internal/client';

const ExpandMore = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M15.88 9.29 12 13.17 8.12 9.29a.996.996 0 1 0-1.41 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59a.996.996 0 0 0 0-1.41c-.39-.38-1.03-.39-1.42 0z"/></svg>`;

const accordionCss = "@font-face{font-family:\"Inter\";font-style:normal;font-weight:400;font-display:swap;src:url(\"assets/fonts/inter/Inter-Regular.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Regular.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:500;font-display:swap;src:url(\"assets/fonts/inter/Inter-Medium.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-Medium.woff?v=1.0\") format(\"woff\")}@font-face{font-family:\"Inter\";font-style:normal;font-weight:600;font-display:swap;src:url(\"assets/fonts/inter/Inter-SemiBold.woff2?v=1.0\") format(\"woff2\"), url(\"assets/fonts/inter/Inter-SemiBold.woff?v=1.0\") format(\"woff\")}:host{--accordion-default-font-family:Inter, system-ui, sans-serif;--accordion-heading-padding:0.5rem 0;--accordion-heading-font-family:var(--accordion-default-font-family);--accordion-heading-font-size:1.25rem;--accordion-heading-font-weight:500;--accordion-content-line-height:1.2;--accordion-content-padding:0.5rem 0 1rem 0;--accordion-content-font-family:var(--accordion-default-font-family);--accordion-content-font-size:1rem;--accordion-content-font-weight:400;--accordion-content-line-height:1.2;--accordion-divider-background-color:rgb(224, 224, 224);--accordion-divider-height:1px;--accordion-icon-color:rgb(189, 189, 189);--accordion-icon-open-transform:rotate(-180deg);--accordion-animation-duration:200ms;display:block}.heading{cursor:pointer;user-select:none;font-family:var(--accordion-heading-font-family);font-size:var(--accordion-heading-font-size);font-weight:var(--accordion-heading-font-weight);line-height:var(--accordion-content-line-height);padding:var(--accordion-heading-padding)}.heading.with-icon{display:flex;flex-direction:row;justify-content:space-between}.left,.right{display:flex;flex-direction:column;justify-content:center}.left{flex-grow:1}.right{flex-shrink:0}.icon{display:flex;flex-direction:column;justify-content:center;fill:var(--accordion-icon-color);transition:transform var(--accordion-animation-duration) ease-in-out}.content-wrapper{height:0;overflow:hidden;transition:height var(--accordion-animation-duration) ease-in-out}.content{font-family:var(--accordion-default-font-family);font-size:var(--accordion-content-font-size);font-weight:var(--accordion-content-font-weight);padding:var(--accordion-content-padding)}.divider{background-color:var(--accordion-divider-background-color);height:var(--accordion-divider-height)}.open .content-wrapper{height:auto}.open .icon.rotate{transform:var(--accordion-icon-open-transform)}";

const RwcAccordion = proxyCustomElement(class RwcAccordion extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.open = false;
    this.renderDivider = true;
    this.renderIcon = true;
  }
  get animationDuration() {
    return Number.parseInt(getComputedStyle(this.host).getPropertyValue('--accordion-animation-duration'));
  }
  onHeadingClick() {
    this.setState(!this.open);
  }
  async setState(value) {
    if (this.animationCallback !== null) {
      clearTimeout(this.animationCallback);
    }
    this.open = value;
    if (value) {
      this.contentWrapperElement.style.height = `${this.contentElement.offsetHeight}px`;
    }
    else {
      this.contentWrapperElement.style.height = `${this.contentElement.offsetHeight}px`;
      await new Promise(requestAnimationFrame);
      this.contentWrapperElement.style.height = `0px`;
    }
    this.animationCallback = setTimeout(() => {
      this.contentWrapperElement.style.height = '';
      this.animationCallback = null;
    }, this.animationDuration);
  }
  render() {
    return (h(Host, { class: {
        open: this.open,
      } }, h("div", { class: {
        container: true,
        open: this.open
      } }, h("div", { class: {
        heading: true,
        'with-icon': this.renderIcon
      }, onClick: () => this.onHeadingClick() }, h("div", { class: "left" }, h("slot", { name: "heading" })), this.renderHeadingIconContainer()), h("div", { ref: (element) => this.contentWrapperElement = element, class: "content-wrapper" }, h("div", { ref: (element) => this.contentElement = element, class: "content" }, h("slot", null))), this.renderDividerElement())));
  }
  renderDividerElement() {
    if (this.renderDivider) {
      return h("div", { class: "divider" });
    }
    return h(Fragment, null);
  }
  renderHeadingIconContainer() {
    if (this.renderIcon) {
      return (h("div", { class: "right" }, h("slot", { name: "heading-icon" }, this.renderDefaultIcon())));
    }
    return h(Fragment, null);
  }
  renderDefaultIcon() {
    return h("div", { class: "icon rotate", innerHTML: ExpandMore });
  }
  get host() { return this; }
  static get style() { return accordionCss; }
}, [1, "rwc-accordion", {
    "open": [1540],
    "renderDivider": [4, "render-divider"],
    "renderIcon": [4, "render-icon"],
    "setState": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["rwc-accordion"];
  components.forEach(tagName => { switch (tagName) {
    case "rwc-accordion":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, RwcAccordion);
      }
      break;
  } });
}

export { ExpandMore as E, RwcAccordion as R, defineCustomElement as d };

//# sourceMappingURL=accordion.js.map