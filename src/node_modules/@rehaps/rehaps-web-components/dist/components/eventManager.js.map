{"file":"eventManager.js","mappings":"MAMa,YAAY;EAAzB;IAIU,qBAAgB,GAAuB,EAAE,CAAC;GAsBnD;EAjBQ,qBAAqB,CAAC,OAAgB,EAAE,KAAa,EAAE,QAAwC;IACpG,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC1C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;MACzB,OAAO,EAAE,OAAO;MAChB,IAAI,EAAE,KAAK;MACX,QAAQ,EAAE,QAAQ;KACnB,CAAC,CAAC;GACJ;EAKM,mBAAmB;IACxB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAuB;MAClD,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;KACjE,CAAC,CAAC;GACJ;;;;;","names":[],"sources":["src/utils/actions/eventManager.ts"],"sourcesContent":["import { ISubscribedEvent } from '../../interfaces/actions/EventManager';\n\n/**\n * Helper class for managing event subscriptions.\n * Meant to prevent callbacks to removed components.\n */\nexport class EventManager {\n  /**\n   * List of events registered for the instance\n   */\n  private subscribedEvents: ISubscribedEvent[] = [];\n\n  /**\n   * Register a new event listener\n   */\n  public registerEventListener(element: Element, event: string, callback: (...args: any[] | any) => void) {\n    element.addEventListener(event, callback);\n    this.subscribedEvents.push({\n      element: element,\n      name: event,\n      callback: callback\n    });\n  }\n\n  /**\n   * Clear all event listeners from the instance\n   */\n  public clearEventListeners(): void {\n    this.subscribedEvents.forEach((event: ISubscribedEvent) => {\n        event.element.removeEventListener(event.name, event.callback);\n    });\n  }\n}\n"],"version":3}