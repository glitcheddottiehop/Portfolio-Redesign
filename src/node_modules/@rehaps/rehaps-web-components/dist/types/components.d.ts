/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ButtonTheme, ButtonType, ButtonWidth } from "./interfaces/components/basic/button/button";
import { ContainerAnimation } from "./interfaces/components/layout/container/types";
import { DropdownMode, DropdownOpenMode, DropdownPosition, DropdownSize } from "./interfaces/components/basic/dropdown/dropdown";
import { GridAlignment, GridColumnCount, GridLayoutMode } from "./interfaces/components/layout/columns/grid";
import { InfoCardLayoutMode } from "./interfaces/components/basic/cards/info-card/info-card";
import { InputAutoComplete, InputType, RwcInputValidatorInterface } from "./interfaces/components/basic/input/input";
import { NavigationOpenMode, NavigationType, SubNavigationPosition } from "./interfaces/components/basic/navigation/navigation";
import { SidebarPositions, SidebarStates } from "./interfaces/components/layout/sidebar/sidebar";
import { SystemNotificationInterface } from "./interfaces/components/messages/system-notifications/system-notifications";
import { TabsRenderMode } from "./interfaces/components/basic/tabs/tabs";
export { ButtonTheme, ButtonType, ButtonWidth } from "./interfaces/components/basic/button/button";
export { ContainerAnimation } from "./interfaces/components/layout/container/types";
export { DropdownMode, DropdownOpenMode, DropdownPosition, DropdownSize } from "./interfaces/components/basic/dropdown/dropdown";
export { GridAlignment, GridColumnCount, GridLayoutMode } from "./interfaces/components/layout/columns/grid";
export { InfoCardLayoutMode } from "./interfaces/components/basic/cards/info-card/info-card";
export { InputAutoComplete, InputType, RwcInputValidatorInterface } from "./interfaces/components/basic/input/input";
export { NavigationOpenMode, NavigationType, SubNavigationPosition } from "./interfaces/components/basic/navigation/navigation";
export { SidebarPositions, SidebarStates } from "./interfaces/components/layout/sidebar/sidebar";
export { SystemNotificationInterface } from "./interfaces/components/messages/system-notifications/system-notifications";
export { TabsRenderMode } from "./interfaces/components/basic/tabs/tabs";
export namespace Components {
    interface RwcAccordion {
        /**
          * The open state of the accordion.
         */
        "open": boolean;
        /**
          * Enables rendering of the divider.
         */
        "renderDivider": boolean;
        /**
          * Enables rendering of the heading icon.
         */
        "renderIcon": boolean;
        /**
          * Sets the open state of the accordion to the passed value
         */
        "setState": (value: boolean) => Promise<void>;
    }
    interface RwcAutoLayout {
    }
    interface RwcButton {
        /**
          * Path to the left icon.
         */
        "iconLeft": string;
        /**
          * Path to the right icon.
         */
        "iconRight": string;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow": boolean;
        /**
          * Set animation.
         */
        "ripple": boolean;
        /**
          * Set left icon visible.
         */
        "showIconLeft": boolean;
        /**
          * Set right icon visible.
         */
        "showIconRight": boolean;
        /**
          * Set button theme.
         */
        "theme": ButtonTheme;
        /**
          * Set button type.
         */
        "type": ButtonType;
        /**
          * Set button width.
         */
        "width": ButtonWidth;
    }
    interface RwcCard {
        /**
          * Animate border on hover
         */
        "animateBorder": boolean;
        /**
          * Change cursor to pointer on hover
         */
        "pointer": boolean;
        /**
          * Set rendering of border
         */
        "renderBorder": boolean;
        /**
          * Set rendering of box-shadow
         */
        "renderShadow": boolean;
    }
    interface RwcContainer {
        /**
          * Enable the opacity animation for the scroll animation
         */
        "animateOpacity": boolean;
        /**
          * The duration of the animation in milliseconds
         */
        "animationDuration": number;
        /**
          * The animation to play when the container is scrolled into viewport
         */
        "scrollIntoAnimation": ContainerAnimation;
        /**
          * The animation to play when the container is scrolled out of viewport
         */
        "scrollOutAnimation": ContainerAnimation;
        /**
          * The intersection threshold for the animation to trigger \ What percentage of the element must be in the viewport to trigger the animation
         */
        "visibilityThreshold": number;
    }
    interface RwcDropdown {
        /**
          * Initialize the component.
         */
        "init": () => Promise<void>;
        /**
          * Determines the rendering behaviour of the dropdown.
         */
        "mode": DropdownMode;
        /**
          * The open mode of the dropdown.
         */
        "openMode": DropdownOpenMode;
        /**
          * The position of the dropdown from the parent.
         */
        "position": DropdownPosition;
        /**
          * Set state of the dropdown.
         */
        "setState": (value: boolean) => Promise<void>;
        /**
          * The sizing of the dropdown.
         */
        "size": DropdownSize;
    }
    interface RwcFoldingSquares {
    }
    interface RwcGrid {
        /**
          * column positioning of last row.
         */
        "alignment": GridAlignment;
        /**
          * If enabled, breakpoints will be based on host size instead of window inner width.
         */
        "breakOnHostWidth": boolean;
        /**
          * Number of columns.
         */
        "columns": GridColumnCount;
        /**
          * Content layout mode.
         */
        "mode": GridLayoutMode;
    }
    interface RwcHeroBanner {
        /**
          * Sets the height automatically based on window inner width.
         */
        "autoHeight": boolean;
        /**
          * Removes the default content HTML structure.
         */
        "customStructure": boolean;
        /**
          * Sets the breakpoint in pixels where vertical gradient stops and horizontal starts.
         */
        "gradientDirectionBreakpoint": number;
        /**
          * The horizontal position of the center of the image in percentage.\ 0 - left edge, 100 - right edge, 50 - center (default)
         */
        "horizontalCenter": number;
        /**
          * Enables the rendering of the gradient.
         */
        "renderGradient": boolean;
        /**
          * The path to the image asset to render.
         */
        "src": string;
        /**
          * The vertical position of the center of the image in percentage.\ 0 - top edge, 100 - bottom edge, 50 - center (default)
         */
        "verticalCenter": number;
    }
    interface RwcIconTextSteps {
        /**
          * Updates the layout automatically if the minimum content width is smaller than the host element.
         */
        "autoUpdateLayout": boolean;
        /**
          * Number of columns.
         */
        "columns": GridColumnCount;
    }
    interface RwcInfoCard {
        /**
          * Animate border on hover.
         */
        "animateBorder": boolean;
        /**
          * Path to the icon.
         */
        "icon": string;
        /**
          * The layout mode of the info card.
         */
        "mode": InfoCardLayoutMode;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer": boolean;
        /**
          * Set rendering of border.
         */
        "renderBorder": boolean;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow": boolean;
    }
    interface RwcInput {
        /**
          * Enables the auto complete for the input field.
         */
        "autoComplete": InputAutoComplete;
        /**
          * Clears the list of validation errors.
         */
        "clearErrors": () => Promise<void>;
        /**
          * Sets the disabled state for the input field.
         */
        "disabled": boolean;
        /**
          * The focused state of the component.
         */
        "focused": boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * Determines if the validation must be only triggered manually.
         */
        "manualValidation": boolean;
        /**
          * The name attribute of the input field.
         */
        "name": string;
        /**
          * The placeholder value of the input field.
         */
        "placeholder": string;
        /**
          * Sets the components error array to passed array of strings.
         */
        "setErrors": (errors: Array<string>) => Promise<void>;
        /**
          * The type of the input field.
         */
        "type": InputType;
        /**
          * Validates the input of the component
         */
        "validate": () => Promise<boolean>;
        /**
          * List of validators used for validation of the input.
         */
        "validators": Array<RwcInputValidatorInterface>;
        /**
          * The current value of the input field.
         */
        "value": string;
    }
    interface RwcModal {
        /**
          * Speed of the modal fade in/out animation.
         */
        "animationSpeed": number;
        /**
          * Closes the modal.
         */
        "close": () => Promise<void>;
        /**
          * Initializes toggle / close / open events.
         */
        "init": () => Promise<void>;
        /**
          * If content is longer than sidebar then scroll self instead of parent.
         */
        "innerScroll": boolean;
        /**
          * Opens sidebar.
         */
        "open": () => Promise<void>;
        /**
          * Sets rendering of close icon.
         */
        "renderCloseIcon": boolean;
        /**
          * Sets rendering of divider before the footer.
         */
        "renderFooterDivider": boolean;
        /**
          * Sets rendering of divider after the header.
         */
        "renderHeaderDivider": boolean;
        /**
          * Key used to bind action elements to the modal.
         */
        "rwcKey": string;
        /**
          * Toggles sidebar's open state.
         */
        "toggle": () => Promise<void>;
    }
    interface RwcNavigation {
        /**
          * The type of the navigation
         */
        "type": NavigationType;
    }
    interface RwcNavigationElement {
        /**
          * The path to the left icon image.
         */
        "iconLeft": string;
        /**
          * The path to the right icon image.
         */
        "iconRight": string;
        /**
          * The link to navigate to on click
         */
        "link": string;
        /**
          * Determines if the sub navigation opens on hover or on toggle click
         */
        "openMode": NavigationOpenMode;
        /**
          * Prevents default anchor element navigation behaviour.
         */
        "preventNavigation": boolean;
        /**
          * The render mode of the dividers.
         */
        "renderDividers": boolean;
        /**
          * Enables rendering of the default sub navigation indicator icon.
         */
        "renderIcon": boolean;
        /**
          * The position of the sub navigation in relation to the navigation element
         */
        "subNavigationPosition": SubNavigationPosition;
        /**
          * The type of the sub navigation
         */
        "subNavigationType": NavigationType;
    }
    interface RwcPostCard {
        /**
          * Animate border on hover.
         */
        "animateBorder": boolean;
        /**
          * Path to the avatar.
         */
        "avatar": string;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer": boolean;
        /**
          * Set rendering of border.
         */
        "renderBorder": boolean;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow": boolean;
        /**
          * Set avatar rounded.
         */
        "roundedAvatar": boolean;
    }
    interface RwcSelect {
        /**
          * Path to the icon.
         */
        "icon": string;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer": boolean;
        /**
          * Sets the value and text of the component to the value of the option element containing the passed value.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Text of selected field.
         */
        "text": string;
        /**
          * Value of selected field.
         */
        "value": string;
    }
    interface RwcSidebar {
        /**
          * Closes sidebar
         */
        "close": () => Promise<void>;
        /**
          * Default sidebar's state
         */
        "defaultState": SidebarStates;
        /**
          * Initializes toggle / close / open events
         */
        "init": () => Promise<void>;
        /**
          * If content is longer than sidebar then scroll self instead of parent
         */
        "innerScroll": boolean;
        /**
          * Opens sidebar
         */
        "open": () => Promise<void>;
        /**
          * Window side to stick to
         */
        "position": SidebarPositions;
        /**
          * Key used for initializing event listeners
         */
        "rwcKey": string;
        /**
          * Toggles sidebar's open state
         */
        "toggle": () => Promise<void>;
    }
    interface RwcSlides {
        /**
          * Enable auto slide change.
         */
        "autoSlide": boolean;
        /**
          * Auto slide change delay in milliseconds.
         */
        "autoSlideDelay": number;
        /**
          * The active slide on component load.
         */
        "defaultSlide": number;
        /**
          * Change active tab to provided index and start indicator animation.
         */
        "goTo": (targetIndex: number | CustomEvent) => Promise<void>;
        /**
          * Key used for initializing event listeners.
         */
        "rwcKey": string;
    }
    interface RwcSpinner {
    }
    /**
     * This is a component for system notifications.
     */
    interface RwcSystemNotifications {
        /**
          * This method clears all notifications.
         */
        "clearNotifications": () => Promise<void>;
        /**
          * This method pushes a notification. Generates random key if not set.
          * @returns The notification key.
         */
        "pushNotification": (notification: SystemNotificationInterface) => Promise<string>;
        /**
          * This method removes a notification.
         */
        "removeNotification": (index: number) => Promise<void>;
        /**
          * This method sets notifications.
         */
        "setNotifications": (notifications: SystemNotificationInterface[]) => Promise<string[]>;
    }
    interface RwcTabs {
        /**
          * Active tab on component load.
         */
        "defaultTab": number;
        /**
          * Change active tab to provided index and start indicator animation.
         */
        "goTo": (targetIndex: number | CustomEvent) => Promise<void>;
        /**
          * Tab indicator render mode.
         */
        "mode": TabsRenderMode;
        /**
          * Key used for initializing event listeners.
         */
        "rwcKey": string;
    }
    interface RwcTag {
        /**
          * Set tag to clickable.
         */
        "clickable": boolean;
        /**
          * Path to the icon.
         */
        "icon": string;
        /**
          * Render icon.
         */
        "renderIcon": boolean;
        /**
          * Set tag selected.
         */
        "selected": boolean;
    }
    interface RwcUserCard {
        /**
          * Animate border on hover.
         */
        "animateBorder": boolean;
        /**
          * Path to the icon.
         */
        "avatar": string;
        /**
          * Path to the icon.
         */
        "locationIcon": string;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer": boolean;
        /**
          * Path to the icon.
         */
        "ratingIcon": string;
        /**
          * Set rendering of border.
         */
        "renderBorder": boolean;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow": boolean;
        /**
          * Set avatar rounded.
         */
        "roundedAvatar": boolean;
    }
}
export interface RwcDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcDropdownElement;
}
export interface RwcModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcModalElement;
}
export interface RwcNavigationElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcNavigationElementElement;
}
export interface RwcSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcSidebarElement;
}
export interface RwcSlidesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcSlidesElement;
}
export interface RwcTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcTabsElement;
}
export interface RwcTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRwcTagElement;
}
declare global {
    interface HTMLRwcAccordionElement extends Components.RwcAccordion, HTMLStencilElement {
    }
    var HTMLRwcAccordionElement: {
        prototype: HTMLRwcAccordionElement;
        new (): HTMLRwcAccordionElement;
    };
    interface HTMLRwcAutoLayoutElement extends Components.RwcAutoLayout, HTMLStencilElement {
    }
    var HTMLRwcAutoLayoutElement: {
        prototype: HTMLRwcAutoLayoutElement;
        new (): HTMLRwcAutoLayoutElement;
    };
    interface HTMLRwcButtonElement extends Components.RwcButton, HTMLStencilElement {
    }
    var HTMLRwcButtonElement: {
        prototype: HTMLRwcButtonElement;
        new (): HTMLRwcButtonElement;
    };
    interface HTMLRwcCardElement extends Components.RwcCard, HTMLStencilElement {
    }
    var HTMLRwcCardElement: {
        prototype: HTMLRwcCardElement;
        new (): HTMLRwcCardElement;
    };
    interface HTMLRwcContainerElement extends Components.RwcContainer, HTMLStencilElement {
    }
    var HTMLRwcContainerElement: {
        prototype: HTMLRwcContainerElement;
        new (): HTMLRwcContainerElement;
    };
    interface HTMLRwcDropdownElement extends Components.RwcDropdown, HTMLStencilElement {
    }
    var HTMLRwcDropdownElement: {
        prototype: HTMLRwcDropdownElement;
        new (): HTMLRwcDropdownElement;
    };
    interface HTMLRwcFoldingSquaresElement extends Components.RwcFoldingSquares, HTMLStencilElement {
    }
    var HTMLRwcFoldingSquaresElement: {
        prototype: HTMLRwcFoldingSquaresElement;
        new (): HTMLRwcFoldingSquaresElement;
    };
    interface HTMLRwcGridElement extends Components.RwcGrid, HTMLStencilElement {
    }
    var HTMLRwcGridElement: {
        prototype: HTMLRwcGridElement;
        new (): HTMLRwcGridElement;
    };
    interface HTMLRwcHeroBannerElement extends Components.RwcHeroBanner, HTMLStencilElement {
    }
    var HTMLRwcHeroBannerElement: {
        prototype: HTMLRwcHeroBannerElement;
        new (): HTMLRwcHeroBannerElement;
    };
    interface HTMLRwcIconTextStepsElement extends Components.RwcIconTextSteps, HTMLStencilElement {
    }
    var HTMLRwcIconTextStepsElement: {
        prototype: HTMLRwcIconTextStepsElement;
        new (): HTMLRwcIconTextStepsElement;
    };
    interface HTMLRwcInfoCardElement extends Components.RwcInfoCard, HTMLStencilElement {
    }
    var HTMLRwcInfoCardElement: {
        prototype: HTMLRwcInfoCardElement;
        new (): HTMLRwcInfoCardElement;
    };
    interface HTMLRwcInputElement extends Components.RwcInput, HTMLStencilElement {
    }
    var HTMLRwcInputElement: {
        prototype: HTMLRwcInputElement;
        new (): HTMLRwcInputElement;
    };
    interface HTMLRwcModalElement extends Components.RwcModal, HTMLStencilElement {
    }
    var HTMLRwcModalElement: {
        prototype: HTMLRwcModalElement;
        new (): HTMLRwcModalElement;
    };
    interface HTMLRwcNavigationElement extends Components.RwcNavigation, HTMLStencilElement {
    }
    var HTMLRwcNavigationElement: {
        prototype: HTMLRwcNavigationElement;
        new (): HTMLRwcNavigationElement;
    };
    interface HTMLRwcNavigationElementElement extends Components.RwcNavigationElement, HTMLStencilElement {
    }
    var HTMLRwcNavigationElementElement: {
        prototype: HTMLRwcNavigationElementElement;
        new (): HTMLRwcNavigationElementElement;
    };
    interface HTMLRwcPostCardElement extends Components.RwcPostCard, HTMLStencilElement {
    }
    var HTMLRwcPostCardElement: {
        prototype: HTMLRwcPostCardElement;
        new (): HTMLRwcPostCardElement;
    };
    interface HTMLRwcSelectElement extends Components.RwcSelect, HTMLStencilElement {
    }
    var HTMLRwcSelectElement: {
        prototype: HTMLRwcSelectElement;
        new (): HTMLRwcSelectElement;
    };
    interface HTMLRwcSidebarElement extends Components.RwcSidebar, HTMLStencilElement {
    }
    var HTMLRwcSidebarElement: {
        prototype: HTMLRwcSidebarElement;
        new (): HTMLRwcSidebarElement;
    };
    interface HTMLRwcSlidesElement extends Components.RwcSlides, HTMLStencilElement {
    }
    var HTMLRwcSlidesElement: {
        prototype: HTMLRwcSlidesElement;
        new (): HTMLRwcSlidesElement;
    };
    interface HTMLRwcSpinnerElement extends Components.RwcSpinner, HTMLStencilElement {
    }
    var HTMLRwcSpinnerElement: {
        prototype: HTMLRwcSpinnerElement;
        new (): HTMLRwcSpinnerElement;
    };
    /**
     * This is a component for system notifications.
     */
    interface HTMLRwcSystemNotificationsElement extends Components.RwcSystemNotifications, HTMLStencilElement {
    }
    var HTMLRwcSystemNotificationsElement: {
        prototype: HTMLRwcSystemNotificationsElement;
        new (): HTMLRwcSystemNotificationsElement;
    };
    interface HTMLRwcTabsElement extends Components.RwcTabs, HTMLStencilElement {
    }
    var HTMLRwcTabsElement: {
        prototype: HTMLRwcTabsElement;
        new (): HTMLRwcTabsElement;
    };
    interface HTMLRwcTagElement extends Components.RwcTag, HTMLStencilElement {
    }
    var HTMLRwcTagElement: {
        prototype: HTMLRwcTagElement;
        new (): HTMLRwcTagElement;
    };
    interface HTMLRwcUserCardElement extends Components.RwcUserCard, HTMLStencilElement {
    }
    var HTMLRwcUserCardElement: {
        prototype: HTMLRwcUserCardElement;
        new (): HTMLRwcUserCardElement;
    };
    interface HTMLElementTagNameMap {
        "rwc-accordion": HTMLRwcAccordionElement;
        "rwc-auto-layout": HTMLRwcAutoLayoutElement;
        "rwc-button": HTMLRwcButtonElement;
        "rwc-card": HTMLRwcCardElement;
        "rwc-container": HTMLRwcContainerElement;
        "rwc-dropdown": HTMLRwcDropdownElement;
        "rwc-folding-squares": HTMLRwcFoldingSquaresElement;
        "rwc-grid": HTMLRwcGridElement;
        "rwc-hero-banner": HTMLRwcHeroBannerElement;
        "rwc-icon-text-steps": HTMLRwcIconTextStepsElement;
        "rwc-info-card": HTMLRwcInfoCardElement;
        "rwc-input": HTMLRwcInputElement;
        "rwc-modal": HTMLRwcModalElement;
        "rwc-navigation": HTMLRwcNavigationElement;
        "rwc-navigation-element": HTMLRwcNavigationElementElement;
        "rwc-post-card": HTMLRwcPostCardElement;
        "rwc-select": HTMLRwcSelectElement;
        "rwc-sidebar": HTMLRwcSidebarElement;
        "rwc-slides": HTMLRwcSlidesElement;
        "rwc-spinner": HTMLRwcSpinnerElement;
        "rwc-system-notifications": HTMLRwcSystemNotificationsElement;
        "rwc-tabs": HTMLRwcTabsElement;
        "rwc-tag": HTMLRwcTagElement;
        "rwc-user-card": HTMLRwcUserCardElement;
    }
}
declare namespace LocalJSX {
    interface RwcAccordion {
        /**
          * The open state of the accordion.
         */
        "open"?: boolean;
        /**
          * Enables rendering of the divider.
         */
        "renderDivider"?: boolean;
        /**
          * Enables rendering of the heading icon.
         */
        "renderIcon"?: boolean;
    }
    interface RwcAutoLayout {
    }
    interface RwcButton {
        /**
          * Path to the left icon.
         */
        "iconLeft"?: string;
        /**
          * Path to the right icon.
         */
        "iconRight"?: string;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow"?: boolean;
        /**
          * Set animation.
         */
        "ripple"?: boolean;
        /**
          * Set left icon visible.
         */
        "showIconLeft"?: boolean;
        /**
          * Set right icon visible.
         */
        "showIconRight"?: boolean;
        /**
          * Set button theme.
         */
        "theme"?: ButtonTheme;
        /**
          * Set button type.
         */
        "type"?: ButtonType;
        /**
          * Set button width.
         */
        "width"?: ButtonWidth;
    }
    interface RwcCard {
        /**
          * Animate border on hover
         */
        "animateBorder"?: boolean;
        /**
          * Change cursor to pointer on hover
         */
        "pointer"?: boolean;
        /**
          * Set rendering of border
         */
        "renderBorder"?: boolean;
        /**
          * Set rendering of box-shadow
         */
        "renderShadow"?: boolean;
    }
    interface RwcContainer {
        /**
          * Enable the opacity animation for the scroll animation
         */
        "animateOpacity"?: boolean;
        /**
          * The duration of the animation in milliseconds
         */
        "animationDuration"?: number;
        /**
          * The animation to play when the container is scrolled into viewport
         */
        "scrollIntoAnimation"?: ContainerAnimation;
        /**
          * The animation to play when the container is scrolled out of viewport
         */
        "scrollOutAnimation"?: ContainerAnimation;
        /**
          * The intersection threshold for the animation to trigger \ What percentage of the element must be in the viewport to trigger the animation
         */
        "visibilityThreshold"?: number;
    }
    interface RwcDropdown {
        /**
          * Determines the rendering behaviour of the dropdown.
         */
        "mode"?: DropdownMode;
        /**
          * Event fired when the dropdown closing is triggered
         */
        "onDropdownClose"?: (event: RwcDropdownCustomEvent<void>) => void;
        /**
          * Event fired when the dropdown opening is triggered.
         */
        "onDropdownOpen"?: (event: RwcDropdownCustomEvent<void>) => void;
        /**
          * The open mode of the dropdown.
         */
        "openMode"?: DropdownOpenMode;
        /**
          * The position of the dropdown from the parent.
         */
        "position"?: DropdownPosition;
        /**
          * The sizing of the dropdown.
         */
        "size"?: DropdownSize;
    }
    interface RwcFoldingSquares {
    }
    interface RwcGrid {
        /**
          * column positioning of last row.
         */
        "alignment"?: GridAlignment;
        /**
          * If enabled, breakpoints will be based on host size instead of window inner width.
         */
        "breakOnHostWidth"?: boolean;
        /**
          * Number of columns.
         */
        "columns"?: GridColumnCount;
        /**
          * Content layout mode.
         */
        "mode"?: GridLayoutMode;
    }
    interface RwcHeroBanner {
        /**
          * Sets the height automatically based on window inner width.
         */
        "autoHeight"?: boolean;
        /**
          * Removes the default content HTML structure.
         */
        "customStructure"?: boolean;
        /**
          * Sets the breakpoint in pixels where vertical gradient stops and horizontal starts.
         */
        "gradientDirectionBreakpoint"?: number;
        /**
          * The horizontal position of the center of the image in percentage.\ 0 - left edge, 100 - right edge, 50 - center (default)
         */
        "horizontalCenter"?: number;
        /**
          * Enables the rendering of the gradient.
         */
        "renderGradient"?: boolean;
        /**
          * The path to the image asset to render.
         */
        "src"?: string;
        /**
          * The vertical position of the center of the image in percentage.\ 0 - top edge, 100 - bottom edge, 50 - center (default)
         */
        "verticalCenter"?: number;
    }
    interface RwcIconTextSteps {
        /**
          * Updates the layout automatically if the minimum content width is smaller than the host element.
         */
        "autoUpdateLayout"?: boolean;
        /**
          * Number of columns.
         */
        "columns"?: GridColumnCount;
    }
    interface RwcInfoCard {
        /**
          * Animate border on hover.
         */
        "animateBorder"?: boolean;
        /**
          * Path to the icon.
         */
        "icon"?: string;
        /**
          * The layout mode of the info card.
         */
        "mode"?: InfoCardLayoutMode;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer"?: boolean;
        /**
          * Set rendering of border.
         */
        "renderBorder"?: boolean;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow"?: boolean;
    }
    interface RwcInput {
        /**
          * Enables the auto complete for the input field.
         */
        "autoComplete"?: InputAutoComplete;
        /**
          * Sets the disabled state for the input field.
         */
        "disabled"?: boolean;
        /**
          * The focused state of the component.
         */
        "focused"?: boolean;
        /**
          * The label for the input field.
         */
        "label"?: string;
        /**
          * Determines if the validation must be only triggered manually.
         */
        "manualValidation"?: boolean;
        /**
          * The name attribute of the input field.
         */
        "name"?: string;
        /**
          * The placeholder value of the input field.
         */
        "placeholder"?: string;
        /**
          * The type of the input field.
         */
        "type"?: InputType;
        /**
          * List of validators used for validation of the input.
         */
        "validators"?: Array<RwcInputValidatorInterface>;
        /**
          * The current value of the input field.
         */
        "value"?: string;
    }
    interface RwcModal {
        /**
          * Speed of the modal fade in/out animation.
         */
        "animationSpeed"?: number;
        /**
          * If content is longer than sidebar then scroll self instead of parent.
         */
        "innerScroll"?: boolean;
        /**
          * The event called on completing the closing of the modal.
         */
        "onModalClose"?: (event: RwcModalCustomEvent<void>) => void;
        /**
          * The event called on completing the opening of the modal.
         */
        "onModalOpen"?: (event: RwcModalCustomEvent<void>) => void;
        /**
          * Sets rendering of close icon.
         */
        "renderCloseIcon"?: boolean;
        /**
          * Sets rendering of divider before the footer.
         */
        "renderFooterDivider"?: boolean;
        /**
          * Sets rendering of divider after the header.
         */
        "renderHeaderDivider"?: boolean;
        /**
          * Key used to bind action elements to the modal.
         */
        "rwcKey"?: string;
    }
    interface RwcNavigation {
        /**
          * The type of the navigation
         */
        "type"?: NavigationType;
    }
    interface RwcNavigationElement {
        /**
          * The path to the left icon image.
         */
        "iconLeft"?: string;
        /**
          * The path to the right icon image.
         */
        "iconRight"?: string;
        /**
          * The link to navigate to on click
         */
        "link"?: string;
        /**
          * The navigation event emitter.
         */
        "onNavigate"?: (event: RwcNavigationElementCustomEvent<string>) => void;
        /**
          * Determines if the sub navigation opens on hover or on toggle click
         */
        "openMode"?: NavigationOpenMode;
        /**
          * Prevents default anchor element navigation behaviour.
         */
        "preventNavigation"?: boolean;
        /**
          * The render mode of the dividers.
         */
        "renderDividers"?: boolean;
        /**
          * Enables rendering of the default sub navigation indicator icon.
         */
        "renderIcon"?: boolean;
        /**
          * The position of the sub navigation in relation to the navigation element
         */
        "subNavigationPosition"?: SubNavigationPosition;
        /**
          * The type of the sub navigation
         */
        "subNavigationType"?: NavigationType;
    }
    interface RwcPostCard {
        /**
          * Animate border on hover.
         */
        "animateBorder"?: boolean;
        /**
          * Path to the avatar.
         */
        "avatar"?: string;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer"?: boolean;
        /**
          * Set rendering of border.
         */
        "renderBorder"?: boolean;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow"?: boolean;
        /**
          * Set avatar rounded.
         */
        "roundedAvatar"?: boolean;
    }
    interface RwcSelect {
        /**
          * Path to the icon.
         */
        "icon"?: string;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer"?: boolean;
        /**
          * Text of selected field.
         */
        "text"?: string;
        /**
          * Value of selected field.
         */
        "value"?: string;
    }
    interface RwcSidebar {
        /**
          * Default sidebar's state
         */
        "defaultState"?: SidebarStates;
        /**
          * If content is longer than sidebar then scroll self instead of parent
         */
        "innerScroll"?: boolean;
        /**
          * The event called on the closing of the sidebar.
         */
        "onSidebarClose"?: (event: RwcSidebarCustomEvent<void>) => void;
        /**
          * The event called on the opening of the sidebar.
         */
        "onSidebarOpen"?: (event: RwcSidebarCustomEvent<void>) => void;
        /**
          * Window side to stick to
         */
        "position"?: SidebarPositions;
        /**
          * Key used for initializing event listeners
         */
        "rwcKey"?: string;
    }
    interface RwcSlides {
        /**
          * Enable auto slide change.
         */
        "autoSlide"?: boolean;
        /**
          * Auto slide change delay in milliseconds.
         */
        "autoSlideDelay"?: number;
        /**
          * The active slide on component load.
         */
        "defaultSlide"?: number;
        /**
          * Event fired when active slide has been changed.
         */
        "onIndexChange"?: (event: RwcSlidesCustomEvent<GoToEventDetail>) => void;
        /**
          * Key used for initializing event listeners.
         */
        "rwcKey"?: string;
    }
    interface RwcSpinner {
    }
    /**
     * This is a component for system notifications.
     */
    interface RwcSystemNotifications {
    }
    interface RwcTabs {
        /**
          * Active tab on component load.
         */
        "defaultTab"?: number;
        /**
          * Tab indicator render mode.
         */
        "mode"?: TabsRenderMode;
        /**
          * Event fired when active tab change has been completed.
         */
        "onIndexChange"?: (event: RwcTabsCustomEvent<GoToEventDetail>) => void;
        /**
          * Key used for initializing event listeners.
         */
        "rwcKey"?: string;
    }
    interface RwcTag {
        /**
          * Set tag to clickable.
         */
        "clickable"?: boolean;
        /**
          * Path to the icon.
         */
        "icon"?: string;
        /**
          * Event fired when the delete icon is clicked.
         */
        "onDeleteTag"?: (event: RwcTagCustomEvent<void>) => void;
        /**
          * Render icon.
         */
        "renderIcon"?: boolean;
        /**
          * Set tag selected.
         */
        "selected"?: boolean;
    }
    interface RwcUserCard {
        /**
          * Animate border on hover.
         */
        "animateBorder"?: boolean;
        /**
          * Path to the icon.
         */
        "avatar"?: string;
        /**
          * Path to the icon.
         */
        "locationIcon"?: string;
        /**
          * Change cursor to pointer on hover.
         */
        "pointer"?: boolean;
        /**
          * Path to the icon.
         */
        "ratingIcon"?: string;
        /**
          * Set rendering of border.
         */
        "renderBorder"?: boolean;
        /**
          * Set rendering of box-shadow.
         */
        "renderShadow"?: boolean;
        /**
          * Set avatar rounded.
         */
        "roundedAvatar"?: boolean;
    }
    interface IntrinsicElements {
        "rwc-accordion": RwcAccordion;
        "rwc-auto-layout": RwcAutoLayout;
        "rwc-button": RwcButton;
        "rwc-card": RwcCard;
        "rwc-container": RwcContainer;
        "rwc-dropdown": RwcDropdown;
        "rwc-folding-squares": RwcFoldingSquares;
        "rwc-grid": RwcGrid;
        "rwc-hero-banner": RwcHeroBanner;
        "rwc-icon-text-steps": RwcIconTextSteps;
        "rwc-info-card": RwcInfoCard;
        "rwc-input": RwcInput;
        "rwc-modal": RwcModal;
        "rwc-navigation": RwcNavigation;
        "rwc-navigation-element": RwcNavigationElement;
        "rwc-post-card": RwcPostCard;
        "rwc-select": RwcSelect;
        "rwc-sidebar": RwcSidebar;
        "rwc-slides": RwcSlides;
        "rwc-spinner": RwcSpinner;
        "rwc-system-notifications": RwcSystemNotifications;
        "rwc-tabs": RwcTabs;
        "rwc-tag": RwcTag;
        "rwc-user-card": RwcUserCard;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rwc-accordion": LocalJSX.RwcAccordion & JSXBase.HTMLAttributes<HTMLRwcAccordionElement>;
            "rwc-auto-layout": LocalJSX.RwcAutoLayout & JSXBase.HTMLAttributes<HTMLRwcAutoLayoutElement>;
            "rwc-button": LocalJSX.RwcButton & JSXBase.HTMLAttributes<HTMLRwcButtonElement>;
            "rwc-card": LocalJSX.RwcCard & JSXBase.HTMLAttributes<HTMLRwcCardElement>;
            "rwc-container": LocalJSX.RwcContainer & JSXBase.HTMLAttributes<HTMLRwcContainerElement>;
            "rwc-dropdown": LocalJSX.RwcDropdown & JSXBase.HTMLAttributes<HTMLRwcDropdownElement>;
            "rwc-folding-squares": LocalJSX.RwcFoldingSquares & JSXBase.HTMLAttributes<HTMLRwcFoldingSquaresElement>;
            "rwc-grid": LocalJSX.RwcGrid & JSXBase.HTMLAttributes<HTMLRwcGridElement>;
            "rwc-hero-banner": LocalJSX.RwcHeroBanner & JSXBase.HTMLAttributes<HTMLRwcHeroBannerElement>;
            "rwc-icon-text-steps": LocalJSX.RwcIconTextSteps & JSXBase.HTMLAttributes<HTMLRwcIconTextStepsElement>;
            "rwc-info-card": LocalJSX.RwcInfoCard & JSXBase.HTMLAttributes<HTMLRwcInfoCardElement>;
            "rwc-input": LocalJSX.RwcInput & JSXBase.HTMLAttributes<HTMLRwcInputElement>;
            "rwc-modal": LocalJSX.RwcModal & JSXBase.HTMLAttributes<HTMLRwcModalElement>;
            "rwc-navigation": LocalJSX.RwcNavigation & JSXBase.HTMLAttributes<HTMLRwcNavigationElement>;
            "rwc-navigation-element": LocalJSX.RwcNavigationElement & JSXBase.HTMLAttributes<HTMLRwcNavigationElementElement>;
            "rwc-post-card": LocalJSX.RwcPostCard & JSXBase.HTMLAttributes<HTMLRwcPostCardElement>;
            "rwc-select": LocalJSX.RwcSelect & JSXBase.HTMLAttributes<HTMLRwcSelectElement>;
            "rwc-sidebar": LocalJSX.RwcSidebar & JSXBase.HTMLAttributes<HTMLRwcSidebarElement>;
            "rwc-slides": LocalJSX.RwcSlides & JSXBase.HTMLAttributes<HTMLRwcSlidesElement>;
            "rwc-spinner": LocalJSX.RwcSpinner & JSXBase.HTMLAttributes<HTMLRwcSpinnerElement>;
            /**
             * This is a component for system notifications.
             */
            "rwc-system-notifications": LocalJSX.RwcSystemNotifications & JSXBase.HTMLAttributes<HTMLRwcSystemNotificationsElement>;
            "rwc-tabs": LocalJSX.RwcTabs & JSXBase.HTMLAttributes<HTMLRwcTabsElement>;
            "rwc-tag": LocalJSX.RwcTag & JSXBase.HTMLAttributes<HTMLRwcTagElement>;
            "rwc-user-card": LocalJSX.RwcUserCard & JSXBase.HTMLAttributes<HTMLRwcUserCardElement>;
        }
    }
}
